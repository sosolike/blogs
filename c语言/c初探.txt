c语言概述：
    c：高级编程语言；
c语言基本特征：
    1：切近硬件，运行速度较快；
    2：是编译执行的语言，因此执行速度较快
    3：面向过程编程，代码结构会过于复杂，不如面向对象能够提高代码的重用性以及可维护性；
c语言基本语法：
    1：代码组成：
        一个c文件由：预处理指令、变量、函数、语句、注释 组成；
        c文件以.c作为后缀；

    2：基本语法规则：
        1：以 ; 号作为语句结束符；
        2：以 {} 作为语句块确认符号
        3：以 /*....*/ 注释代码
        4：标识符基本命名规则：
            1：由数字、字母、下划线组成；
            2：不能以数字开头；
            3：不能和系统关键字冲突；
            4：要有可读性；
            5：尽量避免使用_或者__开头；
            6：c中严格区分标识符大小写；
        5：对于main函数：
            1：一个c可执行的c文件中必须要有且只能有一个main函数；
            2：main函数是整个程序的入口；执行时从main函数开始执行；
            3：main的返回值可以是int或者void；
            4：一个c文件可以有任意多个函数，但是主函数(main)只能有一个；
        6：c代码执行流程：
            源代码-->编译-->链接-->可执行文件
            编译：将c代码编译为机器指令
            链接：将翻译好的机器指令文件 和 系统启动代码 以及 库函数代码链接到同一个文件中，生成可执行文件；
            备注：
                链接的过程中，对于库函数代码只会链接具体使用到的库函数代码，并不会包含整个库代码；
                c语言是编译链接执行的语言，因此c语言要能够执行必须要有编译器；
        7：c语言的多平台特性：
            c语言的多平台是指c编译器的多平台；
            c程序的移植需要考虑平台总线的位数、cpu类型等的不同；

c语言中的输出与输入：
    常见输出：
        1：printf():
            功能：用于输出制定内容
            用法: printf(var_content)：直接输出制定内容
                  print("format_str",var_content)：将需要输出的内容格式化之后输出；
            格式化字符串：
                1：格式化字符串由自定义字符串和格式化字符共同组成（或者其中一个）；
                2：格式化字符从左向右依次对应需要格式化的内容；
                3：常用格式化字符：
                    %s                      输出一个字符串
                    %c                      输出一个字符

                    %f                      输出一个单精度小数格式的浮点数（十进制）
                    %lf                     输出一个以双精度小数格式的浮点数（十进制）

                    %e                      输出一个单精度指数形式的浮点数
                    %le                     输出一个双精度指数形式的浮点数
                    %E                      输出一个单精度指数形式的浮点数
                    %lE                     输出一个双精度指数形式的浮点数

                    %hd                     以十进制、有符号的形式输出 short类型的整数                    
                    %d                      以十进制、有符号的形式输出 int类型的整数   
                    %ld                     以十进制、有符号的形式输出 long类型的整数   

                    %hu                     以十进制、无符号的形式输出 short类型的整数   
                    %u                      以十进制、无符号的形式输出 int类型的整数   
                    %lu                     以十进制、无符号的形式输出 long类型的整数   
                4：格式化字符完整形式：
                    %[flag][width][.precision]type
                    flag：标志符号：
                            -：表示左对齐，如果不填则默认右对齐
                            +：用于数字，表示输出符号，如果不填只有负数才会输出符号
                            空格：用于数字：正数加空格，负数加负号；
                            #：对于小数：强制输出小数点；对于八进制，十六进制，二进制，带上前缀；
                    width：最小输出宽度，不够是则以空格补齐，超过时则限制失效
                    .precision： 
                            对于 n，.precision 表示最小输出宽度
                            对于 f，.precision 表示输出精度。
                            对于 str，.precision 表示最大输出宽度。
            备注：----printf()输出以后并不会立刻将信息输出到屏幕；而是放入缓冲区；遇到换行符或者强制刷出的时候菜户输出到屏幕；

        2：puts();只能输出字符串；
        3：putchar();只能输出单个字符
c语言变量和常量：
    常量：
        1：变量特征：
            1：c语言是强数据类型编程语言，因此变量使用之前必须声明；
            2：变量的数据类型在声明时就已确定，在程序执行过程中不允许更改，不允许引用其他数据类型的值；
        2：变量命名：
            1：必须严格遵守c语言标识符命名规则；
            2：推荐以小写+下划线的方式命名；
            3：不允许中英文混合；
            4：不推荐以_或者__作为标识符起始字符；
        3：变量的声明：
            数据类型 变量名
            eg：int a;              /*一次声明一个变量*/
                int a,b,c=10,d      /*一次声明多个变量，并赋初值*/
            注意：变量必须先声明后使用；
                  声明之后如果未赋值，则只为该变量创建内存空间，
                  声明且赋值，则会为该变量创建内存空间并为其赋初值；
        4：变量的作用域：
            全局变量：函数外部声明的变量；在函数内部和函数外部都可使用，但是只能用在声明之后的函数内部以及函数外部；
            局部变量：只能在函数内部使用；不能在函数外部使用；
        5：未初始化的局部变量的值是不确定的！
    常量：
        1：常量特征：
            1：只能赋值一次；
            2：没有作用域的限制；
        2：常量命名：
            1：必须严格遵守c语言标识符命名规则；
            2：推荐以大写加下划线的方式命名；
        3：常量的声明：
            #define 常量名 常量值；
            eg：#define PI 3.1415926
        4：const限定符：
            c语言中使用const限定一个变量只读；即该变量只能赋值一次，之后将不能再更改；
            eg：const int num = 2
                num将在程序运行期间一直是2，不允许更改为其他的值；

        

c语言数据类型：
        1：整体可分为：基本类型、枚举类型、void类型、派生类型、聚合类型（数组类型和结构类型）、函数类型（函数返回值类型）
        2：基本类型：
            2.1--整数：
                类型列表:

                int                                 2字节/4字节                         -32768到32767或者-2e32到2e32-1
                unsigned int                        2字节或者4字节                      0到65535或者0到2e32

                short                               2字节                               -32768到32767 
                unsigned short                      2字节                               0到65535 

                long                                4字节
                unsigned long                       4字节  
                备注：
                    1：同一种数据类型在不同平台的大小不一样；可使用sizeof(type)来获取制定类型在当前平台的具体大小；
                    2：默认是十进制整数，八进制以0开头，十六进制以0X开头，二进制以0b开头；
                    3：数据类型的选取：
                        1：优先使用unsigned类型；在同样的类型中，unsigned可以表示更大的数据范围；
                        2：long型占用的空间更大，因此如非必要，尽量避免使用long型；
                        3：最小化原则，够用即可，尽量避免开辟多余内存；
                        4：int型溢出之后从-方向最小值开始；unsigned类型则从0开始；c语言中数据溢出之后并不会主动报告；

                
                    
            2.2--浮点数
                类型列表：                           
                float                               4字节                              6位小数（精确度）
                double                              8字节                              15位小数（精确度）
                long double                         16字节                             19位小数（精确度）
                备注：
                    1：c语言中浮点数无法精确，因此不要比较两个看起来一样的浮点数是否相同；结果一定是不同；
                    2：浮点数可以使用小数形式表达，也可使用指数形式表达；
                    3：c语言中浮点数中的整数部分和小数部分是分开存储的；
                    4：对于一些算数运算，浮点数之间运算时损失的精度会更多；（原因在于在任何区间内都存在无穷多个实数，浮点数不能表示区间内所有的值，只是实际值的近似值）
                
            2.3--字符类型
                char                                1字节                               -128到127或者0到255
                unsigned char                       1字节                               0到255
                signed char                         1字节                               -128到127
                备注:
                    char类型虽然用来存储字符，但是其本质存储的是字符的ASCII编码值；也就是整数；
                    char的符号是 '' ，即单引号，不能使用双引号，双引号代表字符串；
                    转义字符：\r \n \f \t \v \\ \' \" \?  \a

            2.4--布尔类型：
                1：开关量：True/False
                2：1代表True;0代表False
                3：大小是一位；只存储0或者1；
                4：c语言中能够自动将其余数据类型转换为bool值；
            
            总结：
                基本类型包括：整形，浮点型，字符型，布尔型
                获取基本类型在当前系统的大小：sizeof(type);如：size(int)
                推荐变量命名的时候带上前缀：如i_var代表整形，ui_var代表unsigned int，si_var代表signed int;
                
        3：字符串类型：
            1：c语言中没有专门存储字符串的数据类型；字符串使用字符数组来存储；字符数组由连续的存储单元组成；每个单元存储一个字符；
            2：字符串的符号是"";
            3：c语言使用\0作为字符串的结束符；因此字符串的长度等于字符串本身的长度+1：
            4：字符和单字符串不同："x"和'x'是不一样的，"x"长度为2，存储了两个字符；而'x'长度为1；存储了一个字符；
            5：字符串的长度使用strlen()来获取；但是strlen仅仅获取的是字符串本身的长度，并未计算结束符，也并非是实际声明的长度；sizeof()则会将结束计算在内；
            6：string.h头文件包含了针对字符串的所有操作；
        4：数组类型：
            c语言中数组的特征：
                1：使用时必须先声明，声明时必须注明数据类型；
                2：指定数据类型的数组只能存放对应类型的数据，不能存储其他类型的数据；
                3：数组的下标只能是数字，不能是字符串；（相对于弱数据类型语言中的数组，如php）
                4：数组中的数据不能超过数组声明的长度；也不能小于0；
                5：数组在内存中的存储空间是连续的；数组名表示数组的首地址；
                6：数组元素指针的加减运算：
                    1：从宏观上来看：存放每一个数组元素地址的指针变量+1；即是指向了下一个元素的存放地址；
                    2：从微观上来看：存放每一个数组元素地址的指针变量+1；则是跳过了m个字节，m指的是所存储的数据元素的类型在内存中所占用的字节个数；
            c语言中数组的声明：
                1：需要声明数组的数据类型以及数组可以存放的数据量；
                2：类型 数组名[长度]
                3：eg：int age[2]
            数组的初始化：
                1：可以在声明的同时就初始化；也可以在声明之后初始化；
                2：数组使用{}包含；{1,2,34}
                3：数组初始化的时候可以仅初始化部分值；其余值将全部赋值为0：
                    1：如果数组类型为：int,short,long,将直接赋值为整数0；
                    2：如果数组类型为：char,将赋值为\0；
                    3：如果数组类型为：float或者double，则将会赋值为0.0；
                4：数组的取值：数组名[下标]
            二维数组：
                二维数组的声明：
                    dataType    arrayName[length1][length2];
                二维数组的本质：
                    二维数组本质上类似于一个矩阵：length1指的是矩阵的行数；
                                                length2指的是矩阵的列数；
                二维数组的初始化：
                    1：分段赋值：
                        1：完全赋值：每一行都完全赋值；
                        2：部分赋值：默认从左向右赋值，其余则填0；
                    2：连续赋值：
                        1：完全赋值：从左向右按行赋值；此时可不必给出一维长度；
                        2：部分赋值：从左向右按行赋值；其余则填0；
        5：函数
            1：函数即声明的代码块，c代码文件中可以有任意多个函数；
            2：函数的声明：
                返回值类型/void function_name(){
                        code....
                }
                备注：  
                    1：函数声明要注明返回值类型，没有返回值时要写void；
                    2：函数名要遵守c语言标识符命名规范；推荐以小写加下划线方式命名；
            3：形参：
                1：形参是声明函数在调用时必须传入的参数，要写在()中；多个形参以 ，分割；且形参要注明数据类型；
                2：形参不允许赋初值；
                3：形参和实参在数量少，顺序上，类型上必须严格一致；
                4：函数调用中参数传递是单向的，即：只能将实参的值赋值给形参，不能把形参的值赋给实参，因此，形参的值发生改变并不会影响实参的值；
                5：形参变量只有在函数调用时才会分配内存，调用结束后，立刻释放内存；
            4：函数的返回值：
                1：返回值使用return;即：return 表达式;
                2：一个函数可以有多个return语句，但是只会执行第一个；
            5：函数调用：
                1：函数调用：函数名(实参) 即可调用；如果函数有返回值则可以使用变量接收返回值；如果没有返回值则不要使用变量接收函数调用的结果；
                2：c语言的执行逻辑是从main函数开始执行，而且是依次从上往下执行；原则上函数的定义要出现在函数的调用之前；否则将会报错；
                3：函数在定义之前使用则需要提前声明；
            6：函数的声明：
                1：声明格式：返回值类型 函数名 （类型 形参，类型 形参,...）;或者返回值类型 函数名 （类型,类型,...）;
                2：有了函数的声明，函数实体将可以出现在任何地方，可以使其他文件，静态链接库，动态链接库；
        6：流程：
            1：条件：
                1：if....else if....else：
                    if(表达式){}
                    if(表达式){}else if(表达式){}else{}
                    if(表达式){}else{}
                2:switch：
                    switch(var){
                        case 1:
                            code..
                            break;
                        case 2:
                            code..
                            break;
                        default:
                            code...
                    }
                3：? :   三目运算符；
                备注：
                    1：switch的条件只能用整数，其余任何数据类型都不允许；
                    2：break用于跳出当前分支；
                    3：如果多个分支的处理方式是一致的，则可以在最后需要跳出的地方使用break;
                    4：default不是必须的，如果有default，则在所有条件都无法匹配时执行default;
            3：循环：
                for(int i=0;i<n;i++){}
                while(表达式){}
                do{}while(表达式);(;一定要有)
            4：跳出循环：
                1：break;
                2:continue;
        7：运算：
        级别：赋值运算符(=) < &&和|| < 关系运算符 < 算术运算符 < 非(!)<()
            1：比较运算：
                运算符：< > == <= >= !=
                方向：从左向右结合，
                级别：比算数运算符级别低，比赋值运算符高；< > <= >= 运算符级别相同 ，且比剩下的两个级别高；
            2：逻辑运算符：
                运算符：&& || ！
                方向：左结合；
                级别：&& 和 ||低于比较运算符；！高于算数运算符：
            3：赋值运算符：
                运算符= += -= *= /= %= 
                方向：将右侧的值赋给左侧
                级别：级别最低；
            4：算数运算符：
                运算符 + - * / % ++ --
                方向：从左向右赋值
                级别：级别仅次于！
                ()运算符级别最高；
    8：指针：
        1：cpu所执行的代码以及将要处理的数据都必须是先要存储在内存中的，处理时，从内存中读取；
        2：计算机本身无法感知内存中存储的是数据还是代码，但是操作系统会给不同的内存块指定不同的权限，其中拥有可读和可执行的权限则是存储代码，拥有可读和可写权限的则是存储数据；
        3：内存在计算机系统中被分为很多块，块的大小以字节为单位；并且每一个内存块都有一个地址以16进制表示；
        4：cpu通过内存块的地址来拿取存放在内存块中的数据；cpu在执行程序的过程中本质是根据内存块地址来获取存放在内存中需要被执行的代码以及需要被处理的数据，而非是变量名或者函数名；变量名和函数名仅仅只是一种符号，程序编译之后全部会被换成地址；
        （1：需要被执行的程序以及需要被处理的数据全部存放在内存中
          2：内存被分为很多块（具体和内存大小有关），每个内存块都是一个字节，每个内存块也都有一个地址，地址从0开始；
          3：cpu在执行程序的过程其实就是根据内存地址拿取待执行的代码以及待处理的数据的过程；
        ）

    指针：系统将内存分为很多块，每一个内存块的大小是一个字节，并未每一个内存块编上了地址，地址从0开始，以十六进制表示；这个地址就是指针；

    指针和数据：
        指针是存放数据的内存块的地址；
        数据是存放在内存块中的内容；
    
    标识符和指针：
        标识符只是为了容易编写代码而产生的对数据的一种代号；其中变量名表示的是数据本身；而函数名代表代码块的首地址；字符串名和数组名择代表数据块的首地址；

    指针变量：
        普通变量中直接存放的是数据本身；
        而存放某个内存块地址的变量则称为指针变量；

    指针变量的声明：
        类型名称 *变量名
        备注： 
            1：变量名声明时一定要带上*;再次赋值时无需带上*号；
            2：类型名称指的是该指针变量指向内存块中所要存储的数据的类型；
    
    通过指针变量取值：
        *变量名
        备注： 
            1：此时*号代表取值符号，而非指针变量声明符号；
            2：通过*变量名即可取得指针变量所存储的内存地址的内存块中的值；
    给指定内存地址的内存块赋值：
        *变量名 = vlaue
        备注：
            1：注意：*指针变量代表的是内存块中所存放的数据；指针变量代表的是某个内存地址；
    
    指针变量的运算：
        1：指针变量保存的是内存块的地址，以16进制表示，本质上是个数字；因此可以参与运算，比较等操作；

        2：指针变量加法运算：
            普通变量加法：是指给内存中存放的数据本身加n；不会引起所操作数据在内存中地址的改变；
            指针变量加法：指针变量+n指的是跳过n个m字节；其中m字节指的是指针所指的内存空间的数据的数据类型在当前系统中所占用的字节的个数；指针变量的加减运算会改变当前指针变量所指内存地址；
            即：指针变量的加减是以指针所指数据类型的大小（注意是数据类型的大小而不是数据的大小）为一个单位计算的；+1即代表指向下一个有意义的内存块的首地址；
        3：对于指针变量的加减本质上是改变指针变量所指向的内存块的地址；因此：
            1：对于数组或者字符串而言，其占用的是连续的内存区域，因此对保存数组或者字符串的指针变量加n或者减n是能够精确知道当前指针变量所指的内存块中存储的数据的；
            2：对于普通变量而言，对其指针变量加n或者减n则无法精确知道其所指内存块中存放的数据的；

        总结： 
            1：普通变量的加减运算是对值本身进行加减运算的，不会改变当前值在内存中的存放地址；
            2：指针变量加减某个值是将会改变当前指针变量所指内存地址的，具体跳过多少字节以当前指针所指数据类型在当前系统中所占用字节的大小有关，并非简单的给指针变量的值加减某个值；
            3： 对于指向普通变量的指针变量加减某个值改变其内存指向并无任何实际意义，对于数组或者字符串改变其指针变量的值则可精确推算改变之后所指内存区域的内容；
            4：指针变量可以参与比较运算，比较大小并无任何意义，比较是否相等则可以判断两个指针变量是否指向同一块内存区域；
            5：不能对指针变量进行乘法，除法，或者取余运算，并无任何实际意义；
    数组（字符串）和指针：
        1：数组开辟的是一块连续的内存区域；
        2：数组名即存放数组的首地址，因此数组名本质上就是个指针变量；
        3：对数组的指针变量+1即指向下一个元素，-1则指向上一个元素；但是指针变量的值的改变则和数组数据类型以及平台有关；
        4：对于数组元素的访问既可以使用下标也可以使用指针的方式；
        5：字符串和数组：
            1：c语言中使用字符数组存放字符串，因此可以使用操作数组的方式操作字符串；
            2：字符串和数组最根本的区别在于其在内存中的存储区域不一样，
                字符数组存储在全局数据区，或者栈区；有写入和读取的权限；
                而字符串存储在常量区；只有读取权限，没有写入权限；因此对其某一位赋值将会出错；
            3：如果对字符串有修改的需求则只能使用字符数组，否则可以使用字符串或者字符数组；
    指针作为函数的参数：
        1：c语言中实参到形参的传递是单向的；即：形参在对应函数中做了修改以后并不会影响实参变量的值；
        2：如果函数中需要改变外部变量的值则必须传递外部变量的内存地址；
    指针作为函数的返回值：
        1：如果函数将指针作为返回值，则称该函数是指针函数；指针函数的声明：返回值类型 *函数名(形参){code...}
        2：函数执行完毕之后将会销毁在函数内部声明的所有变量；因此不要将返回指针指向函数内部声明的变量以及形参；
        3：注意函数执行完毕之后会对函数内部所声明的所有变量以及形参销毁，但是销毁并非是直接清空掉函数运行期间申请的内存空间；而是弃之不用，即函数执行完毕之后，其执行期间所申请的内存空间现在可以被些人任意内容；
    二级指针：
        1：指针本质上就是一个普通的变量，只是其中所存储的值代表的是某个内存块的地址；而值本身则是一个十六进制的整数；指针变量本身存储的那个十六进制的整数也是需要占用内存空间的；
        2：存放指针变量在内存中地址的变量称为二级指针；即二级指针任然是个普通变量，存储十六进制的整数，改整数代表的是另一个指针变量存储其值的地址；
        3：二级指针需要使用**来声明，同理，三级指针需要使用***来声明；
        4：可以理解指针变量就是普通的变量，仅仅是其所存储的值具备不同的含义，但是编写代码要遵守c语言语法规范；
    
    空指针 NULL：
        1：一个指针变量可以指向任意一块内存区域；无论改内存区域有没有被分配；也不管改内存有没有使用权限；只要给定地址，指针变量就能指向；
        2：如果指针变量未被初始化，则该指针变量指向的哪个内存块是不确定的；因此一般对没有初始化的指针赋值为NULL;
            即：该指针的值是空的，不指向任何内存区域；（注意：NULL只能是大写的，不能是小写的）
        3：计算机系统在低地址的内存空间不存储任何数据，也不能被用户程序访问；
        4：NULL 本质上是一个宏：((void*)0);而void*则表示一个实际有效的指针，指向的也是实际的内存空间，但是该块内存个空间存储什么类型的值，并不确定；使用的时候需要强制转换；
    数组和指针再理解：
        1：数组名表示数组的首地址，存放是是首个元素的内存地址；
        2：但是数组指针和数组名是完全不一样的概念，数组名是一个变量代表的是一组数据集合；数组指针变量是一个变量，但是仅仅代表数组的首地址，并不能代表整个数组；
        3：数组名和数组指针是不同的符号，代表着不同的含义；sizeof()函数是通过符号类型来求长度的；
        4：数组名和指针的转换：
        总结：
            1：数组名在宏观含以上代表的是整个数组集团；在微观上其存储的是第0个元素的内存地址；
            2：只有当数组名作为数组的定义的标识符（及定义或者声明数组时）或者使用sizeof或者使用&的时候，数组名表示整个数组；
            3：除此之外，数组名会被转换为指向第0个元素的指针；
            4：数组小标和指针的偏移量相同；而步长系统会自动根据数组的类型来确定；
            5：如果函数形参要求传入数组类型的数据，此时传入的数组名实际是数组的首地址，而不代表整个数组；根据传入的数组名也无法使用sizeof来计算数组长度，数组长度需要单独传入；
            6：形参如果是数组，或者函数调用需要传递数组尽量传递数组的首地址，而非整个数组，可以减少内存开销；
    指针数组：
        1：指针数组和普通数组一样，都是一个数据集合，只是指针数组中的每一个元素代表的不是数据值的内容，而是某个内存块的地址；
        2：指针数组的声明：dateType *arrayName[length];
        3：此时，该数组的数组名就是一个二级指针；
    将字符串赋值给指针变量：
        1：将字符串赋值给指针变量的时候，指针变量实际存放的是字符串首个字符的内存地址，而非整个字符串；
        2：普通数组的数组名在表达式中会当做一个指针变量处理，存放的是首个元素的内存地址；
           指针数组的数组名在表达式中同样也会当做一个指针变量处理，但是这个指针变量指向的是另一个指针的地址；（这一点一定要注意）
    指针与二维数组：
        1：二维数组在声明时有行和列，在形式上是二维的；
        2：二维数组在存储上仍然是一维线性的，占用的是一块连续的内存空间；其组织形式是按照行排列；
        3：二维数组在语义上一级语法上是当做二维处理的；即：二维数组的数组名指向的是第一维的首地址；此时对首地址进行加减1即是改变了当前指针指向的维数；
        4：区分下面两种指针的不同：
                int *(p1[5]);  //指针数组，可以去掉括号直接写作 int *p1[5];p1指向的是一个指针数组的首地址；
                 int (*p2)[5];  //二维数组指针，不能去掉括号；p2指向的是一个长度为5，数据类型为int的数组的首地址；
    
    
        





        
        



        
        






               
            
    
        
    



        
    

        

    
        
        



    
    

        

        
    

    

    
    


            


            


                
                


                





                         



