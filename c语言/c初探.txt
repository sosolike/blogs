c语言基本特征：
    1：切近硬件，运行速度较快；
    2：是编译执行的语言；
    3：仅支持面向过程编程；
c语言运行流程：
    1：源代码：
        即c源代码文件；
        以.c作为后缀；
    2：编译：
        即将c源代码文件编译为当前平台cpu能够识别的指令
        该指令以字节码表识
        并保存到.o文件中
    3：链接：
        一个可执行的c程序包括：编译成功的c源代码，启动代码，库函数代码
        链接的过程即为：通过链接器将启动代码以及库函数代码与编译好的.o文件合并成一个可执行文件，并保存为.out文件
        链接器的作用是吧目标代码，系统的标准启动代码和库代码合并成一个文件，即可执行文件，这也是链接的过程；
    4：c程序文件执行过程：
        linux:.c => .o => .out
        windows:.c => .obj => .exe
linux和windows上的c编译器
    linux上的编译器为：gcc
    windows上的编译器为：Cygwin

c语言基本语法规范：
    1：代码组成：
        一个c文件由：预处理指令、函数、变量、语句、注释 五部分组成；
        c源代码文件以.c作为后缀；

    2：基本语法规则：
        1：以 ; 号作为语句结束符；
        2：以 {} 作为语句块确认符号
        3：以 /*....*/ 注释代码
        4：标识符基本命名规则：
            1：由数字、字母、下划线组成；
            2：不能以数字开头；
            3：不能和系统关键字冲突；
            4：c中严格区分标识符大小写；
            5：尽量避免使用_或者__开头；
            6：要有可读性；
        5：对于main函数：
            1：一个可执行的c文件中必须要有且只能有一个main函数；
            2：main函数是整个程序的入口；执行时从main函数开始逐行执行；
            3：main的返回值可以是int或者void；
            4：一个c文件可以有任意多个函数，但是主函数(main)只能有一个；
            5：main函数基本声明方式：int main(void){}/void main(void){}

c语言中的输出与输入：
    常见输出：
        1：puts();只能输出字符串；
        2：putchar();只能输出单个字符
        3：printf():
            功能：用于输出任意内容
            用法: print("format_str",var_content)：将需要输出的内容格式化之后输出；
            格式化字符串：
                1：格式化字符串由自定义字符串和格式化字符共同组成（或者其中一个）；
                2：格式化字符从左向右依次对应需要格式化的内容；
                3：常用格式化字符：
                    %s                      输出一个字符串
                    %c                      输出一个字符

                    %f                      输出一个单精度小数格式的浮点数（十进制）
                    %lf                     输出一个以双精度小数格式的浮点数（十进制）
                    %e                      输出一个单精度指数形式的浮点数
                    %le                     输出一个双精度指数形式的浮点数
                    %E                      输出一个单精度指数形式的浮点数
                    %lE                     输出一个双精度指数形式的浮点数

                    %d                      以十进制、有符号的形式输出 int类型的整数  
                    %hd                     以十进制、有符号的形式输出 short类型的整数                    
                    %ld                     以十进制、有符号的形式输出 long类型的整数
                    %u                      以十进制、无符号的形式输出 int类型的整数    
                    %hu                     以十进制、无符号的形式输出 short类型的整数   
                    %lu                     以十进制、无符号的形式输出 long类型的整数   
                4：格式化字符完整形式：
                    %[flag][width][.precision]type
                    flag：标志符号：
                            -：表示左对齐，如果不填则默认右对齐
                            +：用于数字，表示输出符号，如果不填只有负数才会输出符号
                            空格：用于数字：正数加空格，负数加负号；
                            #：对于小数：强制输出小数点；对于八进制，十六进制，二进制，带上前缀；
                    width：最小输出宽度，不够是则以空格补齐，超过时则限制失效
                    .precision： 
                            对于 int，.precision 表示最小输出宽度
                            对于 float，.precision 表示输出精度。
                            对于 str，.precision 表示最大输出宽度。
            备注：----printf()输出以后并不会立刻将信息输出到屏幕；而是放入缓冲区；遇到换行符或者强制刷出的时候才会输出到屏幕；

        输入：
            scanf()
                功能：用于捕获用户的标准输入；
                用法：scanf("format_str",param)
c语言变量：
    变量：
        1：变量特征：
            1：c语言要求变量使用之前必须先声明，后使用；
            2：变量声明的位置只能在代码块的首位；
                对于c89规定，在任何执行语句之前，在块的开头声明所有局部变量；
                对于c99和c++中则没有这个限制，变量声明可以放在首次调用之前的任意位置；
            3：声明语法：
                数据类型 变量名=值;
                int a=23;
                int a,b,c;
                int a=1,b=2,c;
                @声明之后如果未赋值，则只为该变量创建指定大小的内存空间，
                @声明且赋值，则会为该变量创建内存空间并为其赋初值；
            4：变量的数据类型在声明时就已经确定，之后将只能引用指定数据类型的数据，不允许再引用其他数据类型的数据；
        2：变量命名：
            1：必须严格遵守c语言标识符命名规则；
            2：推荐以小写加_方式命名；
        3：变量的作用域：
            声明的位置：
                可以在函数外部声明变量：称为全局变量；
                可以在函数内部声明变量：称为局部变量；
            局部变量：
                函数中声明变量称为局部变量；
                局部变量的声明位置：
                    对于c89规定，在任何执行语句之前，在块的开头声明所有局部变量；
                    对于c99和c++中则没有这个限制，局部变量声明可以放在首次调用之前的任意位置； 
                局部变量如果声明之后未赋值，只会为其分配指定大小的内存空间，值默认是随机的；
                局部变量的作用域是函数内部的代码块
                自动局部变量 auto
                    1：声明方式如：int b=3; 等同于auto int b=3;
                    2：该变量只能在所声明的函数中使用；其他函数不能调用；
                    3：其生命周期和函数保持一致，函数执行完毕，变量所占用的内存即被释放；
                    4：并且，自动局部变量如果不赋初值，其值是不确定的；
                静态局部变量 static
                    1：该变量只能在所声明的函数中使用；其他函数不能调用；
                    2：其生命周期和程序运行的生命周期一致，
                        1：在调用声明该静态变量的函数时，系统为该静态变量创建内存空间，但是只有程序运行完毕，该静态变量的内存空间才会释放！
                        即：静态局部变量的值在函数调用结束后不消失，而是保留原值，其所占用的内存空间也不释放！下次再调用该函数时，该变量已经有值，将不会再从新声明该变量！值就是上一次调用函数结束时为其赋的值；只有程序运行结束，该静态局部变量所占内存空间才会释放；
                    3：如果静态局部变量不赋初值，其值不确定；
                    4：声明方式：static int a=12;
                在函数内部定义的变量、数组、结构体、共用体等都称为局部数据。在很多编译器下，局部数据的初始值都是随机的、无意义的，而不是通常认为的“零”值。

            全局变量：
                在函数外部声明的变量；
                全局变量如果声明之后未赋值，则值默认是0
                全局变量的作用域是文件，(这里的文件并不单单指当前文件，而是包括所有的c源代码文件以及头文件)
                全局变量只能在函数体外声明并初始化，但是不能参与任何运算！任何运算操作只能在函数体内进行！
                普通全局变量：
                    声明方式：int a=23;(无需添加任何修饰词)
                    全局变量的生命周期和程序的生命周期一致，即程序运行结束变量所占内存空间才会释放！
                    如果源程序由多个源文件组成，多个文件出现相同名称的全局变量将会出现冲突；
                    普通全局变量可以在别的文件中通过extern引用
                静态全局变量
                     声明方式：static int a=23;(需添加static修饰词)
                     全局变量的生命周期和程序的生命周期一致，即程序运行结束变量所占内存空间才会释放！
                     如果源程序由多个源文件组成，多个文件出现相同名称的全局变量将不会出现冲突；
                     静态全局变量不可以在别的文件中通过extern引用


        

c语言数据类型：
        1：基本类型：(整数/浮点数)
            2.1--整数：
                类型列表:
                    short int              2字节                  -32768到32767
                    (short)
                    unsigned short         2字节                  0~65535

                    int                    2字节/4字节             -32768到32767或者-2e32到2e32-1
                    unsigned short         2字节                   0~65535或者0~2e33-1

                    long int               4字节                   -2e32到2e32-1
                    (long)

                    long long int          8字节                   -2e64到2e64-1
                    (long long)

                修饰类型：
                    singed                 有符号(默认类型)
                    unsigned               无符号，最小值从0开始
                数据进制：
                    c支持八进制，十进制，十六进制的整形数据
                    八进制需要以0开头，十六进制需要以0x或者0X开头
                    八进制的显示模式：o%或者O%；
                    十六进制的显示模式：x%或者X%；
                数据溢出：
                    有符号类型溢出之后，将直接从负值最小值开始从新计数；
                    无符号类型溢出之后，将直接从0开始从新计数；
                数据类型选择：
                    1：优先使用无符号类型
                    2：确保‘够用’的情况下选择最小的数据类型
                    3：在数据类型交叉的时候，选择必须的数据类型：如要求使用long型数据，就不要使用int型数据！
            2.2 字符类型
                基本特征：
                    c语言中的基本数据类型中没有字符串，而是字符类型；
                    字符类型以''包裹，""包裹的是字符串！
                    字符类型符号：char；
                    由char声明，并由''包裹的字符称为窄字符！
                    char虽然用于表示字符类型，但是存储时以数字存储！
                    char类型的大小固定是1个字节；表示范围在：-128 ~ 127之间；
                    unsinged char 类型大小固定是1个字节，表示范围在：0-255之间 ；
                    char类型实际存储的是数字，而非字符；且char类型的字符以ASCII编码存储！

                对于中文字符的存储：
                    微软编译器（内嵌于 Visual Studio 或者 Visual C++ 中）采用 UTF-16 编码，使用 2 个字节存储一个中文字符，用 unsigned short 类型就可以容纳。
                    GCC、LLVM/Clang（内嵌于 Xcode 中）采用 UTF-32 编码，使用 4 个字节存储一个中文字符，用 unsigned int 类型就可以容纳。 

                    对于在windows上和linux上中文字符长度不一致的问题，c语言推出wchar_t类型，wchar_t的类型由编译器决定！wchar_t类型位于<wchar.h>头文件中！

                    使用wchar_t来表示的字符类型称为宽字符；

                    使用wchar_t这种宽字符需要在字符前加L；如：wchar_t d = L'国';  //中文汉字

                char类型在使用时具体存储的数字和编码表有关：
                    ASCII编码表：只能表示有限的字符，中文等一些特殊字符无法表示；
                    Unicode编码表：是ASCII编码的超集，可以表示更多的字符；
                    在C语言中，
                        只有 char 类型的窄字符才使用 ASCII 编码，
                        char 类型的窄字符串使用的编码依据平台和编译器决定；
                        wchar_t 类型的宽字符和宽字符串则使用utf-16或者utf-32编码！（unicode编码）
                输出字符：
                    对于puts/putchar只能输出窄字符或者窄字符串！
                    对于putwchar/wprintf专门用来输出宽字符的！在输出宽字符之前还要使用 setlocale 函数进行本地化设置
                       如果是在windows环境下：setlocale(LC_ALL,"zh-CN");
                       如果是在linux环境下：setlocale(LC_ALL,"zh_CN");
                       setlocal函数在<locale.h>头文件中！
                    对于wprintf输出字符串时，对应的格式控制符号为：%ls;
                转义字符：
                    c语言支持的转义字符包括：
                     \r \n \v \f \b \a \\ \' \" \t \?等
                    反转义：
                        使用\\即可；
            2.3--浮点数
                类型列表：                           
                float                               4字节                              6位小数（精确度）
                double                              8字节                              15位小数（精确度）
                long double                         16字节                             19位小数（精确度）
                备注：
                    1：c语言中浮点数无法精确表示浮点数值，只能近似的表示指定值，因此如果比较两个看起来一样的浮点数是否相同；结果一定是不同；
                    2：浮点数可以使用小数形式表达，也可使用指数形式表达；但是在内存中，整数部分和小数部分是分开存储的；
                    3：对于一些算数运算，浮点数之间运算时损失的精度会更多；（原因在于在任何区间内都存在无穷多个实数，浮点数不能表示区间内所有的值，只是实际值的近似值）
            2.4--布尔类型：
                C99标准中添加了_Bool类型，用于表示布尔值；即：true和false
                _Bool大小仅为一位，存储0/1；0表示false,1表示true；
                c语言中能够自动将其余数据类型转换为布尔类型的值；
            
            总结：
                基本类型包括：整形，浮点型，字符型，布尔型
                获取基本类型在当前系统的大小：sizeof(type);如：sizeof(int)
                推荐变量命名的时候带上前缀：如i_var代表整形，ui_var代表unsigned int，si_var代表signed int;
        2:其他复合数据类型：
            2.6：数组类型：
                c语言中的数组：
                    数据的集合称为数组，数组中的每一个值称为数组元素，数组中值的个数称为数组的长度！
                    数组长度的计算：
                    length = sizeof(数组名)/sizeof(数组元素数据类型)；

                c语言中数组的声明：
                    1：需要声明数组的数据类型以及数组可以存放的数据量；
                    2：类型 数组名[长度]
                    3：eg：int age[2]
                    4：数组声明完成之后，系统将为数组分配指定大小的连续内存空间,并进行初始化：
                        1：如果数组类型为：int,short,long,将直接赋值为整数0；
                        2：如果数组类型为：char,将赋值为\0；
                        3：如果数组类型为：float或者double，则将会赋值为0.0；

                数组的赋值：
                    1：数组赋值可以在声明时同时赋值，也可以在声明之后进行赋值！
                    2：赋值时，数组元素需要使用{}来包裹数组元素！元素之间使用,来进行分割！
                    3：赋值时如果赋值元素少于总体元素个数时剩余的元素自动按照数据类型进行填充！
                    4：数组声明的同时如果全部进行赋值，那么数组声明时可以不用指定长度！

                c语言中数组的特征：
                    1：使用时必须先声明；
                    2：声明时必须注明数据类型；指定数据类型的数组只能存放对应类型的数据，不能存储其他类型的数据；
                    3：数组的下标只能是数字，不能是字符串；（相对于弱数据类型语言中的数组，如php）
                    4：数组中的数据不能超过数组声明的长度；也不能小于0；
                    5：数组在内存中的存储空间是连续的；数组名表示数组的首地址;也代表整个数组
                    6：数组名是数组的首地址，即第一个元素的地址；
                    7：数组元素指针的加减运算：
                        1：从宏观上来看：存放每一个数组元素地址的指针变量+1；即是指向了下一个元素的存放地址；
                        2：从微观上来看：存放每一个数组元素地址的指针变量+1；则是跳过了m个字节，m指的是所存储的数据元素的类型在内存中所占用的字节个数；
                    8：c语言中的数组是静态数组，即长度一旦固定将不能改变，不能随意插入数据，也不能随意删除数据；
                    9：固定长度的数组是在编译期间分配内存的；

                c语言中数组的取值：
                    值 = 数组名[下标];

                二维数组：
                    二维数组的声明：
                        数据类型  数组名[一维长度][二维长度];
                    二维数组的本质：
                        二维数组本质上类似于一个矩阵：一维长度指的是矩阵的行数；
                                                   二维长度指的是矩阵的列数；
                    二维数组的理解：
                        二维数组可以理解为一维数组，只不过每一个元素的值又指向一个数组
                    二维数组的赋值：
                        1：分段赋值：
                            1：完全赋值：每一行都完全赋值；
                            2：部分赋值：默认从左向右赋值，其余则填0；
                        2：连续赋值：
                            1：完全赋值：从左向右按行赋值；此时可不必给出一维长度；
                            2：部分赋值：从左向右按行赋值；其余则填0；
                    二维数组的取值：
                        值 = 数组名[一维下标][二维下标]
            2.5：字符串类型：
                1：c语言中没有专门存储字符串的数据类型；字符串使用字符数组来存储；字符数组由连续的存储单元组成；每个单元存储一个字符；
                2：字符串的符号是"";
                3：c语言使用\0作为字符串的结束符；因此字符串的长度等于字符串本身的长度+1：
                4：字符和单字符串不同："x"和'x'是不一样的，"x"长度为2，存储了两个字符；而'x'长度为1；存储了一个字符；
                5：字符串的长度使用strlen()来获取；但是strlen仅仅获取的是字符串本身的长度，并未计算结束符，也并非是实际声明的长度；sizeof()则会将结束符计算在内(获取的是实际声明的长度)；
                6：string.h头文件包含了针对字符串的所有操作；
            
             字符串的声明：
                char str[n];
                备注：由于字符数组以\0作为字符串的结束符，因此，实际的字符最多只能是n-1个！
             字符串的赋值：
                char str[2] = {'a','\0'};
                char str[2] = "a";
                备注： 
                    字符数组只有在声明的时候才能一次性将所有的字符以字符串的方式赋值给字符数组；
                    如果字符数组一旦声明好之后，就只能通过字符一个一个赋值！
            

        3：c语言中的进制：
            进制组成：
                二进制：由0/1组成，以0b或者0B开头；逢2进位；
                八进制：由0~7八个数字组成，以0开头，逢8进位；
                十进制：由0~9是个数字组成，逢10进位；
                十六进制：由数字0~9、字母A~F或者a~f组成；以0x或者0X开头；
            进制输出：
                输出八进制：%o,%lo,%ho
                输出十进制：%d,%ld,%hd、%u,%lu,%hu；
                输出十六进制：%x,%lx,%hx、%X,%lX,%hX;
                备注：输出时，需要加上#来带上输出时的前缀；
                      只有十进制，printf才提供了有符号和无符号的区分！对于八进制和十六进制输出的均是无符号数；
                      printf在以八进制或者十六进制读取数值时，将会把内存中的所有位都当做数值位！

        4：c语言中的正负符号：
            数字如果不带符号则默认为正数；如果带上‘-’则为负数；
            c语言规定，把内存的最高位规定为符号位；如：int类型占用32位，则0~30位存储数字，31为存储符号；
            c语言规定，1代表负号-，0代表正数；

        5：整数在内存中的存储方式：
            1：原码：将一个整数转换成二进制的形式，就是其原码！
            2：反码：将一个整数转换成二进制的形式，如果该整数是正数，那么反码就是原码，如果该整数是负数，那么反码就是除过符号位以外的数值位取反！
            3：补码：对于整数：补码就是其原码；
                    对于负数：补码是其反码加1；
            内存中存储的整数均是以补码的形式来存储！运算也是以补码的行书来运算的！

        6：小数在内存中的存储方式：
            1：c语言在内存中以定点数存储整数，以浮点数存储小数！
            2：定点数：指小数点在固定位置的数值；
               浮点数：这种以指数的形式来存储小数的解决方案就叫做浮点数
            3：分析：
                用定点格式来存储小数，优点是精度高，因为所有的位都用来存储有效数字了，缺点是取值范围太小，不能表示很大或者很小的数字。
        7：数据类型转换：
            自动类型转换：
                自动类型转换是由编译器根据计算需求，自动将数据类型进行转换的一种方式；
                自动类型转换发生在两种情况下：
                    1：赋值时：如果类型转换合法，经自动进行转换！(将高精度值赋给低精度值将会发生精度损失)
                    2：运算中：运算中，编译器会将所有的数据的类型转换为同一种数据类型，然后再进行计算！
                              转换方向为数据长度增加方向(高精度方向)进行;
                              所有的浮点运算都是以双精度进行的，即使运算中只有float类型，也将全部转换为double进行运算；
                              需要注意的是：运算结果的溢出！
                              char/short->int->long
                                             ->float->double
            强制类型转换：
                强制类型转换方式：(目标数据类型)待转换变量
            备注： 
                1：无论是强制类型转换还是自动类型转换，转换改变的仅仅是结果，源数据的类型并不会改变！
                2：有些类型能够自动转换也能够强制转换，有些类型则只能强制转换不能自动转换！
                3：数据类型转换要合适，不能够在各种数据类型之间随意转换！

            
        8：运算：
        级别：赋值运算符(=) < &&和|| < 关系运算符 < 算术运算符 < 非(!)<()
            1：()运算符：优先级最高，表示先计算括号中的表达式；
            2：逻辑运算符：
                运算符：&& || !
                方向：左结合；
                级别：&& 和 ||低于比较运算符；!高于算数运算符，低于()运算符：
            3：算数运算符：
                运算符 + - * / % ++ --
                方向：从左向右运算
                级别：级别仅次于逻辑运算中的!;
                备注： 
                    对于除法：
                        如果除数以及被除数均是整数，那么运算结果也是整数，即使不能整除，也将舍去小数部分；
                        如果除数或者被除数有一个是小数，那么运算结果也是小数，并且是double类型的小数！
                    对于取余运算：
                        c语言中的取余运算只能针对于整数进行，即%两边都必须是整数，否则编译器将会报错！
                    对于前自增和后自增运算：
                        前自增在赋值时先运算后赋值，
                        后自增在赋值时先赋值后运算，
            4：关系运算：
                运算符：< > == <= >= !=
                方向：从左向右结合，
                级别：比算数运算符级别低，比赋值运算符高；< > <= >= 运算符级别相同 ，且比剩下的两个级别高；
            5：赋值运算符：
                运算符= += -= *= /= %= 
                方向：将右侧的值赋给左侧
                级别：级别最低；
        9：流程：
            1：条件：
                1：if..else条件语句：
                    if(表达式){}
                    if(表达式){}else if(表达式){}else{}
                    if(表达式){}else{}
                2:switch条件语句：
                    switch(var){
                        case 1:
                            code..
                            break;
                        case 2:
                            code..
                            break;
                        default:
                            code...
                    }
                    备注： 
                        1：switch中只能是整数，不能是浮点数；
                        2：case只能是整数，不能是浮点数或者其余变量类型
                        3：多个分支有共同处理方式，则多个分支可以放在一起，并只在最后一个分支结束时使用break语句；
                        4：default不是必须的；当所有的case都无法匹配时，将会走进default;
                3：? :   三目运算符；

            3：循环：
                for(int i=0;i<n;i++){}
                while(表达式){}
                do{}while(表达式);(;一定要有)
            4：跳出循环：
                1：break;结束当前循环；
                2:continue;结束当前循环，并开始新的循环！
        10：c语言中的随机数：
            c语言中需要使用rand()函数来产生随机数；随机数范围在0~MAX_NUM之间
            设置随机数种子：srand();一般使用时间来播种：srand((unsigned)time(NULL));
            备注： 
                rand和srand函数需要引入<stdlib.h>头文件
                time函数需要引入<time.h>头文件

        11：函数
            1：函数即声明的代码块，c代码文件中可以有任意多个函数；
            2：函数的声明：
                返回值类型/void function_name(int a,int b){
                        code....
                }
                备注：  
                    1：函数声明要注明返回值类型，没有返回值时要写void；
                    2：函数名要遵守c语言标识符命名规范；推荐以小写加下划线方式命名；
                    3：形参需要通过数据类型 变量的方式声明；
                    4：在函数体中使用return语句返回数据。

            3：形参：
                1：形参是声明函数在调用时必须传入的参数，要写在()中；多个形参以 ，分割；且形参要注明数据类型；
                2：形参不允许赋初值；
                3：形参和实参在数量少，顺序上，类型上必须严格一致；
                4：函数调用中参数传递是单向的，即：只能将实参的值赋值给形参，不能把形参的值赋给实参，因此，形参的值发生改变并不会影响实参的值；
                5：形参变量只有在函数调用时才会分配内存，调用结束后，立刻释放内存；
            4：函数的返回值：
                1：返回值使用return;即：return 表达式;
                2：一个函数可以有多个return语句，但是只会执行第一个；
            5：函数调用：
                1：函数调用：函数名(实参) 即可调用；如果函数有返回值则可以使用变量接收返回值；如果没有返回值则不要使用变量接收函数调用的结果；
                2：c语言的执行逻辑是从main函数开始执行，而且是依次从上往下执行；原则上函数的定义要出现在函数的调用之前；否则将会报错；
                3：函数在定义之前使用则需要提前声明；
            6：函数的声明：
                1：声明格式：返回值类型 函数名 （类型 形参，类型 形参,...）;或者返回值类型 函数名 （类型,类型,...）;
                2：在函数调用之前有了函数的声明，函数实体将可以出现在任何地方，可以使其他文件，静态链接库，动态链接库；
        
        12：c语言中的函数库：
            
            基本库：<stdio.h>、<ctype.h>、<stdlib.h>、<string.h>
            常用库：<assert.h>、<limits.h>、<stddef.h>、<time.h>
            其他库：<float.h>、<math.h>、<error.h>、<locale.h>、<setjmp.h>、<signal.h>、<stdarg.h>

        13：预处理命令：
            预处理概述：
                1：预处理指的是：在编译之前对源文件进行的处理
                2：预处理主要是处理以#开头的命令，预处理命令要放在所有的函数外面，而且一般放在源文件的前面；
                3：编译器会将预处理的结果保存到和源文件同名的.i文件中；
                4：预处理包括：宏定义，文件包含，条件编译等；
            预处理--文件包含：
                文件包含使用 #include命令；
                处理过程为将头文件中的内容插入到该命令所在的位置，进而吧头文件和源文件连接成同一个文件；
                使用方式：
                    #include <stdio.h>
                    #include "myHeader.h"
                    区别在于头文件搜索路径不同；在包含标准库的头文件时建议使用<>,包含自定义头文件时建议使用"";
                    文件包含允许嵌套；
            预处理--宏定义
                宏定义：定义常量
                备注：
                    1：宏定义不是说明或者语句或者表达式，因此无需使用;作为结束符！
                    2：宏定义必须写在函数外面，起作用于为宏定义命令到源程序结束！
                    3：如果需要提前结束宏的作用域：可使用#undef 宏名；
                    4：宏定义允许嵌套；
                    5：宏名：
                        1：必须严格遵守c语言标识符命名规则；
                        2：推荐以大写加下划线的方式命名；
                    6：可以通过宏来定义数据类型，但是仅仅只是简单的字符串替换，而不是真正的定义一种新类型！
                        和typedef完全不同；
                    7：宏可以有参数：
                        声明方式：#define 宏名(形参列表) 字符串(字符串中可以包含各个形参)
                        调用方式：宏名(实参列表)；
                        注意事项：
                            1：带参宏定义中，形参之间可以出现空格，但是宏名和形参列表之间不能有空格出现；
                            2：在带参宏定义中，不会为形式参数分配内存，因此不必指明数据类型；
                            3：宏只是简单的字符替换！即便是表达式也只是表达式字符的替换！
                            4：带参数的宏替换只替换参数，不做其他字符的替换！
                    8：#和##
                        #会在参数的两端添加双引号；
                        ##可以将多个参数连接起来；
                    
                    9：c语言中常见的宏：
                        __LINE__：表示当前源代码的行号；
                        __FILE__：表示当前源文件的名称；
                        __DATE__：表示当前的编译日期；
                        __TIME__：表示当前的编译时间；
                        __STDC__：当要求程序严格遵循ANSI C标准时该标识被赋值为1；
                        __cplusplus：当编写C++程序时该标识符被定义。
            预处理--条件编译：
                条件编译指在编译阶段对宏进行判断，编译不同的代码；
                宏判断语法：
                    a语法：
                        #if 整型常量表达式1
                            程序段1
                        #elif 整型常量表达式2
                            程序段2
                        #elif 整型常量表达式3
                            程序段3
                        #else
                            程序段4
                        #endif
                    b语法：
                        #ifdef  宏名a
                            程序段1
                        #else
                            程序段2
                        #endif
                        指如果已经对宏 宏名a 定义过则执行程序段1，否则执行程序段2；相反的有：
                        #ifndef 宏名
                            程序段1 
                        #else 
                            程序段2 
                        #endif
                宏判断语法指的是在编译阶段对宏进行判断，并编译不同的代码；
                普通的条件语句对宏的判断则指的是根据不同的宏值执行不同的代码；
                

        14：指针：
            1：内存地址：
                数据要被cpu获取到必须先加载至内存中，内存在计算机中会被分割为1个字节大小的存储单元，每一个存储单元都有一个编号，这个编号即为内存的地址！内存地址从0开始，以十六进制表示！
                    
            2：指针：
                指针即指的是内存块的地址；
            
            3：指针和数据：
                指针指的是内存块的地址，数据指的是内存块中存放的数据；

            4：指针变量：
                指针变量和普通的变量一样都是变量；
                但是指针变量存储的是内存块的地址；普通变量存储的是内存块中的数据； 
                指针变量本身的数据类型为无符号整数，但是不能直接将指针变量等同于指向无符号整数的普通变量！
            5：指针变量的声明：
                类型名称 * 变量名
                备注： 
                    1：类型名称指的是该指针变量指向的内存中可以存储的数据的类型；
                    2：*指明该变量是一个指针变量；
                    3：变量名遵守c标识符命名规范；
                    4：*和变量名之间空格可有可无；但是*作为取值运算符时必须要和变量紧挨在一起！
            6：两种运算：
                1：&:该符号为取地址符，可以通过&获取变量引用的值在内存中的地址；
                2：*:该符号为取值符，可以通过*获取指针变量指定内存块地址所存储的值；
            7：指针变量允许的运算：
                1：赋值：即可以将一个指针变量赋值给同类型的指针变量；（1：必须是相同的数据类型；2：必须是指针变量）
                2：取值：即可以通过*取值运算符获取指针变量指定的内存地址的值；
                3：获取指针：即可以通过&取地址运算符获取变量的内存地址；

               4： 加上一个整数
               5：自增
               6：减去一个整数
               7：自减
               备注：
                   普通变量加减整数：是指给内存中存放的数据本身加/减n；不会引起所操作数据在内存中地址的改变； 
                   指针变量加法：指针变量+n指的是跳过n*m字节；其中m字节指的是指针所指的内存空间的数据的数据类型在当前系统中所占用的字节的个数；指针变量的加减运算改变的是当前指针变量所指内存地址；
                      

    8：指针：

    给指定内存地址的内存块赋值：
        *变量名 = vlaue
        备注：
            1：注意：*指针变量代表的是内存块中所存放的数据；指针变量代表的是某个内存地址；
    
    指针变量的运算：
        1：指针变量保存的是内存块的地址，以16进制表示，本质上是个数字；因此可以参与运算，比较等操作；

        2：指针变量加法运算：
            普通变量加法：是指给内存中存放的数据本身加n；不会引起所操作数据在内存中地址的改变；
            指针变量加法：指针变量+n指的是跳过n个m字节；其中m字节指的是指针所指的内存空间的数据的数据类型在当前系统中所占用的字节的个数；指针变量的加减运算会改变当前指针变量所指内存地址；
            即：指针变量的加减是以指针所指数据类型的大小（注意是数据类型的大小而不是数据的大小）为一个单位计算的；+1即代表指向下一个有意义的内存块的首地址；
        3：对于指针变量的加减本质上是改变指针变量所指向的内存块的地址；因此：
            1：对于数组或者字符串而言，其占用的是连续的内存区域，因此对保存数组或者字符串的指针变量加n或者减n是能够精确知道当前指针变量所指的内存块中存储的数据的；
            2：对于普通变量而言，对其指针变量加n或者减n则无法精确知道其所指内存块中存放的数据的；

        总结： 
            1：普通变量的加减运算是对值本身进行加减运算的，不会改变当前值在内存中的存放地址；
            2：指针变量加减某个值是将会改变当前指针变量所指内存地址的，具体跳过多少字节以当前指针所指数据类型在当前系统中所占用字节的大小有关，并非简单的给指针变量的值加减某个值；
            3： 对于指向普通变量的指针变量加减某个值改变其内存指向并无任何实际意义，对于数组或者字符串改变其指针变量的值则可精确推算改变之后所指内存区域的内容；
            4：指针变量可以参与比较运算，比较大小并无任何意义，比较是否相等则可以判断两个指针变量是否指向同一块内存区域；
            5：不能对指针变量进行乘法，除法，或者取余运算，并无任何实际意义；
    数组（字符串）和指针：
        1：数组开辟的是一块连续的内存区域；
        2：数组名即存放数组的首地址，因此数组名本质上就是个指针变量；
        3：对数组的指针变量+1即指向下一个元素，-1则指向上一个元素；但是指针变量的值的改变则和数组数据类型以及平台有关；
        4：对于数组元素的访问既可以使用下标也可以使用指针的方式；
        5：字符串和数组：
            1：c语言中使用字符数组存放字符串，因此可以使用操作数组的方式操作字符串；
            2：字符串和数组最根本的区别在于其在内存中的存储区域不一样，
                字符数组存储在全局数据区，或者栈区；有写入和读取的权限；
                而字符串存储在常量区；只有读取权限，没有写入权限；因此对其某一位赋值将会出错；
            3：如果对字符串有修改的需求则只能使用字符数组，否则可以使用字符串或者字符数组；
    指针作为函数的参数：
        1：c语言中实参到形参的传递是单向的；即：形参在对应函数中做了修改以后并不会影响实参变量的值；
        2：如果函数中需要改变外部变量的值则必须传递外部变量的内存地址；
    指针作为函数的返回值：
        1：如果函数将指针作为返回值，则称该函数是指针函数；指针函数的声明：返回值类型 *函数名(形参){code...}
        2：函数执行完毕之后将会销毁在函数内部声明的所有变量；因此不要将返回指针指向函数内部声明的变量以及形参；
        3：注意函数执行完毕之后会对函数内部所声明的所有变量以及形参销毁，但是销毁并非是直接清空掉函数运行期间申请的内存空间；而是弃之不用，即函数执行完毕之后，其执行期间所申请的内存空间现在可以被些人任意内容；
    二级指针：
        1：指针本质上就是一个普通的变量，只是其中所存储的值代表的是某个内存块的地址；而值本身则是一个十六进制的整数；指针变量本身存储的那个十六进制的整数也是需要占用内存空间的；
        2：存放指针变量在内存中地址的变量称为二级指针；即二级指针任然是个普通变量，存储十六进制的整数，改整数代表的是另一个指针变量存储其值的地址；
        3：二级指针需要使用**来声明，同理，三级指针需要使用***来声明；
        4：可以理解指针变量就是普通的变量，仅仅是其所存储的值具备不同的含义，但是编写代码要遵守c语言语法规范；
    
    空指针 NULL：
        1：一个指针变量可以指向任意一块内存区域；无论改内存区域有没有被分配；也不管改内存有没有使用权限；只要给定地址，指针变量就能指向；
        2：如果指针变量未被初始化，则该指针变量指向的哪个内存块是不确定的；因此一般对没有初始化的指针赋值为NULL;
            即：该指针的值是空的，不指向任何内存区域；（注意：NULL只能是大写的，不能是小写的）
        3：计算机系统在低地址的内存空间不存储任何数据，也不能被用户程序访问；
        4：NULL 本质上是一个宏：((void*)0);而void*则表示一个实际有效的指针，指向的也是实际的内存空间，但是该块内存个空间存储什么类型的值，并不确定；使用的时候需要强制转换；
    数组和指针再理解：
        1：数组名表示数组的首地址，存放是是首个元素的内存地址；
        2：但是数组指针和数组名是完全不一样的概念，数组名是一个变量代表的是一组数据集合；数组指针变量是一个变量，但是仅仅代表数组的首地址，并不能代表整个数组；
        3：数组名和数组指针是不同的符号，代表着不同的含义；sizeof()函数是通过符号类型来求长度的；
        4：数组名和指针的转换：
        总结：
            1：数组名在宏观含以上代表的是整个数组集团；在微观上其存储的是第0个元素的内存地址；
            2：只有当数组名作为数组的定义的标识符（及定义或者声明数组时）或者使用sizeof或者使用&的时候，数组名表示整个数组；
            3：除此之外，数组名会被转换为指向第0个元素的指针；
            4：数组小标和指针的偏移量相同；而步长系统会自动根据数组的类型来确定；
            5：如果函数形参要求传入数组类型的数据，此时传入的数组名实际是数组的首地址，而不代表整个数组；根据传入的数组名也无法使用sizeof来计算数组长度，数组长度需要单独传入；
            6：形参如果是数组，或者函数调用需要传递数组尽量传递数组的首地址，而非整个数组，可以减少内存开销；
    指针数组：
        1：指针数组和普通数组一样，都是一个数据集合，只是指针数组中的每一个元素代表的不是数据值的内容，而是某个内存块的地址；
        2：指针数组的声明：dateType *arrayName[length];
        3：此时，该数组的数组名就是一个二级指针；
    将字符串赋值给指针变量：
        1：将字符串赋值给指针变量的时候，指针变量实际存放的是字符串首个字符的内存地址，而非整个字符串；
        2：普通数组的数组名在表达式中会当做一个指针变量处理，存放的是首个元素的内存地址；
           指针数组的数组名在表达式中同样也会当做一个指针变量处理，但是这个指针变量指向的是另一个指针的地址；（这一点一定要注意）
    指针与二维数组：
        1：二维数组在声明时有行和列，在形式上是二维的；
        2：二维数组在存储上仍然是一维线性的，占用的是一块连续的内存空间；其组织形式是按照行排列；
        3：二维数组在语义上一级语法上是当做二维处理的；即：二维数组的数组名指向的是第一维的首地址；此时对首地址进行加减1即是改变了当前指针指向的维数；
        4：区分下面两种指针的不同：
                int *(p1[5]);  //指针数组，可以去掉括号直接写作 int *p1[5];p1指向的是一个指针数组的首地址；
                 int (*p2)[5];  //二维数组指针，不能去掉括号；p2指向的是一个长度为5，数据类型为int的数组的首地址；
    
    
        





        
        



        
        






               
            
    
        
    



        
    

        

    
        
        



    
    

        

        
    

    

    
    


            


            


                
                


                





                         



