socket编程流程：
    1：创建socket
    对于服务端：
        2：绑定ip和端口
        3：监听端口
        4：阻塞接收客户端连接；
        5：接收客户端发来的数据
        6：向客户端发送数据
    对于客户端：
        2：向服务器端发送连接请求
        3：向服务器端发送数据
        4：接收来自服务器的数据

创建套接字：socket
    1：socket是系统向应用程序提供的网络编程接口，在linux中被映射为一个虚拟的文件,socket消息的收发被影射为对该虚拟文件的读写！
    2：两台计算机需要通信需要先创建socket文件，linux中每一个文件都会分配一个int类型的编号，称为文件描述符；socket文件也一样！
    3：linux中创建socket需要使用socket函数：<sys/socket.h>
        int socket(int af, int type, int protocol);
            功能：该函数创建一个socket文件；
            返回值：该函数返回socket文件描述符；
            参数：
                af：ip协议类型(包括IPV4和IPV6);
                    IPV4：AF_INET/PF_INET;
                    IPV6：AF_INET6/PF_INET6;
                type：数据传输类型(包括SOCK_STREAM和SOCK_DGRAM);
                    SOCK_STREAM：面向具有连接的数据传输方式，一般用于TCP传输协议；
                    SOCK_DGRAM：面向不具有连接的数据传输方式，一般用于UDP传输协议；
                protocol：指定传输协议(包括IPPROTO_TCP协议和IPPROTO_UDP协议)；
            说明：
                1：一般根据af参数以及type参数即可确定使用何种协议，简便写法protocol设置为0即可；

绑定ip和端口
    1：计算机通信本质上是应用软件的通信，ip地址可以唯一确定计算机所在的网络位置，mac地址可以唯一确定该计算机在局域网络中的位置，端口则可以唯一确定该计算机上的软件。因此必须为网络通信程序绑定ip和端口才能够实现应用程序的通信！
    2：绑定方式：bind()
        int bind(int sock, struct sockaddr *addr, socklen_t addrlen);
            功能：为网络通讯程序绑定ip地址和端口；；
            参数：
                sock:socket文件描述符；
                addr:struct sockaddr类型的结构体，存放着ip地址和端口；
                addrlen:sockaddr的大小；可以由sizeof计算出；

    3：封装ip和端口号需要使用的结构体：sockaddr
        sockaddr结构：
            struct sockaddr{
                sa_family_t sin_family;//地址族，即地址类型(IPV4/IPV6)
                char        sa_data[14];//存储ip地址和端口号
            }
        备注：
            1：sockaddr中sin_family中需要填入协议类型，原因在于sockaddr结构体设置支出并不是为某一个协议而设置的；
            2：在c语言中并无任何函数能够直接将ip地址和端口号封装进sa_data,但是c语言根据不同的协议类型提供了不同的结构体来封装ip地址和端口；
            
    2：c语言中根据不同的协议类型来封装ip地址和端口的结构体：
        对于IPV4：
            struct sockaddr_in{
                sa_family_t     sin_family; //地址族，即地址类型
                uint16_t        sin_port;   //16位端口号
                struct in_addr  sin_addr;   //32位ip地址
                char            sin_zero[8];//不使用，一般用0填充
            }
        对于IPV6：
                struct sockaddr_in6 { 
                    sa_family_t sin6_family;  //(2)地址类型，取值为AF_INET6
                    in_port_t sin6_port;  //(2)16位端口号
                    uint32_t sin6_flowinfo;  //(4)IPv6流信息
                    struct in6_addr sin6_addr;  //(4)具体的IPv6地址
                    uint32_t sin6_scope_id;  //(4)接口范围ID
                };
    3：用于存放32位ip地址的结构体：struct in_addr
                struct in_addr{
                    in_addr_t  s_addr;  //32位的IP地址
                };
                备注：in_addr_t在<netinet/in.h>中定义，等价于unsigned long，长度为四个字节！

    4：在封装ip和端口时需要先填充对应ip类型的结构体(sockaddr_in或者sockaddr_in6)，然后再转换成sockaddr;

    5：大端序和小端序：大端序和小端序描述的是cpu在内存中存储数据的方式；
        大端序：数据在内存中--高位字节放在低地址称为大端序；
        小端序：数据在内存中--高位字节放在高地址称为小端序；
        网络字节序：
            由于数据的传输以字节为单位进行，而计算机之间有的以大端序存储数据，有的以小端序存储数据，会造成数据不统一！
            因此，规定数据在网络中传输时必须字节必须按照固定的方式来传输，这种方式称为网络字节序，目前使用大端序作为网络字节序；
        字节序转换：
            unsigned short htons(unsigned short);
            unsigned short ntohs(unsigned short);
            unsigned short htonl(unsigned short);
            unsigned short ntohl(unsigned short);
            备注：1：h代表当前主机的字节序，n代表网络字节序，to是转换的意思，s是short的意思，l是long的意思；
                 2：hton指把当前主机的字节序转换为网络字节序；ntoh指把网络字节序转换为当前主机的字节序！l/s指待转换的数据类型；
                 3：对于端口号port则需使用htons进行转换；
        
    6：网络地址(ip地址)：
        in_addr结构体中声明了存储ip地址的成员；该成员的数据类型是一个32位的整数；但是ip一般通过点分十进制表示法表示，在网络通信中需要转换为32位整数；
        转换方式：
            in_addr_t inet_addr(const char *string);
                备注：该函数可以将点分十进制表示法表示的ip地址转换为32位整数；并能够检测ip地址是否有效！
            int inet_aton(const char *string,struct in_addr * in_ddr);
                功能：将点分十进制表示的ip地址转换为32位整数，并保存在结构体in_addr中；
                参数：string:点分十进制表示的ip地址;in_addr:需要保存转换之后结果的结构体地址；
        除过通过上述将点分十进制ip地址转换为32位整数来填充sockaddr_in的方式还可以直接设置为INADDR_ANY;
            INADDR_ANY和上述手动填入ip地址相比，其可以自动获取服务器的ip地址，在服务器端推荐采用这种方式，对于客户端则推荐手动填入ip地址；
    7：样例：
        struct sockaddr_in serv_addr;
        memset(&serv_addr,0,sizeof(serv_addr)); //将每个字节全部都用0填充
        serv_addr.sin_family = AF_INET;         //设置IP协议类型
        serv_addr.sin_port = htons(9999);       //设置端口，需要使用htons函数来转换
        serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1"); //设置ip地址，需要使用inet_addr来转换
        bind(serv_sock,(struct sockaddr*)&serv_addr,sizeof(serv_addr)); //绑定ip和端口
    6：特别说明：端口的取值理论范围在0~65536，但是0~1023的端口一般由系统分配给特定的服务程序；应用程序的端口号尽量在1024~65536之间分配！
                      
监听端口：
    1：在绑定完ip和端口之后需要使端口处于监听状态才能接收到数据；
    2：c语言中通过listen来让socket处于监听状态；
        int listen(int sock, int backlog); 
            功能：让socket处于监听状态
            参数：
                sock：socket描述符
                backlog: 请求队列的最大长度(服务器最大允许的客户端连接个数)
    3：请求队列：
        1：在socket正在处理请求时如果有新的请求发来，新的请求将会被放入缓冲区，等当前请求处理完成之后将会从缓冲区中取出请求继续处理，此时缓冲区就称为请求队列；
        2：listen的第二个参数用于指导缓冲区的长度；如果将backlog设置为SOMAXCONN,则交由系统来决定请求队列的长度；
        3：当队列满时，对于Linux将会返回ECONNREFUSED错误；
对于服务端：
    对于服务端监听端口之后将阻塞等待客户端发送消息；
        1：linux上使用accept函数来接收客户端请求：
            int accept(int sock, struct sockaddr *addr, socklen_t *addrlen);  //Linux
                功能：接收客户端发来的消息，当没有消息发来时将会阻塞直至有消息！
                参数：sock：socket描述符
                     addr: 该结构也是sockaddr类型，存储客户端IP地址和端口号信息；需要转换为对应的IP类
                           型的结构体(sockaddr_in或者sockaddr_in6)才能获取具体的ip地址和端口号；
                     addrlen：为addr的长度；指针类型，指向存储addr长度值的内存区域
                返回值：返回客户端的socket文件描述符；
                备注：该函数只能接收一次客户端发来的消息，处理完成之后程序将会结束，因此如果需要持续接收客户端发来的消息将需要在死循环中使用；
对于客户端：
    对于客户端监听端口之后将需要连接服务端
     1：在linux中使用connect来建立连接：
       int connect(int sock,struct sockaddr $serv_addr,socklen_t addrlen); 
            功能：连接服务器
            参数：sock:socket描述符
                 serv_addr:封装了IP地址和端口的结构体
                 addrlen:addr参数的长度，指针类型，指向存储addr长度值的内存区域！

数据的接收和发送：
    在linux上socket被映射为一个文件，因此消息的接收和发送均为读写文件：
        发送消息：ssize_t write(int fd, const void *buf, size_t nbytes);
                功能：write函数将会把缓冲区buf中的nbytes个字节写入文件fd;成功返回写入的字节数，失败返回-1；
                参数：fd:文件描述符
                     buf:需要写入的数据
                     nbytes:需要从buf中写入fd文件的字节个数；
        读取消息：ssize_t read(int fd,void *buf, size_t nbytes);
                功能：该函数将会从文件fd中读取nbytes个字节的数据存入buf缓冲区中；成功返回读取的字节数，失败返回-1；
                参数：fd:文件描述符
                      buf:存储读取到的数据的缓冲区
                      nbytes:需要读取的字节个数
socket的关闭：
    1：完全断开连接：close()/closesocket();
        备注：1：该函数意味着服务器和客户端将会完全断开连接，即系统将会把socket套接字从内存中清楚，之后将再无法使用该套接字，既不能发送数据也不能再接收数据；
            2：close/closesocket()被调用之后会立即向对方发送FIN包，这将导致即便输出缓冲区中还有数据，对方也不会再收到了；
    2：不完全断开：只断开一条数据通道，而保留另一条数据通道的方式：shutdown()函数；
        原型：shutdown(int sock,int howto);
            参数：sock,需要断开的socket标识，
                 howto,需要断开的方式；
            取值：sock：代表int类型的标识；
                 howto：有以下取值方式：
                    SHUT_RD：断开输入流，即套接字将无法接收数据（即使数据输入到缓冲区中也将会被抹去），关闭之后将无法调用输入相关函数(read/recv)；
                    SHUT_WR：断开输出流，套接字无法发送数据，但是如果缓冲区中还有数据，这些数据将会被继续发送至网络；
                    SHUT_RDWR:同时断开I/O流，相当于分两次调用shutdown();一次以SHUT_RD为参数，一次以SHUT_WR为参数；
        备注：1：shutdown只是用来关闭连接，而不是套接字，无论调用多少次shutdown套接字也还是在内存中保存着，并不会清除掉；直到调用close/closesocket()之后socket关键字才会清除；
            2：无论是调用close还是closesocket还是shutdown都会向对方发送FIN包；但是shutdown将会在缓冲区中的数据发送完成之后才会发送FIN包；
socket使用域名：
    在通讯中也可以使用域名，c语言中通过gethostbyname()函数完成域名和ip的转换：
    原型：struct hostent *gethostbyname(const char *hostname);
    参数：域名，
    返回值：返回struct hostent类型的结构体；
    struct hostent结构体：该结构体封装了通过域名获取到的ip信息：
        struct hostent{
            char *h_name;       //域名名称
            char **h_aliases;   //域名别名，（指向别名列表的地址，一个域名可能有多个别名）
            int  h_addrtype;    //ip地址类型（AF_INET/PF_INET或者AF_INET6/PF_INET6）
            int  h_length;      //ip地址的长度(IPV4的长度为4字节，IPV6的长度为16个字节);
            char **h_addr_list; //该类型为指向数组的地址，数组中保存了ip地址；（一个域名有可能会对应多个地址）
        }
            
socket缓冲区：
    对于发送数据：
        write函数被调用之后并不会立即向网络中传输数据，而是先将数据写入缓冲区中；再由TCP协议将数据从缓冲区发送到目标机器；对于write函数，一旦将数据写入到缓冲区就可以成功返回，不管消息何时被发送至网络,也不管消息是否到达目标机器；
    发送时机：
        write函数将数据写入缓冲区之后，有可能立即被发送至网络，也有可能在缓冲区中堆积，然后将多次写入的数据一次性被发送至网络；这完全取决于系统；

    对于读取数据：
        read函数也是从输入缓冲区中读取数据，并不会直接从网络中读取数据；
    
    I/O缓冲区特征：
        1：I/O缓冲区在每个TCP套接字中单独存在，并非在整个系统中只有一个！
        2：I/O缓冲区在创建套接字时自动生成；
        3：即使关闭套接字也会继续传送输出缓冲区中遗留的数据；
        4：关闭套接字将丢失输入缓冲区中的数据；
        5：输入输出缓冲区的默认大小一般都是8KB；可以通过getsockopt()函数获取；

阻塞模式：
    对于TCP-SOCKET,当使用write写入数据时：步骤如下：
        1：write函数检查缓冲区是否有足够空间写入数据，如果没有，write函数将会阻塞，直至缓冲区有足够的空间时，再继续向缓冲区写入数据；
        2：如果写入的数据超过缓冲区长度，那么write将会分批写入数据，直至数据全部被写入缓冲区！
        3：如果TCP协议正在向网络发送数据，那么输出缓冲区会被锁定，write函数将会阻塞，直至可以向缓冲区写入全部数据！
        
    对于TCP-SOCKET,TCP发送数据的策略：
        1：TCP协议在发送数据时，有可能在write写入缓冲区之后就发送数据；
        2：也有可能在缓冲区写入较多数据后才会发送数据；
        3：如果输入缓冲区已满，无法再存入数据，TCP协议将会暂停向输入缓冲区存储数据；

    对于TCP-SOCKET,当使用read()/recv()读取数据时：步骤如下：
        1：read函数会先检查缓冲区是否有数据，如果有数据将直接读取指定长度的数据，如果没有数据，read函数将会阻塞至缓冲区有数据！
        2：如果需要读取的数据长度小于缓冲区数据的长度，read函数读取之后剩下的数据将会积压在缓冲区；直至下次被读取出来；

    对于缓冲区中数据的边界性：
        由于tcp协议是流式协议，数据无边界：因此：
            1：write向缓冲区中写入的数据是无边界的；
            2：read函数读取的缓冲区中的数据也是无边界的；
TCP的粘包问题：
    粘包：
        由于tcp发送数据的策略：有可能会像缓冲区中写入一个数据就发送一次，也可能写入多次数据之后再发送；此时TCP在发送数据时有可能刚好发送的是一个完整的数据包，也有可能是多个完整或者不完整的数据包；
        由于接收数据的策略：接收方接收数据时会将整个缓冲区中的数据读取出来，此时缓冲区中的数据有可能是一个完整的数据包，也有可能是多个数据包；此时多个数据包之间是没有边界的，是连续的数据流。这种现象被称为粘包！
    eg:
        比如发送方分两次次发送abc字符串：则发送方式有可能为一下几种：
            abc abc：分两次发送，每次都是一个完整的包
            abcab c：分两次发送；
            abca bc：分两次发送
            abcabc ：分一次发送，
            除过第一种以外其余现象都称为粘包；

    粘包带来的问题：由于粘包现象，导致接收方无法区分不同的数据包，最终将导致读取到的数据或不完整或多余，进而无法正确的处理发送方发送的数据！





  

                     
