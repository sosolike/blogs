c-多线程
    1：C语言标准库中并未提供对于线程开发的接口，因此使用C语言进行多线程开发需要借助操作系统提供的库函数；
    2：在Linux上，进行多线程开发则需要使用GNU提供的基于POSIX标准的库；
    3：在进行多线程开发时需要引入pthread.h头文件，该头文件中包含了针对线程开发的相关接口；其函数均由pthread_开头；
    4：线程关系：main函数所在的线程称之为主线程，其余的子线程只能在主线程中创建；创建完成之后主线程和子线程具备相同的运行级别；共同争抢cpu时间片；

    关于POSIX:
        1：POSIX：可移植操作系统接口，是由IEEE定制的一套标准，由ISO和ANSY进行标准化；主要目的在于为基于unix操作系统上运行的软件定义一系列的API标准；使得程序在源代码级别具备可移植性；
        2：POSIX包括了系统应用程序接口以及C语言的实时扩展(进程开发，线程开发等)；
    
Linux上pthread线程之间的结束关系：
    1：在任意线程(主线程或者子线程)中调用exit()函数都将结束当前进程，属于当前进程的所有线程也全部终止运行；
    2：在任意线程(主线程或者子线程)中调用pthread_exit()函数只能结束当前线程，并不会影响该进程下的其他线程；只有在所有线程全部执行完毕之后才会结束；
    3：在主函数中调用return会直接终止整个进程的运行，属于该进程的所有线程也将全部退出；其余线程调用return则仅仅终止当前线程的执行，不会影响属于该进程的其他线程；

Linux上pthread线程之间的运行关系：
    1：main函数所在的线程称之为主线程，进程启动之后会运行主线程:从main函数第一行开始运行，直至main函数最后一行结束；子线程只能在main()函数中创建，即只能在主线程中创建；
    2：如果不使用pthread_exit()结束主线程或者不使用pthread_join()阻塞主线程时，主线程运行结束，整个进程也将结束；子线程将会执行不完全或者没有机会执行；
    3：保证子线程的执行完全，需要对主线程做一下处理：
        1：主线程结束时使用pthread_exit()来结束；
        2：使用pthread_join来阻塞主线程的执行，直至所有处于joinable状态的子线程执行完毕；
        
线程结束后资源释放问题：
    1：线程创建之后要么是PTHREAD_CREATE_JOINABLE状态，要么是PTHREAD_CREATE_DETACH状态；
    2：如果线程是PTHREAD_CREATE_JOINABLE状态，那么线程结束后线程所占用的资源必须通过pthread_join()来释放；
    3：如果线程是PTHREAD_CREATE_DETACH状态，那么线程结束后会自动释放所占用的资源；

c-多线程：创建线程
    创建方式：
        pthread_create(pthread_t *thread,const pthread_attr_t * attr,void *(*thread_fun)(void *),void *args);
         参数: thread--创建好的线程的id；
              attr--用于设置线程运行状态的属性；
              thread_fun--是线程被调用的函数；
              args--是线程被调用的函数的参数；
         参数说明: 
            thread:当前创建的线程的id；类型为pthread_t;类型定义为typedef unsigned long int pthread_t;
            attr：设置当前线程运行状态的属性；是 struct pthread_attr_t类型的结构体；该结构体包含以下项：
                    __detachstate,
                        1：表示新线程是否与进程中其他线程脱离同步；默认为PTHREAD_CREATE_JOINABLE状态；
                        2：如果设置为1则脱离同步，新线程将不能使用pthread_join来同步，而且在退出时自行释放所占用的资源；
                        3：如果设置0或者使用默认值，新线程将可以使用pthread_join来同步，也可以在创建运行之后使用pthread_detach()来设置脱离同步；
                        4：一旦设置为PTHREAD_CREATE_DETACH状态，将不能再恢复到PTHREAD_CREATE_JOINABLE状态；
                    __schedpolicy,
                        1：表示新线程的调度策略，包括SCHED_OTHER(正常，非实时)、SCHED_RR(实时，轮转法)和SCHED_FIFO(实时、先入先出)，
                        2：默认是SCHED_OTHER,后两种调度策略进队root用户有效；
                        3：运行时可以通过pthread_setschedparam()来改变；
                    __schedparam，
                        1：struct sched_param结构，目前仅有一个sched_priority整型变量表示线程的运行优先级。
                        2：这个参数仅当调度策略为实时（即SCHED_RR或SCHED_FIFO）时才有效，
                        3：可以在运行时通过pthread_setschedparam()函数来改变，缺省为0。  
                    __inheritsched，
                        1：有两种值可供选择：pthread_EXPLICIT_SCHED和pthread_INHERIT_SCHED，前者表示新线程使用显式指定调度策略和调度参数（即attr中的值），而后者表示继承调用者线程的值。
                        2：缺省为pthread_EXPLICIT_SCHED。  
                    __scop，
                        1：指定线程间竞争cpu的范围；包括仅在当前进程中竞争和系统中所有的进程中竞争；
                        2：POSIX实现了定义了两种标准，pthread_SCOPE_SYSTEM以及pthread_SCOPE_PROCESS，
                        3：目前linuxThreads仅实现了pthread_SCOPE_SYSTEM；即和全部的线程竞争cpu执行时间；
            thread_fun: 当前线程中执行的函数；
                    函数声明类型:void *fun(void *args);
                    备注：1:函数的返回值类型必须是void *;该返回值可以在pthread_join中获取；
                         2:函数接收到的参数是void *类型，因此在函数内部使用参数时需要强制转换为指定的数据类型；
            args: 传给当前线程中执行的函数的参数；
                  被执行函数只能接收一个参数的指针地址，因此多个参数需要使用结构体来包含；并传入结构体的地址；
        备注:1：线程创建只能在main函数中进行；不能在其他子线程中创建线程；
            2：如果不设置线程状态属性，线程创建完成之后将会是PTHREAD_CREATE_JOINABLE(合并)状态；如果需要设置为PTHREAD_CREATE_DETACH(脱离)状态，则可以使用pthread_detach()来设置脱离同步；一旦线程脱离同步将无法再设置为合并状态，线程所占用的资源由线程自身管理；
            3：线程创建完成之后会立即进入争夺cpu状态，等待cpu执行，无需调用其他方法启动线程；
            4：默认情况下，主线程运行结束，当前进程即结束，其他所有子线程无论是否运行完毕都将结束；
    
    等待线程： 可以让当前线程挂起等待指定线程的运行，等指定线程运行完毕之后从挂起处继续执行当前线程；
        等待线程--pthread_join()：
            功能：
                1：等待指定线程运行完毕；然后继续运行当前线程；
                2：管理joinable状态的线程的资源，并接收线程的返回值；
            原型：int pthread_join(pthread_t thread,void **retval)
            参数：thread为指定需要等待的线程id，retval是thread_exit的第一个参数，也即线程的返回值；
            返回值：0代表成功，失败则返回错误号；
            说明：1：该函数可以阻塞当前线程，等待指定线程的运行，等指定线程运行完毕之后才会返回当前线程继续运行；
                 2：如果在线程中使用pthread_join等待多个线程，那么被等待的线程将会一起争用cpu时间片；
                 3：一个线程只能被一个线程等待，不能多个线程等待一个线程，否则第一个接收到信号的线程返回成功，其余调用pthread_join的线程则返回错误码ESRCH；
                 4：pthread_join只能用于处于joinable状态的线程；对于unjoinable状态的线程无法使用pthread_join()；
                 5：pthread_join的另外一个作用在于回收线程所占用的资源；对于joinable状态的线程，如果不使用pthread_join的话该线程的资源将无法被释放；
                 6：pthread_join主要使用场景有两个：
                    1：阻塞当前线程，等待目标线程的执行完成后继续执行当前线程；
                    2：回收处于joinable状态的线程所占用的资源；
    分离线程：
        分离线程--pthread_detach(pthread_t thread);
            功能：分离当前线程；将当前线程状态设置为unjoinable状态(PTHREAD_CREATE_DETACH)；
            原型：int pthread_detach(pthread_t thread)
            参数：需要被分离的线程id
            返回值：0代表分离成功，如果出错将会返回错误码(EINVAL\ESRCH)；
            说明：1：pthread线程有两种状态，默认情况下线程创建完成之后的状态为joinable，该函数将会把线程设置为   unjoinable状态；
                 2：该函数可以在主线程创建完成子线程之后调用，也可以在线程内部调用；
                 3：线程的unjoinable状态可以在创建线程时指定，也可以使用pthread_detach()来设置；
                 4：线程如果处于分离状态(unjoinable)将不能再设置为结合(joinable)状态;
                 5：线程处于分离状态之后，线程所占有的资源在线程结束时自行释放，无需其他线程控制；

    结束线程：
        线程的退出有两种方式：
            1：线程在其主体函数退出时将会自动终止；
            2：在当前线程内部执行pthread_exit()来终止；
        线程结束--pthread_exit():
            功能：退出当前线程，用于在当前线程中的执行函数中调用；
            原型：void pthread_exit(void * value_ptr)
            参数：该参数代表当前线程中执行的函数的返回值；在线程结束时传入，该值可以使用pthread_join的第二个参数获取得到；
            返回值：无；
            说明：
                 1：当函数返回时，被等待线程的资源被收回；
                 

    取消线程：
        取消线程：线程的运行可由外部其他线程来发送取消命令，进而终止指定线程的运行；
        取消特征：取消线程的运行命令只能由外部的线程下达，取消线程并不等同于直接终止线程的运行；仅仅只是向目标线程发出取消通知；具体如何处理该通知则由目标线程决定；
        取消线程函数：
            int pthread_cancel(pthread thread):
                1：发送终止信号给thread线程，如果发送成功返回0，发送失败则返回非0值；发送成功仅仅只能代表信号被发往指定线程；但并不等同于thread会被终止；
            int pthread_setcancelstate(int state,int *oldstate):
                1：设置本线程对于cancel信号的处理方式；state有两种值：PTHREAD_CANCEL_ENABLE(默认值)和PTHREAD_CANCE_DISABLE;
                2：PTHREAD_CANCEL_ENABLE ：接收到信号之后将当前线程设置为cancel的状态；
                3：PTHREAD_CANCEL_DISABLE : 忽略接收到的信号，继续运行；
                4：old_state如果不为NULL则存入cancel状态以便恢复；
            int pthread_setcanceltype(int type,int *oldtype)
                1：设置本线程取消动作的时机，type有两种值：PTHREAD_CANCEL_DEFFERED和PTHREAD_CANCEL_ASYCHRONOUS；
                2：该函数设置的处理方式仅在cancel为enable时有效；
                3：PTHREAD_CANCEL_DEFFERED表示收到信号之后继续运行到下一个取消点再退出；
                4：PTHREAD_CANCEL_ASYCHRONOUS表示立即执行取消动作；
                3：oldtype如果不为NULL则存入用来存储取消动作类型值
            void pthread_testcancel(void):
                1：该函数用于在不包含取消点，但是又需要一个取消点的地方创建一个取消点；
        取消点：
            1：线程外部向线程发送取消信号之后，是否终止线程的执行，由线程本身决定，可以忽略，可以立即执行取消动作，或者继续运行至取消点；
            2：线程的默认处理是运行到取消点，然后退出；
            3：pthread指定的取消点：
                pthreads标准指定了几个取消点，其中包括：
                (1)通过pthread_testcancel调用以编程方式建立线程取消点。
                (2)线程等待pthread_cond_wait或pthread_cond_timewait()中的特定条件。
                (3)被sigwait(2)阻塞的函数
                (4)一些标准的库调用。通常，这些调用包括线程可基于阻塞的函数。 
            4：根据POSIX标准，pthread_join(),pthread_testcancel(),pthread_cond_wait(),pthread_cond_timedwait(),sem_wait(),sigwait()等函数还有read(),write()等会引起阻塞的系统调用都是取消点；但是pthread_cancel手册声明该库由于与c库结合不好，因而目前c库函数都不是取消点；如果需要将c库函数作为取消点，则需要在c库函数前后分别调用pthread_testcancel();
            
    线程同步：
        线程同步：由于多个线程共享进程中公共资源；如果同一时刻多个线程同时操作某些资源会导致逻辑错误；此时需要使得线程同步对资源进行操作；
        实现线程同步方式：互斥锁，条件变量，信号量；
        互斥锁：
            注：加互斥锁的目的是对公共资源的边界做安全防护；

            1：初始化锁：Linux中互斥锁的数据类型是pthread_mutex_t,在使用之前需要先进行初始化：
                静态初始化：
                    pthread_mutex_t mutex = PTHREAD_MUTEX_INITALIZER;
                动态初始化：
                    int pthread_mutex_init(pthread_mutex_t *mutex,const pthread_mutex_attr_t *mutexattr);
                        功能：动态创建一个互斥锁；
                        参数：mutex:创建的互斥锁指针；
                             mutexattr:指定互斥锁属性；
                        互斥锁属性：
                             1：PTHREAD_MUTEX_TIMED_NP : 默认值，普通锁，一个线程加锁之后其余请求锁的线程将形成一个等待队列，并在解锁之后按照优先级获得锁，这种锁策略保证了资源分配的公平性；
                             2：PTHREAD_MUTEX_RECURSIVE_NP : 嵌套锁，允许同一个线程对同一个锁成功获得多次，并通过多次unlock解锁；如果是不同线程请求，则在加锁线程解锁时重新竞争；
                             3：PTHREAD_MUTEX_ERRORCHECK_NP : 检错锁，如果同一个线程请求同一个锁，则返回EDEADLK，否则与PTHREAD_MUTEX_TIMED_NP类型动作相同，这样就抱着当不允许多次加锁时不会出现最简单情况下的死锁；
                             4： PTHREAD_MUTEX_ADAPTIVE_NP，适应锁，动作最简单的锁类型，仅等待解锁后重新竞争。

            2：加锁：对于共享资源的访问，要进行加锁，如果互斥量已经加锁，那么线程对该资源的访问将会阻塞，直至互斥量解锁；
                int pthread_mutex_lock(pthread_mutex_t *mutex);
            
                int pthread_mutex_trylock(pthread_mutex_t *mutex);
                备注：1：trylock和lock不同的是，lock获取锁失败将会进入阻塞状态；
                     2：trylock获取锁失败，将不会进入阻塞状态，而是继续返回线程执行，该函数可以有效避免循环等待锁，并且trylock失败可以释放已经占有的资源；
            3：解锁：在完成对共享资源的访问之后要对互斥量进行解锁；
                int pthread_mutex_unlock(pthread_mutex_t *mutex);
            4：销毁锁：锁在使用完成之后要销毁，释放资源；
                int pthread_mutex_destory(pthread_mutex_t *mutex);

                
        条件变量：
            注：条件变量的目的在于通过条件的结果来确定线程执行顺序；
            1：初始化条件变量：
                静态初始化：pthread_cond_t cond = PTHREAD_COND_INITIALIER;
                动态初始化: int pthread_cond_init(pthread_cond_t *cond,pthread_condattr_t *cond_attr);
            2:等待条件成立，释放锁，同事阻塞等待条件变量为真才行。timewait()设置等待时间仍未signal，返回ETIMEOUT(加锁保证只有一个线程wait)
                int pthread_cond_wait(pthread_cond_t *cond,pthread_mutex_t *mutex);
                int pthread_cond_timewait(pthread_cond_t *cond,pthread_mutex *mutex,const timespec *abstime);
                备注：1：wait功能也可以使用while(true)实现，但是wait是将线程挂起，不占用任何cpu资源，而while则会一直占用cpu资源；
                     2：该函数需要放在while的条件判断中，目的在于获取到信号之后还需再做一次条件判断，之所以需要再做一次条件判断的原因在于pthread_cond_signal在多处理器上可能同时唤醒多个线程，当你只能让一个线程处理某个任务时，其他线程就需要持续wait,因此需要使用while来做条件判断；
            
            3:激活条件变量：
                int pthread_cond_signal(pthread_cond_t *cond);
                    功能：向等待cond信号的线程发送cond信号，激活线程继续运行；
                    备注：该操作不会产生惊群现象，最多只给一个线程发信号，如果有多个线程都在等待该信号，那么会根据优先级高级来决定那个线程可以接收到信号继续执行，如果优先级一样则根据等待时间长短来获取信号；
                int pthread_cond_broadcast(pthread_cond_t *cond);
            4：清除条件变量。无线程等待否咋返回EBUSY
                int pthread_cond_destory(pthread_cond_t *cond);
            备注：1:条件变量的一般使用模式：
                    /*设置线程等待信号*/
                    pthread_mutex_lock(&mutex);
                        while(条件为假){
                            pthread_cond_wait(&cond,&mutex);
                        }
                        //执行某些操作
                    pthread_mutex_unlock(&mutex);

                    /*发送信号*/
                    pthread_mutex_lock(&mutex);
                        //设置条件为真
                    pthread_mutex_unlock(&mutex);
                    pthread_cond_signal(&cond);
                2：条件变量的使用必须和锁一起进行，用来控制线程之间的执行顺序；
           重点：3：pthread_cond_wait(&cond,&mutex);
                    1：该函数用于等待一个信号；是一个原子操作；
                    2：其执行顺序为：先将mutex解锁，(这样别的线程才能够访问mutex锁住的条件变量进而修改条件)
                        之后，再将本身的线程/进程投入睡眠状态，等待信号；
                    3：该函数获取到唤醒信号之后会立即对mutex加锁，之后从阻塞的位置继续向下执行；因此该函数之后执行完必要的操作之后必须要有pthread_mutex_unlock对mutex解锁，否则之后的线程将再无法获取对应的锁；

        信号量：
            1：信号量初始化。
                int sem_init (sem_t *sem , int pshared, unsigned int value);
            这是对由sem指定的信号量进行初始化，设置好它的共享选项(linux 只支持为0，即表示它是当前进程的局部信号量)，然后给它一个初始值VALUE。
            2：等待信号量。给信号量减1，然后等待直到信号量的值大于0。
                int sem_wait(sem_t *sem);
            3：释放信号量。信号量值加1。并通知其他等待线程。
                int sem_post(sem_t *sem);
            4：销毁信号量。用完信号量后都它进行清理。归还占有的一切资源。
                int sem_destroy(sem_t *sem);
