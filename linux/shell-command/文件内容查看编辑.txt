文件内容操作：
    查看文件内容：
    1：查看文件内容:cat [-nbs] 文件路径
        功能：从第一行开始顺序打印文件内容

        参数意义：
            -n :由1开始对所有输出行编号
            -b :由1开始对所有输出行编号，空白行不编号
            -s :如果遇到两个及以上的空白行换成一行空白

        常用方式：
            查看单个文件全部内容：cat 文件路径

            查看单个文件全部内容，带上行号：cat -n 文件路径

            查看单个文件全部内容,带上行号，除过空白行：cat -nb 文件路径
            
            查看多个文件全部内容：cat 文件路径1 文件路径2

            将查看的内容输出到一个新的文件：cat 文件路径 目标文件路径
    
    2：查看文件内容:tac 文件路径 
        功能：和cat相反，从最后一行开始,反向打印文件内容，不再支持-nbs参数
        常用方式：
            反向查看文件内容：tac 文件路径
    
    3：查看文件内容，并显示行号：nl [-bnw] 文件
        功能：查看文件全部内容，并带上行号
        参数意义：
            -b a     :表示无论是否是空行，也同样列出行号
            -b t     :如果有空行，空的那一行不要列出行号(默认值)
            -n ln    :行号在屏幕的最左方显示
            -n rn    :行号在自己栏位的最右方显示，且不加 0 
            -n rz    :行号在自己栏位的最右方显示，且加 0 
        常用方式：
            

    4：查看文件前几行：head [-ncqv] 文件路径
        功能：查看文件开头的内容，默认是前10行；
        参数意义：
            -n m     :查看前m行
            -c m     :查看前m个字节
            -q       :隐藏文件名
            -v       :显示文件名

    5：翻屏查看文件内容:less 文件路径
        功能：如果文件内容过多一次显示出来不容一看，可以使用less每次显示一屏，然后翻屏查看；
        常用方式:
            less 文件路径
        操作方式：
            [Pageup]    向上翻页
            [Pagedown]  向下翻页
            空白键       向下翻页
            上键头       向上翻一行
            下箭头       向下翻一行
            /子串        向下搜索子串内容
            ?子串        向上搜索子串内容
            n           重复前一个搜索
            N           反向重复前一个搜索
            q           离开这个less程序
    
    6：翻屏查看文件内容:more 文件路径
        功能：如果文件内容过多一次显示出来不容一看，可以使用more每次显示一屏，然后翻屏查看；
        常用方式:
            more 文件路径
        操作方式：
            空白键       向下翻页
            b           向上翻页
            /子串        向下搜索子串内容
            ?子串        向上搜索子串内容
            n           重复前一个搜索
            N           反向重复前一个搜索
            q           离开这个less程序
            :f          立刻显示出档名以及目前显示的行数
    
    7：阻塞式查看文件末尾几行:tail [-n number] 文件路径
        功能：查看文件末尾几行内容，并阻塞式显示；如果文件内容有增加，同时也会打印添加之后的内容；
        常用方式：
            tail -n number 文件路径
    

    文件内容处理：
    1：文件内容切割，并查看：cut [-dfbcn] 待切割文件路径
        功能：按行切割文件，并将切割完成的内容打印；
        参数意义：
            -d     使用定义的分割符来分割；
            -f     选取字段，和-d联合使用：使用方法有：
                    只取第N项：-f N
                    从第N项取值末尾：-f N-
                    取第N项至第M项：-f N-M
                    取前N项：-f -N

            -c     以字符为单位分割；字段选取方式和-f参数相同
            -b     以字节为单位进行分割；字段选取方式和-f参数相同
            -n     取消分割多字节，仅和-b联合使用；避免对多字节字符切割而导致出错；

    9：文件内容切割，并查看：split

    10：文件内容切割，并处理：awk
        1：awk功能：awk可以对文本数据逐行读取，然后按照指定分割符分割，并能够处理分割之后的每一个字段；文本数据可以来自标准输入，一个或者多个文件，或者其他命令的输出；
        2：awk语法：awk params 'BEGIN { commands } pattern{ commands } END{ commands }' file
            awk整体上四部分组成：awk命令+参数+语句块+数据
            参数：awk命令执行时需要传入的配置参数
            语句块：由部分组成,并且必须全部放置在' '中：
                1：语句块中各部分功能：
                    BEGIN { commands } 语句块：
                        这部分语句块会在处理整个数据行之前执行,
                        commands为shell命令组成的语句；属于可选语句块

                    pattern { commands } 语句块：
                        这部分语句用于分割每一行数据，并处理分割之后的字段；
                        pattern指定行的过滤方式，符合条件的数据行才会执行该语句块:默认是每一行都会处理，也可以是条件语句(无需if)，或者正则表达式；
                        commands为shell命令组成的语句；如果没有指定，则执行默认的print操作；
                        这部分的语句类似一个循环，每读取一行就会执行一遍；
                    
                    END { commands } 语句块：
                    这部分语句块会在整个数据行全部处理完毕之后执行，一般用来进行信息聚合操作
                    commands是shell命令组成的语句；属于可选语句块

                2：语句块中的变量：
                    自定义变量：var_name=value即可；
                        在BEGIN语句块中声明的变量在pattern以及END中都可以获取到；
                    内置变量：
                        $n : 当前数据行被分割之后的第几个字段，起始值从1开始；
                        $0 : 表示当前行的文本内容
                        $NF : 表示当前行的最后一个字段
                        FILENAME : 当前输入文件的名字
                        NR : 表示正在处理的记录数，在执行过程助攻相当于当前行号；
                        FNR : 表示该记录在文件中的行号
                        FS : 表示字段分隔符，默认是空格
                        RS ：表示记录的分割符，默认是换行符
                        NF : 表示字段数
                        OFS : 表示输出处理好的文本内容时字段的分隔符
                        ORS : 表示输出处理完成的文本内容时行的分隔符
                        FILEDWIDTHS : 表示字段宽度列表(有空格键分割)
                        ERRNO : 返回最后一个系统错误描述
                        ENVIORN : 环境变量关联数组
                        ARGIND : 命令行中当前文件的位置
                        ARGC : 命令行参数数目
                    接收外部变量：
                        var_name = $out_var:接收外部变量时，需要使用$符号来接收；
                3：语句块中的运算符：
                    算数运算：+ - * / % & ++ -- ：所有用作算数运算符进行操作时，操作数自动会转为数值，所有非数值会转换为0

                    赋值运算：= += -= *= /= %=

                    逻辑运算：|| &&

                    关系运算： < <= > >= == !=

                4：运算流程：
                    条件：if(条件表达式){}
                             if(条件表达式){}else{}
                             if(条件表达式){}else if(条件表达式){}else{}

                    循环：for
                        for(变量 in 数组){}
                        for(i=0;i<n;i++){}

                        while:
                        while(条件表达式){语句}

                        do...while:
                        do{语句}while(条件)

                        退出循环：break ：退出循环
                                 continue ：退出当前循环，进入下一次循环
                                 next：读取下一个输入行
                                 exit：退出主输入循环，进入END语句块，若没有END或者END中有exit则退出脚本
                5：语句块中的数组：
                    awk中的数组为关联数组，即索引既可以是数字也可以是字符串
                    awk中的数组使用之前不变提前声明，也不必声明大小；数组内容会根据上下文而用0或者空字符串来初始化；
                    数组的定义：
                        array_name[1] = 'value'
                        array_name[2] = 'value'
                        或者
                        array_name['first'] = 'value'
                        array_name['second'] = 'value'

                    获取数组元素：
                        array_name[下标]：array_name[1]或者array_name['first']
                    
                    获取数组长度：
                        length(array_name)
                    
                    循环遍历数组：
                        1：使用for(var in array_name) var为下标
                        2：使用for(i=0;i<length(array_name);i++){}
                    
                    判断是否存指定元素：
                        1：判断键：if('value' in array_name)
                    
                    删除数组元素：
                        1：使用键删除：delete array_name[key]:key可以是数字可以是字符串键名，取决于数组的定义方式
                    

                




            

        
