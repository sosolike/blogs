变量：
    变量的定义方式：
        varable=value
        varable='value'
        varable="value"

        备注：
            varable是变量名，等号右侧为变量的值；
            对于变量名：
                变量名由数字、字母、下划线组成；不能以数字开头；不能和关键字冲突；

            对于变量值：
                如果变量值中不包含空白字符，那么可以不需要以单引号或者双引号包含；常用语数字；
                如果变量值包含空白字符，那么必须使用单引号或者双引号包含，单引号和双引号周围（两侧）不能有空格；
                如果对变量使用''包裹，那么变量名以及命令都会原样输出；如果对变量值使用""包裹，那么会优先解析变量名以及命令；

            对于变量的访问：
                获取变量值：可以使用$varable或者${varable}来访问，{}的作用在于确定变量名的边界；推荐使用${varable}来访问变量，尤其在字符串中；
                重新赋值：如果对变量重新赋值，则不需要带上$符号，直接使用变量名即可；
            
            将命令的返回值赋值给变量：
                varable=`command` 或者 varable=$(command)
                在shell中直接执行linux命令需要使用上述语法；可以使用``包裹，也可以使用$()包裹；推荐使用$()包裹；

            只读变量：
                在变量声明完成之后，使用readonly可以将变量转变为只读变量；如：
                varable=1
                readonly varable
                那么varable将会被转换为只读变量，其值将不能再被重新赋值，而且使用readonly的时候，变量名无需携带$符号；

            删除变量：
                使用unset命令可以删除变量；如：
                varable=1
                unset varable
                变量被删除之后将不能再次使用；unset命令不能删除只读变量；

            变量的作用域：
                在运行shell的时候，存在三种作用域的变量：
                    全局变量：在当前脚本中或者命令中定义，仅在当前shell实例中有效，在其他shell中不能访问局部变量
                    环境变量：操作系统的环境变量，所有shell都可以访问
                    shell变量：由shell设置的特殊变量，有一部分是环境变量，有一部分是局部变量；
            
            内置变量：
                $$    $：表示当前shell的进程id;访问方式：$$;
                $0    0：当前脚本的文件名
                $n    n：表示传递给脚本或者函数的参数，n是一个数字，表示第几个参数，如：第一个参数：$1;
                $#    #：传递给脚本或者函数的参数个数
                $*    *：传递给脚本或者函数的所有参数；
                $@    @：传递给脚本或者函数的所有参数；使用""包裹的时候和$*不同；被双引号包裹时，$*会把所有的参数作为一个整体输出，$@会把每一个参数以独立的方式输出；在没有双引号包裹的时候，都是以单个参数的形式输出；
                $?    ?：上个命令的推出状态或者函数的返回值；
            
            转义字符的替换：
                -e   使用-e即可对转义字符做转换；
                -E   使用-E表示不对转义字符做转换；默认不做转换；
            
            变量的替换：
                变量替换可以根据变量的状态来改变变量的值：
                ${var}	变量本来的值
                ${var:-word}	如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。
                ${var:=word}	如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。
                ${var:?message}	如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。
                若此替换出现在Shell脚本中，那么脚本将停止运行。
                ${var:+word}	如果变量 var 被定义，那么返回 word，但不改变 var 的值。    




            

