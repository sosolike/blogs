管道命令：|
    管道命令功能：将一个命令输出的内容发送给管道之后的命令进行处理
    管道描述：管道是linux上支持两个进程间单向通信的机制，即：将一个进程的正确的标准输出内容传递给管道之后的另一个进程；
    管道的特征：1：只能由一个进程单向传递给另一个进程；
               2：进程将消息传递给管道之后即结束，不再打印至标准输出；
               3：管道中的消息读取是一次性的，一旦被读取之后就从管道中抛弃；
               4：管道不处理传入消息进程的错误输出；只处理正确的消息输出；
               5：管道的右边必须具备能够接收标准输入流的能力；

重定向命令：> >> <
    >  ：将标准输出以及错误输出内容重定向至其他存储设备(文件等)，是覆盖原内容的操作
    >> ：将标准输出以及错误输出内容重定向至其他存储设备(文件等)，是追加内容的操作
    <  ：将数据来源为标准输入修改成文件或者其他设备的输入；

文本搜索及处理：grep
    grep命令用于对输入的数据流按照指定规则进行过滤搜索并打印至标准输出；

    参数意义：
        -i 忽略字符大小写
        -n 显示结果所在行号
        -c 只显示匹配到的行数
        -o 只显示符合条件的字符串而不是整行
        -v 反向匹配选择
        -e 实现多个选项的匹配，多个选项之间是or的关系
        -l 列出文件内容符合指定样式的文件名称，而不是匹配到的项
        -L 列出文件内容不符合指定的范本样式的文件名称，而不是没有匹配到的项
        -r 递归搜索子目录
        -d 不搜索子目录
    grep 也可以和正则表达式一起使用：
        grep的规则表达式:

        ^  #锚定行的开始 如：'^grep'匹配所有以grep开头的行。    

        $  #锚定行的结束 如：'grep$'匹配所有以grep结尾的行。    

        .  #匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。    

        *  #匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。    

        .*   #一起用代表任意字符。   

        []   #匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。    

        [^]  #匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。    

        \(..\)  #标记匹配字符，如'\(love\)'，love被标记为1。    

        \<      #锚定单词的开始，如:'\<grep'匹配包含以grep开头的单词的行。    

        \>      #锚定单词的结束，如'grep\>'匹配包含以grep结尾的单词的行。    

        x\{m\}  #重复字符x，m次，如：'0\{5\}'匹配包含5个o的行。    

        x\{m,\}  #重复字符x,至少m次，如：'o\{5,\}'匹配至少有5个o的行。    

        x\{m,n\}  #重复字符x，至少m次，不多于n次，如：'o\{5,10\}'匹配5--10个o的行。   

        \w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。   

        \W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。   

        \b    #单词锁定符，如: '\bgrep\b'只匹配grep。  
        [:alnum:]    #文字数字字符   

        [:alpha:]    #文字字符   

        [:digit:]    #数字字符   

        [:graph:]    #非空字符（非空格、控制字符）   

        [:lower:]    #小写字符   

        [:cntrl:]    #控制字符   

        [:print:]    #非空字符（包括空格）   

        [:punct:]    #标点符号   

        [:space:]    #所有空白字符（新行，空格，制表符）   

        [:upper:]    #大写字符   

        [:xdigit:]   #十六进制数字（0-9，a-f，A-F）  

定时任务：crontab
    功能：添加定时任务；
    参数：-l   :查看定时任务列表
         -e   :编辑定时任务
         -r   :删除定时任务
         -i   :再删除指定任务之前询问
         (上述操作都是默认在当前登录用户下进行的，也可以使用如下参数指定用户：)
         -u   :指定定时任务所属用户
    内容：
        # .---------------- minute (0 - 59)
        # |  .------------- hour (0 - 23)
        # |  |  .---------- day of month (1 - 31)
        # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
        # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
        # |  |  |  |  |
        # *  *  *  *  * user-name  command to be executed
        
        1：定时顺序：分 时 日 月 周；
        2：定时顺序取值：
            分：表示一小时的哪一分钟，取值范围在0-59
            时：表示一天中的几点，取值范围在0-23
            日：表示一个月中的几号，取值范围在1-31
            月：表示一年中的几月，取值范围在1-12
            周：表示周几，取值范围在0-6，周日可以是0也可以是7
            
        3：时间设置：
            *  ：表示所有值的意思，表示每一分钟，每一小时，每一天，每一月，周一至周日
            ,  ：表示集合列表，和的关系；如：对分钟设置：1,5表示每一小时的第1分钟和第5分钟需要执行任务；
            -  ：表示整数范围，在该区间内执行任务，如：对分钟设置：1-5表示每一小时的第1分钟至第5分钟每一个分钟点执行一次任务
            /n  ：表示间隔频率；如对小时设置：0-10/2”表示0点到10点每两小时执行一次；

        4：任务设置：
            定时任务的具体任务由两部分组成：命令 执行脚本文件
            备注：1：命令务必使用全路径；
                 2：待执行的脚本文件也必须使用绝对路径
                 3：待执行的脚本文件中如果有使用到目录文件位置，也需要使用绝对路径；
                 4：对于特殊的环境变量需要在脚本中引入环境变量的位置；

        5：定时任务的输出内容：
            调试状态下可以输出到文件，但是正式运行时需要设置丢弃内容；
            >/dev/null 2>&1 (>/dev/null表示将输出内容输出到dev/null(即丢弃掉)；2>&1表示将标准输出以及错误输出全部输出到/dev/null)

        6：定时任务的分类：
            定时任务分为两类：用户级定时任务以及系统级定时任务；
            1：如果是在/etc/crontab文件中设置的话需要设置改定时任务所属用户；在该文件中一般添加系统级定时任务，用户级定时任务不推荐在该位置添加；

            2：如果是通过crontab -e直接设置或者-u 指定用户 -e设置定时任务则无需在定时任务列表中指定任务所属用户；通过该方式添加定时任务之后会被保存在/var/spool/cron/crontabs目录下，文件名和定时任务用户名相同；

        7：服务管理：
            /etc/init.d/crond start/stop/restart/reload/status
            表示启动定时任务，停止定时任务，重启定时任务，重新加载定时任务配置文件，查看定时任务执行状态；
        