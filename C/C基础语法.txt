一：C语言基本特征：
    1：高级编程语言之一；
    2：C语言切近硬件，能够直接操作位，字节，地址；并且C程序文件会被编译成机器码来执行，因此执行效率整体很高；
    3：C语言是编译执行的编程语言：需要由编译器先编译链接成二进制可执行文件，再由操作系统执行；
    4：C语言仅仅支持面向过程编程，不支持面向对象编程！

二：C语言标准：
    1：C89和C90标准：
        C89来源：ANSI在1989年批准通过了C语言以及C语言标准库，因此称之为C89标准；
        C90来源：ISO在1990年采用ANSI批准通过的C语言及C标准库，因此称之为C90标准；
        C89标准和C90标准指的是同一个标准；
    2：C99标准：
        ANSI和ISO联合委员会在1994年开始制定新的C语言标准，并称之为C99标准，主要集中在国际化，弥补缺陷，提高计算实用性方面；但是编译器的支撑程度并不是很高；
    3：C11标准：
        2011年发布了新的C语言标准，称之为C11标准；


三：C语言执行流程：
    概述：语言执行方式：
        1：对于解释执行的编程语言：在执行时需要使用解释器逐行读取源代码文件，并执行得到结果；
        2：对于编译执行的编程语言：在执行时需要先使用编译器编译链接成可执行文件，然后由操作系统来执行；
        3：由于C语言是编译执行的编程语言，因此在执行之前需要先由编译器编译链接成为二进制可执行文件，才能够由操作系统执行；
    流程：
    C语言由源代码文件得到二进制可执行文件需要经过5个过程：1：编写C源代码文件；2：预处理得到预处理文件；3：编译得到汇编文件；4：汇编得到目标文件；5：链接得到可执行文件

    1：编写源代码文件：
        C源代码即由C语言编写的C源程序，一个C源程序可以有一个或者多个C源文件组成，每一个C源文件都以.c作为后缀；

    2：进行预处理，得到预处理文件：
        1：C源程序中会有#include包含头文件的代码以及宏的使用，预处理即为将#include包含头文件的代码替换成头文件的真正内容，以及将代码中的宏替换为宏的真正值；
        2：预处理命令：gcc -E ./test.c -o test.i
        3：预处理完成后得到预处理文件，预处理文件以.i作为后缀，仍然是一个文本文件，可以通过文本编辑器打开；预处理文件的大小会大于C源程序，原因在于#include代码全部被替换为头文件真正的内容；

    3：进行编译，得到汇编文件：
        1：此处的编译并非指将C预处理文件直接编译为二进制的目标文件，而是指将预处理文件转换为特定的汇编代码文件；
        2：编译命令：gcc -S ./test.c -o ./test.s
        3：编译完成之后得到汇编文件，汇编文件以.s作为后缀，仍然是一个文本文件，可以通过文本编辑器打开，内容为汇编代码；

    4：进行汇编，得到C源程序文件的二进制目标文件：
        1：汇编的过程是将编译完成后的汇编文件转换成二进制的目标文件的过程；
        2：汇编命令：gcc -c ./test.s -o ./test.o
        3：汇编完成之后得到汇编文件，以.o作为后缀，是一个二进制的目标文件；

    5：进行链接，得到最终的二进制可执行文件：
        1：一个可执行文件包括：启动代码，引用到的库函数代码，C源文件汇编得到的目标文件，C源程序中引用的其他C源文件汇编得到的目标文件，上一步汇编完成之后只是得到了一个C当前源文件的目标文件，还缺少启动代码、引用到的库函数代码、C源程序中引用的其他C源文件的目标文件，因此还不能作为可执行文件运行起来；
        2：链接的过程即为将当前C源文件汇编得到的目标文件，启动代码，库函数代码，其他C源文件的目标文件合并成为一个完整的可执行文件的过程；
        3：链接命令：gcc -o ./test.out ./test.o ./a.o ./b.o
        4：链接完成之后即可得到最终的可执行文件，在linux平台上以.out作为后缀，在windows平台上，以.exe作为后缀！
        5：特别注意：
            1：链接过程中导入库函数代码时，仅仅只会导入C源程序使用到的库函数代码，并不会将整个库的所有代码导入；
            2：如果一个C源程序是由多个C源文件组成的，在链接时需要将多个C源文件链接起来；

四：编译器：
    Linux上的常用的编译器为：gcc（最终可执行文件的后缀名为.out）
    windows上常用的编译器为：Cygwin（最终可执行文件的后缀名为.exe）

五：C语言基本语法规范：
    1：C源程序组成：
        1：一个C源程序可以由一个或者多个C源文件组成；
        2：一个C源程序的每一个C源文件都以.c作为后缀；
        3：一个C源程序必须要有并且只能有一个主函数；
        4：C程序执行时，从主函数开始，并从主函数结尾；
    2：C语言基本语法：
        1：以;作为语句结束符；
        2：以{}作为代码块确认符；
        3：以/* ... */作为多行注释，以//作为单行注释；
        4：标识符命名规范：
            1：以数字，字母，下划线组成；
            2：不能以数字开头；
            3：不能和关键字冲突；
            4：大小写敏感；
            5：避免使用_或者__开头；
            6：禁止使用拼音和英语混合式命名！
        5：一个C源文件结构上由两部分组成：1：函数、2：函数外部的代码
        6：表达式只能在函数中出现，函数外部只能出现语句，不能出现表达式；

六：主函数：
    1：一个C源程序必须要有，并且只能有一个主函数；
    2：C程序执行时，从主函数开始执行，并从主函数结尾处结束执行；
    3：主函数的名称只能是main，不能自定义为其他名称；
    4：主函数的定义方式：
        标准定义方式：
            1：int mian(void){/* ... */}
            2：int main(int argc,char *argv[]){/* ... */}
        非标准定义方式：
            3：int main(int argc,char *argv,char *envp){/* ... */}
    5：主函数的形参说明：
        1：形参可以直接声明为void，也可以按照标准定义方式携带参数，并且可以根据需要命名为其他名称，形参指的是使用命令行执行该程序时传入的参数！
        2：int argc(argument count:参数个数)：为0或者命令行执行该程序时传入的字符串个数，并且可执行文件本身的名称也算作一个参数，也需要计算进去！
        3：char *argv(argument vector)：是一个char指针数组，每一项都指向使用命令行执行该程序时传入的字符串参数，argv[0]指的是可执行文件的名称；传入的字符串参数可以通过argv[1]~argv[argc-1]获得！
        4：char *envp(environment pointer)：时指该C源程序的执行环境信息，每一项都指向一个字符串，字符串通常由"名称=值得方式组成"；也可以在程序中通过getenv()标准函数获取得到执行环境信息；
    6：主函数的执行结果：
        C源程序从主函数开始执行，也从主函数结尾处结束执行；在主函数执行结束后，会将执行状态以整数的形式传递给操作系统；
        1：返回值是0或者EXIT_SUCCESS，表示程序执行过程一切顺利；成功的执行完成！
        2：返回值是任何其他非0值，尤其是EXIT_FAILURE，则表示程序执行时出现问题；并未成功完整执行；
        3：mian函数并非必须调用return返回一个整数值，如果程序运行到main()的右' } '处，将会自动向执行环境返回状态值0；
        4：main()函数的结束等效于调用标准库函数exit(),main()的返回值作为exit()的参数；

七：C语言常用的输出方式：
    1：输出单个字符:
        putchar()       //putchar('c')
    2：输出字符串：
        puts()          //puts("string")
    3：格式化输出任意数据：
        printf()        
        1：基本使用方式：printf("格式化字符串",var1,var2,var3)
        2：格式化字符串组成：自定义字符、格式化字符；自定义字符将会原样输出，格式化字符将会按照顺序格式化待输出变量的值，并替换格式化字符；
        3：格式化字符组成：%[flag][width][.precision][type]
        4：flag：
            -：默认输出是右对齐，带上-之后则为左对齐；
            +：正数带上+号，负数带上-号；
            #：对于小数，强制输出小数点，对于八进制，十六进制，二进制，带上前缀；
            空格：用于数字：正数加空格，负数加负号；
        5：width：最小宽度限制，如果不足将会使用空格补齐，如果超出之后将会自动失效；
        6：.precision：
            对于 int，.precision 表示最小输出宽度
            对于 float，.precision 表示输出精度。
            对于 str，.precision 表示最大输出宽度。
        7：type:指定需要将变量格式化成指定的数据类型：
            字符/字符串：
                        %c          //格式化成字符类型
                        %s          //格式化成字符串类型
            浮点数：
                        %f          //格式化成单精度(float)类型的小数形式
                        %lf         //格式化成双精度(double)类型的小数形式
                        %e          //格式化成单精度(float)类型的指数形式
                        %le         //格式化成双精度(double)类型的指数形式
                        %E          //格式化成单精度(float)类型的指数形式(以大E表示)
                        %lE         //格式化成双精度(double)类型的指数形式(以小e表示)
            十进制整数：
                        %d          //格式化成十进制、有符号、int类型整数
                        %hd         //格式化成十进制、有符号、short类型整数 
                        %ld         //格式化成十进制、有符号、long类型整数
                        %u          //格式化成十进制、无符号、int类型整数
                        %hu         //格式化成十进制、无符号、short类型整数 
                        %lu         //格式化成十进制、无符号、long类型整数
            八进制整数：
                        %o          //格式化成八进制、无符号、int类型整数
                        %lo         //格式化成八进制、无符号、long类型整数
                        %ho         //格式化成八进制、无符号、short类型整数
            十六进制整数：
                        %x          //格式化成十六进制、无符号、int类型整数
                        %lx         //格式化成十六进制、无符号、long类型整数
                        %hx         //格式化成十六进制、无符号、short类型整数

八：C语言变量声明：
    C语言中变量使用基本规范：
        1：C语言中变量使用之前必须先声明，后使用；
        2：声明变量时，必须指明变量的数据类型，变量名称，如有必要可以赋上初值；
        3：变量声明时，即确定该变量的数据类型；
        4：在程序运行过程中，变量只能引用和其数据类型相同的数据，不能引用其他数据类型的数据；

    C语言中变量命名规范：
        1：C语言变量名必须遵守C语言标识符命名规范；
        2：C语言变量推荐采用小写+_分割式命名；如：var_name

    C语言中的全局变量和局部变量：
        全局变量：
            在函数外部声明的变量称之为全局变量；
            全局变量初始值：
                如果全局变量在声明的同时赋予初值则全局变量的初值即为所赋的值；
                如果全局变量在声明的同时并未赋值，则初值为0；
                全局变量只能在函数外部声明以及初始化，在函数外部不能参与任何赋值和运算表达式；
            全局变量分为普通全局变量和静态全局变量：
                普通全局变量：
                    即不含任何特殊含义的全局变量；
                声明方式如：  
                    int a=1;
                普通全局变量的生命周期：
                    普通全局变量的生命周期和当前程序的生命周期一致，程序运行完毕，其所占内存才能够释放；
                普通全局变量的作用域：
                    普通全局变量的作用域是组成c源程序的所有源文件；即多个c源文件中出现同名普通全局变量会冲突
                    普通全局变量可以在别的文件中通过extern引用;引用方式：extern date_type var_name

            静态全局变量：即作用域只在当前文件的全局变量：
                声明方式：
                    static int a=1;
                静态全局变量的生命周期：
                    静态全局变量的生命周期和当前程序的生命周期一致，程序运行完毕，其所占内存才能够释放；
                静态全局变量的作用域：
                    静态全局变量的作用域只在当前文件内部；不会和其他c源文件中的同名全局变量冲突！
                    静态全局变量 不 可以在别的文件中通过extern引用
        
        局部变量：
            在函数内部声明的变量称之为局部变量；
            局部变量的声明位置：
                    对于c89/c90规定，在任何执行语句之前，在块的开头声明所有局部变量；
                    对于c99和c++中则没有这个限制，局部变量声明可以放在首次调用之前的任意位置； 
            局部变量初始值：
                如果声明之后未赋值，只会为其分配指定大小的内存空间，值是未知的；
            局部变量作用域：
                只能为变量声明之后的代码块之内的代码中使用；
            局部变量分为自动局部变量和静态局部变量：
                自动局部变量 auto
                    1：声明方式如：int b=3; 等同于auto int b=3;
                    2：该变量只能在所声明的函数中使用；其他函数不能调用；
                    3：其生命周期和函数保持一致，函数执行完毕，变量所占用的内存即被释放；
                    4：自动局部变量如果不赋初值，其值是不确定的；
                静态局部变量 static
                    1：该变量只能在所声明的函数中使用；其他函数不能调用；
                    2：其生命周期和程序运行的生命周期一致，
                        1：在调用声明该静态变量的函数时，系统为该静态变量创建内存空间，但是只有程序运行完毕，该静态变量的内存空间才会释放！
                        即：静态局部变量的值在函数调用结束后不消失，而是保留原值，其所占用的内存空间也不释放！下次再调用该函数时，该变量已经有值，将不会再从新声明该变量！值就是上一次调用函数结束时为其赋的值；只有程序运行结束，该静态局部变量所占内存空间才会释放；
                    3：如果静态局部变量不赋初值，其值不确定；
                    4：声明方式：static int a=12;
                在函数内部定义的变量、数组、结构体、共用体等都称为局部数据。在很多编译器下，局部数据的初始值都是随机的、无意义的，而不是通常认为的“零”值。
九：运算规则：
    1：运算级别：
        赋值运算= < &&和|| < 关系运算 < 算术运算 < ! < ()
    
    2: ()运算符：
        优先级最高，表示优先计算()里面的运算表达式；
    
    3: 算术运算：
        运算符：+ - * / % ++ --
        使用范围：只能适用于数字
        运算方向：从左至右运算
        级别：仅次于逻辑运算中的' ! '
        备注： 
            对于除法：
                如果除数和被除数都是整数，那么得到的结果也是整数；
                如果除数和被除数都是小数，那么得到的结果也是小数；并且是double类型的小数；
            对于取余运算：
                C语言中的取余运算只能针对于整数进行，即%两边都必须是整数，否则编译器将会报错！
            对于自增自减运算：
                前自增在赋值时先运算后赋值；
                后自增在赋值时先赋值后运算；
    4：逻辑运算：
        运算符：&& || ！
        运算方向：从左至右
        级别：&& 和 || 小于关系运算符，！小于()大于算术运算符
        备注：运算结果是一个Bool值
    5：关系运算：
        运算符：< > <= >= == !=
        运算方向：从左至右
        级别：整体级别大于逻辑运算符的&&和||，小于算术运算符，但是同级别内< > <= >=的级别大于==和!=；
    6：赋值运算符：
        运算符：= += -= *= /= %= 
        方向：将右侧的值赋给左侧
        级别：级别最低；
    7：位运算：直接对二进制位操作的方式
        c语言包括6中位运算：& | ^ ~ << >>
        &：按照二进制位求交运算
        |：按照二进制位求或运算
        ^：按照二进制位求异或运算
        ~：按照二进制位取反
        <<:按照二进制位全部左移，高位丢弃，低位补0；
            （如果数据较小，被丢弃的高位不包含 1，那么左移 n 位相当于乘以 2 的 n 次方。）
        >>：按照二进制位全部右移，低位丢弃，高位补0或者1；最高位是0就补0，最高位是1就补1；
            （如果被丢弃的低位不包含 1，那么右移 n 位相当于除以 2 的 n 次方（但被移除的位中经常会包含 1） 
十：c语言流程：
    1：条件：
        1：if..else条件语句：
            if(表达式)
            {

            }
            --------------------------
            if(表达式)
            {

            }else if(表达式)
            {

            }else{

            }
            --------------------------
            if(表达式)
            {

            }else{

            }
        2:switch条件语句：
            switch(var){
                case 1:
                    code..
                    break;
                case 2:
                    code..
                    break;
                default:
                    code...
            }
            备注： 
                1：switch中只能是整数，不能是浮点数或者其余变量类型；
                2：case只能是整数，不能是浮点数或者其余变量类型
                3：多个分支有共同处理方式，则多个分支可以放在一起，只在最后一个分支结束时使用break语句；
                4：default不是必须的；当所有的case都无法匹配时，将会走进default;
                
        3：? :   三目运算符；

    3：循环：
        for(int i=0;i<n;i++)
        {

        }
        --------------------------
        while(表达式)
        {

        }
        --------------------------
        do
        {

        }while(表达式);(;一定要有)
        
    4：跳出循环：
        1：break;结束当前循环；
        2：continue;结束当前循环，并开始新的循环！

九：数据类型：
    基本数据类型：
        1：整型数据：

    

    
        


    


    


