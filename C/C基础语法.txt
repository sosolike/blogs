一：C语言基本特征：
    1：高级编程语言之一；
    2：C语言切近硬件，能够直接操作位，字节，地址；并且C程序文件会被编译成机器码来执行，因此执行效率整体很高；
    3：C语言是编译执行的编程语言：需要由编译器先编译链接成二进制可执行文件，再由操作系统执行；
    4：C语言仅仅支持面向过程编程，不支持面向对象编程！

二：C语言标准：
    1：C89和C90标准：
        C89来源：ANSI在1989年批准通过了C语言以及C语言标准库，因此称之为C89标准；
        C90来源：ISO在1990年采用ANSI批准通过的C语言及C标准库，因此称之为C90标准；
        C89标准和C90标准指的是同一个标准；
    2：C99标准：
        ANSI和ISO联合委员会在1994年开始制定新的C语言标准，并称之为C99标准，主要集中在国际化，弥补缺陷，提高计算实用性方面；但是编译器的支撑程度并不是很高；
    3：C11标准：
        2011年发布了新的C语言标准，称之为C11标准；


三：C语言执行流程：
    概述：语言执行方式：
        1：对于解释执行的编程语言：在执行时需要使用解释器逐行读取源代码文件，并执行得到结果；
        2：对于编译执行的编程语言：在执行时需要先使用编译器编译链接成可执行文件，然后由操作系统来执行；
        3：由于C语言是编译执行的编程语言，因此在执行之前需要先由编译器编译链接成为二进制可执行文件，才能够由操作系统执行；
    流程：
    C语言由源代码文件得到二进制可执行文件需要经过5个过程：1：编写C源代码文件；2：预处理得到预处理文件；3：编译得到汇编文件；4：汇编得到目标文件；5：链接得到可执行文件

    1：编写源代码文件：
        C源代码即由C语言编写的C源程序，一个C源程序可以有一个或者多个C源文件组成，每一个C源文件都以.c作为后缀；

    2：进行预处理，得到预处理文件：
        1：C源程序中会有#include包含头文件的代码以及宏的使用，预处理即为将#include包含头文件的代码替换成头文件的真正内容，以及将代码中的宏替换为宏的真正值；
        2：预处理命令：gcc -E ./test.c -o test.i
        3：预处理完成后得到预处理文件，预处理文件以.i作为后缀，仍然是一个文本文件，可以通过文本编辑器打开；预处理文件的大小会大于C源程序，原因在于#include代码全部被替换为头文件真正的内容；

    3：进行编译，得到汇编文件：
        1：此处的编译并非指将C预处理文件直接编译为二进制的目标文件，而是指将预处理文件转换为特定的汇编代码文件；
        2：编译命令：gcc -S ./test.c -o ./test.s
        3：编译完成之后得到汇编文件，汇编文件以.s作为后缀，仍然是一个文本文件，可以通过文本编辑器打开，内容为汇编代码；

    4：进行汇编，得到C源程序文件的二进制目标文件：
        1：汇编的过程是将编译完成后的汇编文件转换成二进制的目标文件的过程；
        2：汇编命令：gcc -c ./test.s -o ./test.o
        3：汇编完成之后得到汇编文件，以.o作为后缀，是一个二进制的目标文件；

    5：进行链接，得到最终的二进制可执行文件：
        1：一个可执行文件包括：启动代码，引用到的库函数代码，C源文件汇编得到的目标文件，C源程序中引用的其他C源文件汇编得到的目标文件，上一步汇编完成之后只是得到了一个C当前源文件的目标文件，还缺少启动代码、引用到的库函数代码、C源程序中引用的其他C源文件的目标文件，因此还不能作为可执行文件运行起来；
        2：链接的过程即为将当前C源文件汇编得到的目标文件，启动代码，库函数代码，其他C源文件的目标文件合并成为一个完整的可执行文件的过程；
        3：链接命令：gcc -o ./test.out ./test.o ./a.o ./b.o
        4：链接完成之后即可得到最终的可执行文件，在linux平台上以.out作为后缀，在windows平台上，以.exe作为后缀！
        5：特别注意：
            1：链接过程中导入库函数代码时，仅仅只会导入C源程序使用到的库函数代码，并不会将整个库的所有代码导入；
            2：如果一个C源程序是由多个C源文件组成的，在链接时需要将多个C源文件链接起来；

四：编译器：
    Linux上的常用的编译器为：gcc（最终可执行文件的后缀名为.out）
    windows上常用的编译器为：Cygwin（最终可执行文件的后缀名为.exe）

五：C语言基本语法规范：
    1：C源程序组成：
        1：一个C源程序可以由一个或者多个C源文件组成；
        2：一个C源程序的每一个C源文件都以.c作为后缀；
        3：一个C源程序必须要有并且只能有一个主函数；
        4：C程序执行时，从主函数开始，并从主函数结尾；
    2：C语言基本语法：
        1：以;作为语句结束符；
        2：以{}作为代码块确认符；
        3：以/* ... */作为多行注释，以//作为单行注释；
        4：标识符命名规范：
            1：以数字，字母，下划线组成；
            2：不能以数字开头；
            3：不能和关键字冲突；
            4：大小写敏感；
            5：避免使用_或者__开头；
            6：禁止使用拼音和英语混合式命名！
        5：一个C源文件结构上由两部分组成：1：函数、2：函数外部的代码
        6：表达式只能在函数中出现，函数外部只能出现语句，不能出现表达式；

六：主函数：
    1：一个C源程序必须要有，并且只能有一个主函数；
    2：C程序执行时，从主函数开始执行，并从主函数结尾处结束执行；
    3：主函数的名称只能是main，不能自定义为其他名称；
    4：主函数的定义方式：
        标准定义方式：
            1：int mian(void){/* ... */}
            2：int main(int argc,char *argv[]){/* ... */}
        非标准定义方式：
            3：int main(int argc,char *argv,char *envp){/* ... */}
    5：主函数的形参说明：
        1：形参可以直接声明为void，也可以按照标准定义方式携带参数，并且可以根据需要命名为其他名称，形参指的是使用命令行执行该程序时传入的参数！
        2：int argc(argument count:参数个数)：为0或者命令行执行该程序时传入的字符串个数，并且可执行文件本身的名称也算作一个参数，也需要计算进去！
        3：char *argv(argument vector)：是一个char指针数组，每一项都指向使用命令行执行该程序时传入的字符串参数，argv[0]指的是可执行文件的名称；传入的字符串参数可以通过argv[1]~argv[argc-1]获得！
        4：char *envp(environment pointer)：时指该C源程序的执行环境信息，每一项都指向一个字符串，字符串通常由"名称=值得方式组成"；也可以在程序中通过getenv()标准函数获取得到执行环境信息；
    6：主函数的执行结果：
        C源程序从主函数开始执行，也从主函数结尾处结束执行；在主函数执行结束后，会将执行状态以整数的形式传递给操作系统；
        1：返回值是0或者EXIT_SUCCESS，表示程序执行过程一切顺利；成功的执行完成！
        2：返回值是任何其他非0值，尤其是EXIT_FAILURE，则表示程序执行时出现问题；并未成功完整执行；
        3：mian函数并非必须调用return返回一个整数值，如果程序运行到main()的右' } '处，将会自动向执行环境返回状态值0；
        4：main()函数的结束等效于调用标准库函数exit(),main()的返回值作为exit()的参数；
    


    


    


