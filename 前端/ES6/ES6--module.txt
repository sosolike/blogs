module---模块
    ES5标准中是没有模块的概念的；ES6标准中才新加了模块的概念，通过模块，可以更好的对代码进行管理；
    1：模块本质上就是一个js脚本文件；但是并非任何脚本文件都是模块
    2：只有使用export抛出指定选项的js文件才能成为模块
    3：模块名就是js文件名；
    4：ES6的模块是编译时加载的，即ES6在编译时即可构建模块的依赖关系，并完成模块加载，效率要比commonJS的方式要高；
    5：ES6模块自动采用严格模式，无论是否加上"use strict"都将使用严格模式！
    6：ES6模块中顶层的this指向undefined，即不应该在顶层使用this；
    7：模块的优势：以更小的粒度，更合理的方式来管理代码块；

模块中自动采用严格模式：
    1：变量必须声明后再使用
    2：函数的参形参不能有同名属性，否则报错
    3：不能使用with语句
    4：不能对只读属性赋值，否则报错
    5：不能使用前缀 0 表示八进制数，否则报错
    6：不能删除不可删除的属性，否则报错
    7：不能删除变量delete prop，会报错，只能删除属性delete global[prop]
    8：eval不会在它的外层作用域引入变量
    9：eval和arguments不能被重新赋值
    10：arguments不会自动反映函数参数的变化
    11：不能使用arguments.callee
    12：不能使用arguments.caller
    13：禁止this指向全局对象
    14：不能使用fn.caller和fn.arguments获取函数调用的堆栈
    15：增加了保留字（比如protected、static和interface）

导出模块 ：export
    1：ES6中使用export来导出模块的对外接口(变量)；
    2：只有使用export导出的接口(变量)，才能被其他模块导入并使用，其余没有使用export的变量均不能被外部代码使用；

    3：导出语法：
        1：直接通过添加export前缀导出：即直接在变量、函数、类名前加上export关键字即可导出该接口；

            export function a(){}
            export var b="b";

        2：通过export列表导出：即定义变量、函数、类时不用添加export关键字，但是需要在模块文件的任意位置使用export列表的形式导出接口；

            export {a,b}  
        
        3：为接口添加别名：接口添加别名之后再导入的时候就需要使用别名导入；
            export {a as aa,b as bb}
    
    特性：
        ES6的导出是可以获取接口的实时值的；即调用了模块的接口a,如果a值发生改变，同样调用方也会改变；
        CommonJS模块的输出值则是值的缓存，不存在动态更新；
        export命令可以处于模块文件的任意位置，但是必须在模块的顶层，不能出现在代码块中，否则将会报错！

导入模块：
    在模块中可以通过export将需要给外部暴露的接口导出之后，其他模块就可以使用import来导入被导出的模块接口：
        1：导入指定的模块接口：
            import {a,b} from "module_name.js";  
                #注意a,b都是模块中的接口名；

        2：导入模块中的所有接口：
            import * as all_api from "module_name.js"  
                #注意，导入所有接口的时候必须给予名称；这个名称即是被导入接口组成对象的名称，通过该名称使用对象的语法即可访问被导入的接口；

        3：为导入的接口起别名
            import {a as aa,b as bb} from "module_name.js"

            别名的注意事项：
                1：为接口添加别名可以通过export在导出接口的时候添加，也可以通过import导入接口的时候添加；
                2：如果别名是通过export导出接口的时候添加的，在使用import导入的时候就需要使用别名导入；使用的时候也需要使用接口的别名；
                3：如果别名是通过import导入接口的时候添加的，则需要在调用的时候使用别名；
    导入的特征：
        1：导入语法import可以放在任意位置，但必须是顶层，不能放置语句块中，否则将会报错！
        2：多次执行import语句只会执行一次，并不会执行多次！
        3：导入模块的接口名不能再为其赋其他类型的值；

export default命令：
    export default特征：

        1：export default 本质上是导出一个名为 default 的 变量接口；该变量接口可以接收函数，也可以接收具体的值，但是不能接收变量；
            eg:
                export default function funName(){}
                或者
                export default 12;
            export default不能作用于变量,因为其本质上就是声明了一个default变量！

        2：export default 因为输出的是一个default变量，因此一个模块中只能使用一次export default；

        3：export default 输出的变量名是允许完全自定义的，因此使用export default导出接口，使用者可以不用知道接口的名称

        4：使用export default之后依然可以继续使用export来导出其他接口；

    导出方式：
        export default function fun(){}
        或者
        export default function (){}
        或者
         function fun(){}
         export default fun;

        函数即便有名称也只能在模块内部有效，对外本质上是将函数本体赋值给了default变量！
    
    导入模块接口：
        如果模块接口是通过export default导出的：则：
            import _ from "./module_name.js";  即可导入默认的接口；
        
        或者使用：
            import _ ,{a,b} from "./module_name.js";  即可导入默认接口以及其他接口；

            特点：
                1：_是可以自定义名称的；
                2：导入的接口名无需带上{}

    模块的继承：
        一个模块可以继承另一个模块：如a继承了A：则可以在模块a中使用：
           1：export * from 'A';             #导出模块A的所有可导出项
           2：export {attr} from 'A';        #只导出模块A的attr属性
           3：export {attr as at} from 'A';  #只导出模块A的attr属性，并重命名为at
        来继承模块A；
        本质上所谓的继承只是在当前模块中导出了指定模块所有的导出接口而已；也可以只导出指定模块的指定属性；

    跨模块常量：
        1：可以直接在模块中export常量：
            export const a=123;
        2：如果需要导入的常量文件较多，可以通过继承的方式将常量合并到一个文件中，然后仅导出指定文件即可：
                //user.js   export const user = "user_v";
                //db.js     export const db = "db_v";
          然后通过名为const_index.js的文件继承多个常量文件：
               //const_index.js
               export {user} from "user.js";
               export {db} from "db.js";
           在需要使用的地方通过import导入const_index.js文件即可； 


