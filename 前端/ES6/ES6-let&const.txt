ES6---let和const
let:
    let功能：用于声明变量；作用和var类似；
    let使用：let i = 0;(let 变量名 = 变量值)；
    let特征：
        1：let声明的变量将会绑定当前作用域：
            1.1：let所声明的变量只能在当前作用域以及当前作用域的子级作用域使用；
            1.2：let所声明的变量在声明之前不允许使用；
        2：let声明的变量不存在变量提升现象：
            2.1：es6标准中，如果有let声明语句，在let声明变量之前使用变量，将会直接报错；
            2.2：es5标准中，如果有var声明语句，在var声明变量之前使用变量，变量的类型为undefined，并不会报错；
        3：不允许重复声明：
            3.1：es6标准中，同一个块内无论使用何种声明方式(var或者let)，不允许声明两个名称相同的变量；
            3.2：es5标准中，同一个块内可以使用var声明两个名称相同的变量；
        4：不允许在函数内部使用let重新声明形参；
            4.1：es6标准中，在函数内部不允许使用let声明和形参同名的变量；
            4.2：es5标准中，在函数内部可以使用var声明和形参同名的变量；
        5：暂时性死区：
            5.1：es6标准中，如果在当前块内存在let声明变量的语句，那么无论父级作用域是否声明该变量，也无论父级作用域使用何种方式声明变量，在该块内let声明变量之前不允许使用该变量；
            5.2：但如果在该块内没有let声明变量的语句，而且该变量如果在父级作用域内已经有了声明，那么在当前块内该变量的值就是父级作用域的值；
            5.3：es5标准中，如果快中存在变量声明语句，在变量声明之前调用该变量，那么该变量的值将为undifend;
        6：增加块级作用域：
            6.1：es5标准中的作用域仅有全局作用域和函数作用域；
            6.2：es6标准中let本质上是增加了块级作用域；
const:
    const功能：声明一个只读常量；
    const使用：const n = "v";(const var_name = "value");
    const特征：
        1：const声明的变量是只读变量，所以在声明的同时就要为其赋值，且只能赋值一次；
        2：const声明的变量不存在变量提升现象；
        3：const在同一个块内不允许声明两个名称相同的只读变量；
        4：const不允许在函数内部声明和形参名称相同的只读变量；
        5：const也存在暂时性死区的现象；
    const本质：
        const本质上并不是保证变量的值不能被修改，而是变量指向的那个内存地址所保存的数据不能被改动；
        1：对于基本类型的数据(数字，字符串，布尔),由于值本身就保存在变量所指向的内存地址；因此也就可以认为该变量的值不能改变；
        2：对于复合数据类型(对象/数组)，由于复合数据类型的变量保存的是数据实际存放位置的地址，因此本质上是该变量所指向的地址不能改变，但是其指向的地址所指向的值本身是可以被修改的；因此如果const声明的变量指向的是符合类型的数据时，数据本身的值是可以改变的，但是不能改变该变量的指向；
        3：对于复合类型的数据，如果需要将数据本身冻结，则需要使用Object.freeze()方法；冻结之后复合数据本身不能再被修改；
            如const foo = Object.freeze({});此时如果foo.prop = 123;将会报错;

顶层对象：
    1：在浏览器窗口中js环境的顶层对象是指window对象，在nodejs中是指global对象；
    2：es5标准中，全局变量被认为是顶层对象的属性；
    3：全局变量作为顶层对象属性的缺陷：
        1：全局变量作为顶层对象的数据无发展编译期间就能够检测到变量未声明的错误，只有运行时才知道；
            (原因在于全局变量有可能是顶层对象的属性创建的，而属性的创建是动态的)
        2：全局变量容易被误创；
        3：全局变量的读写权限过大，全局内任意位置可读可写；不利于模块化编程；
    4：es6标准规定：
        1：为了向下兼容，var和function命令声明的全局变量依旧是顶层对象的属性；
        2：let、const、class声明的全局变量不属于顶层对象的属性；


