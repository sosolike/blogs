Promise 语义上来说是一种承诺，即对于某件事情未来发生结果的进行处理的一种行为保证；

在JavaScript中，异步操作的结果只能通过回调或者事件来进行处理；ES6中则提供了Promise回调的支持，可以通过同步代码的形式实现异步代码的编写；

Promise原理：
    Promise是一个对象，通过Promise执行某个行为可以获取到行为的执行结果；Promise会根据对执行结果调用统一的API进行处理；

Promise使用：
    基本使用流程：
        1：Promise是一个对象，需要将执行行为封装在该对象中，该行为的执行结果则可以通过resolve和reject向外暴露；
        2：Promise对象调用then方法可以获取到通过resolve以及reject向外暴露的执行结果；
        3：在then方法中可以针对执行结果做处理，进而通过同步的方式实现异步调用；
        4：可以通过catch来捕获resolve以及reject以及then中的异常；然后对该异常进行处理；

    Promise对象的创建：
        const promise = new Promise(function(resolve,reject){
            //do something
            if(/*执行成功*/){
                resolve(value);
            }else{
                reject(error);
            }
        });
        说明：
            1：Promise创建实例时需要封装异步操作逻辑；Promise创建实例对象时需要一个函数作为参数，该函数中即为异步操作逻辑；

            2：Promise实例对象的状态不受外界影响，Promise对象代表一个异步操作，有三种状态：pending(执行中)、fulfilled(已成功)、rejected(已失败)；只有异步操作的结果才能决定当前是哪一种状态，任何其他操作都无法改变这个状态；

            3：Promise实例对象的状态一旦改变就不会再次发生改变，状态的改变只有两种可能：pending->fullfilled和pending->rejected;

            4：Promise一旦建立就会立即执行，中途无法取消；如果不设置回调函数，内部发生的错误不会反映到外部，并且，当处于pending状态时，无法得知目前的进展；

            5：Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject,这两个参数本质上是两个函数，有Javascript引擎提供；

            6：resolve函数的作用是在异步执行完成且成功时的回调；reject函数的作用是在异步执行完成且失败时的回调；

            7：resolve函数在异步执行成功时会将异步操作结果作为参数传递出去；

            8：reject函数在异步执行失败时将异步操作报出的错误作为函数参数传递出去；

            9：如果在resolve和reject后面还有执行代码，那么这些代码执行完毕之后，resolve和reject方法才会调用，因为立即 resolved 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务；一般不将结果处理代码放在resolve和reject后面执行；

            10：无论是resolve还是reject都会返回一个新的promise实例；

            11：promise内部的错误不会影响到外面，无论promise发生何种错误，只要能进入resolve和reject就不会影响外部的处理；

    Promise执行顺序：
        1：Promise一旦创建完成，Promise中的同步代码会立即执行，如果Promise创建之前脚本有待执行的同步代码，那么会优先执行脚本中的同步代码，然后再执行Promise中的同步代码；
        2：Promise内部的同步代码执行完毕之后，将会立即执行脚本中剩余的同步代码；
        3：脚本中剩余的同步代码执行完毕之后，将会执行Promise中的回调；
        4：如果脚本中有setTimeout宏任务，那么该宏任务将会最后执行；
         http://www.cnblogs.com/geyouneihan/p/9127324.html

    Promise处理异步执行结果：
        Promise通过then方法来处理异步执行结果(为Promise实例添加状态改变时的回调函数)：
            promise.then(function(value){},function(error){})
            说明：
                1：两个参数均为回调函数；
                2：第一个回调函数接收resolve的结果，value即为执行成功后的异步执行结果；
                3：第二个回调函数接收reject的结果，error即为执行失败后的错误信息；
                4：第一个参数是必备参数，第二个参数是可选参数；
                5：then方法的原型为：Promise.prototype.then();即then方法是定义在原型对象上的；
        Promise也可以通过catch来处理错误信息：
            promise.catch(function(error){})
            说明： 
                1：error和then方法中的第二个回调函数的参数一样，都是reject返回的错误信息；
                2：该catch方法不仅会捕获promise对象中的错误，也会捕获到then方法中的错误；
                3：推荐使用该方法捕获错误，而不是实现then方法的第二个参数，原因在于then方法的第二个参数仅仅只能捕获promise对象的错误，不能捕获到then方法的错误；
                4：可以使用多个catch捕获错误；
                5：catch方法的原型为：Promise.prototype.catch();即catch方法是定义在原型对象上的；
                6：如果Promise状态已经变成resolved，再次抛出错误是无效的；
                7：如果外层并未指定catch方法的回调函数，Promise中的错误不会传递到外层，现象上不会有任何反应；

        Promise可以通过finally来设置必须要执行的代码：
            promise.finally(function(){})
            说明： 
                1：该方法无论promise中的异步操作执行成功或者失败都会执行；
                2：finally方法无参数；
        
        需要将现有对象转换成Promise对象时，可以使用Promise.resolve方法：
            Promise.resolve(object) #即可将一个对象转换为一个Promise对象；
        
        
        


