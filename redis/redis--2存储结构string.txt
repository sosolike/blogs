redis--string存储结构：
    一: string结构特征：(值是字符串)
        1: 基于key-vlaue式的存储方式；
        2: key：可以是任意字符组成的字符串；
           value：可以是任意字符组成的字符串；
        3: 每增加一条string,Redis即会在内存中增加一条key-value键值对；如下：
            key1 => value1
            key2 => value2
                .
                .
    二: string支持的操作命令：
        1: 设置类指令：
            1: SET:
                功能: 如果key不存在：向Redis中添加一条string结构的key-value键值对；如果key已存在，则修改key的值，并重新设置过期时间；
                原型: SET key value [ex秒数][px毫秒数][nx/xx]
                参数:   
                        key:  键名(任意字符组成的字符串)
                      value:  键值(待存储的字符串内容)
                         ex:  设置键值对过期时间(以秒为单位) 
                         px:  设置键值对过期时间(以毫秒为单位)
                      nx/xx:  xx:指定只有key存在时才能对key进行设置操作；nx:指定只有key不存在时才能对key进行设置操作！
              返回值:  如果设置成功返回ok,设置失败返回error以及错误原因！
            
            2: SETEX:
                功能:  如果key不存在：向Redis中添加一条string结构的key-value键值对,并以秒为单位指定该键值对的过期时间；如果key已存在，则修改key的值，并重新设置过期时间；
                原型: SET key seconds value
                参数:   
                        key:  键名(任意字符组成的字符串)
                    seconds:  设置键值对过期时间(以秒为单位)
                      value:  键值(待存储的字符串内容)
              返回值:  如果设置成功返回ok,设置失败返回error以及错误原因！

            3: PSETEX
                功能: 如果key不存在：向Redis中添加一条string结构的key-value键值对,并以毫秒为单位指定该键值对的过期时间；如果key已存在，则修改key的值，并重新设置过期时间；
                原型: SET key milliseconds value
                参数:   
                        key:  键名(任意字符组成的字符串)
               milliseconds:  设置键值对过期时间(以毫秒为单位)
                      value:  键值(待存储的字符串内容)
              返回值:  如果设置成功返回ok,设置失败返回error以及错误原因！

            4: SETNX
                功能: 当且仅当key不存在时，将key的值设置成value,并返回1；若给定key已经存在，则setnx不做任何动作，并返回0；
                原型: SET key value [ex秒数][px毫秒数][nx/xx]
                参数:   key:  键名(任意字符组成的字符串)
                      value:  键值(待存储的字符串内容)
                返回值: 设置成功返回1，设置失败或者未设置返回0；
            
            5: MSET
                功能: 向Redis中添加一组string结构的key-value键值对；
                原型: MSET key1 value1 key2 value2 .. keyN valueN
                参数:   key*:  键名(任意字符组成的字符串)
                      value*:  键值(待存储的字符串内容)
              返回值:  如果设置成功返回ok,设置失败返回error以及错误原因！

        2：获取类指令：
            1: GET
                功能: 从Redis中获取key的值
                原型: GET key
                参数: key:  键名
              返回值:  如果获取成功返回该键名对应的值；

            2: MGET
                功能: 从Redis中获取一组key的值
                原型: MGET key1 key2 key3 ... keyn
                参数:  key*:  键名(任意字符组成的字符串)
              返回值:  如果获取成功返回键值列表；
        3：删除类指令：
            1: DEL
                功能: 从Redis中删除某个key或者一组key
                原型: DEL key1 key2 key3... keyn
                参数: key*:  键名
              返回值:  返回删除成功的key的个数
        4：其他操作：
            1: INCRBY 
                功能: 如果key存在，将Redis中某个key的值加上增量increment；如果key不存在，则在0的基础上运算之后设置一个key-value键值对！
                原型: INCRBY key increment
                参数:      key*:  键名
                      increment:  自增值 
              返回值:  返回自增完成后的数值；
            2: DECRBY 
                功能: 如果key存在，将Redis中某个key的值减去增量increment；如果key不存在，则在0的基础上运算之后设置一个key-value键值对！
                原型: DECRBY key increment
                参数:      key*:  键名
                      increment:  自增值 
              返回值:  返回自增完成后的数值；
            3: APPEND 
                功能: 如果key存在，将Redis中某个key的值末尾追加上指定的内容；如果key不存在，则在空的基础上运算之后设置一个key-value键值对！
                原型: APPEND key value
                参数:      key*:  键名
                          value:  追加值 
              返回值:  返回追加完成之后的字符串长度
            4: STRLEN 
                功能: 返回指定key的值长度，如果key不存在直接返回0
                原型: STRLEN key
                参数:   key:  键名
              返回值:  返回指定key对应键值的长度！
            5: GETRANGE 
                功能: 获取指定key中字符串的子串[start,end]
                原型: GETRANGE key start end
                参数:   key:  键名
                        start:  起始位 
                        end:  结束位 
              返回值:  返回指定key指定区间的字符串值；
            6: SETRANGE 
                功能: 覆写指定key中指定起始位置往后的值；如果key不存在，那么start之前的位置将会用\x00填充！
                原型: SETRANGE key start value
                参数:     key:  键名
                        start:  起始位 
                        value:  需要覆写的值 
              返回值:  返回指定key的长度
            
            

                



    
    
    