redis--set存储结构：
    一：set存储结构特征：(值是一个列表)
        1：redis中对于set存储结构仍然采用的时候key-value键值对的方式管理；
        2：key：任意字符组成的字符串；
           value：一系列数据组成的一个集合；
        3: 每增加一set,Redis即会在内存中增加一条key-value键值对；如下：
            key1 => set1
            key2 => set2
                .
                .
        4: 每一个键值对都是唯一的，独立的，每一个set数据集合都由唯一的一个key来确定；
        5：set集合中的元素是无序的，并且不能重复的，set数据集合自身具备去重功能；
    二：set数据集合操作命令

    三：php中操作redis的set存储结构：
        phpredis地址：https://github.com/phpredis/phpredis#installation
        1：向Set数据集合增加数据：
            sAdd("key","value")
            功能：向set数据集合key中添加一项数据value；
            参数：key:set数据集合
                 value:需要被添加的值
            返回值：操作成功返回true，操作失败返回false

        2：从Set数据集合中删除数据：
            从set中随机删除数据：
                sPop("key")
                功能：从set集合中随机删除并返回一个数据
                参数：key:set数据集合
                返回值：操作成功返回被删除的数据，操作失败返回false
            从set中删除指定的数据：
                sRem("key",'member1','member2')/sRemove("key",'member1','member2')
                功能：从set集合中删除指定数据
                参数：key:set数据集合，member需要被删除的数据
                返回值：操作成功返回被删除的数据个数
        3：从Set集合中获取数据：
            随机返回一个或者多个数据，但不删除：
                sRandMember("key",[n])
                功能：随机返回一个或者多个数据，但不删除
                参数：key:set数据集合
                     n:可选值，代表需要随机返回几个数据，如果不填默认为1；
                返回值：操作成功将会返回数据(如果是n为1或者不填，则返回一个数据，否则返回一个数组)，否则返回false 
            返回set集合中的所有值：
                sMembers("key")/sGetMembers("key")
                功能：返回set集合中所有的元素值
                参数：key:set数据集合
                返回值：操作成功将会返回数据(返回一个数组)，否则返回false   

        4：检测是否包含指定值：
            sIsMember("key","member"), sContains("key","member")
            功能：检测指定数据集合中是否有指定数据；
            参数：key:set数据集合，member需要被检测数据
            返回值：如果存在返回true，如果不存在返回false
        
        5：返回set集合中的元素个数：
            sCard("key")/sSize("key")
            功能：返回set集合中元素的个数
            参数：key:set数据集合
            返回值：返回元素个数
            
        6：移动操作：
            sMove("key_src","key_dist",'member')
            功能：将key_src中的member移动到key_dist中
            参数：key_src:源数据集合；key_dist数据集合,member需要移动的元素；
            返回值：操作成功返回true，操作失败返回false；

        7：交并差操作：
            获取两个数据集合的并集并返回：
                sUnion("key1","key2","key3"...)
                功能：将多个集合的数据合并到一个集合中，并去重之后返回
                参数：key:set数据集合名称
                返回值：返回合并之后的数据(数组)
            获取两个数据集合的并集并存储在新的集合中：
                sUnionStore('dist',"key1","key2","key3"...)
                功能：将多个集合的数据合并到一个集合中，并去重之后保存在新的集合中
                参数：key:set数据集合名称
                返回值：返回合并之后的数据并保存在dist中

            
            获取两个数据集合的差集并返回：
                sDiff("key1","key2","key3"...)
                功能：将多个集合的差集合并到一个集合中，并去重之后返回，差集是按照参数由前到后的顺序求得
                参数：key:set数据集合名称
                返回值：返回差集之后的数据(数组)
                特别注意：求差集时注意集合的顺序
            获取两个数据集合的差集并存储在新的集合中：
                sDiffStore('dist',"key1","key2","key3"...)
                功能：将多个集合的数据的差集存到一个集合中，并去重之后保存在新的集合中，差集是按照参数由前到后的顺序求得
                参数：key:set数据集合名称
                特别注意：求差集时注意集合的顺序
                返回值：返回差集之后的数据并保存在dist中


            获取两个数据集合的交集并返回：
                sInter("key1","key2","key3"...)
                功能：将多个集合的交集合并到一个集合中，并去重之后返回，交集是按照参数由前到后的顺序求得
                参数：key:set数据集合名称
                返回值：返回交集之后的数据(数组)
                特别注意：求交集时注意集合的顺序
            获取两个数据集合的交集并存储在新的集合中：
                sInterStore('dist',"key1","key2","key3"...)
                功能：将多个集合的数据的交集存到一个集合中，并去重之后保存在新的集合中，交集是按照参数由前到后的顺序求得
                参数：key:set数据集合名称
                返回值：返回交集之后的数据并保存在dist中
                特别注意：求交集时注意集合的顺序

