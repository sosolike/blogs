redis主从复制：
  1：redis复制特性
		1：redis只支持主从复制，不支持主主复制；同一个redis主服务器可以将数据同步给多个从服务器；
		2：redis主从复制默认状态下，主从读写分离；可以让主服务器响应写命令（也可响应读命令），从服务器响应查询命令；以此来提高redis的性能；
		3：主从复制，redis主服务器会实时将写命令推送给从服务器；
  2：开启从服务器方式：
    1：通过更改配置文件，在从服务器启动时会读取配置文件中的配置项，连接主服务器；
        slaveof masterip masterport
            设置当本机为从服务器时需要连接的主服务器ip和端口，改配置项配置后，启动redis时会自动从master进行数据同步；
        masterauth <主服务器密码>
            如果设置了主服务器密码，并填写了该配置项，则从服务器连接主服务器时会自动拉去该密码；
    2：通过发送命令来连接主服务器：
      |--SLAVEOF host port来连接主服务器；
        注意：其他配置：
        |--可以配置传输开始的延迟时间，等待更多的服务器连接上来；
  3：从服务器连接主服务器进行复制的步骤：
    |--1
			|--主服务器：处于等待命令的状态
			|--从服务器：连接主服务器，发送命令；
		|--2
			|--主服务器：收到命令后开始创建子进程，然后执行BGSAVE命令，并使用缓冲区保存BGSALVE执行期间所有客户端发来的写命令；
			|--从服务器：根据配置选项决定是继续以现有的数据向外提供服务还是直接向发送请求的客户端返回错误；
		|--3
			|--主服务器：BGSAVE执行完毕之后将快照发往从服务器，并在发送期间继续使用缓冲区记录所有的写命令；
			|--从服务器：丢弃现有的旧的数据（如果有的话）开始载入主服务器发来的快照文件，同时在加载新数据的这段时间停止对客户端响应；
		|--4
			|--主服务器：快照发送完毕，开始向从服务器发送存储在缓冲区里面的写命令；
			|--从服务器：完成快照文件的加载，开始正常接受客户端命令请求，以及主服务器发来的写命令；
		|--5
			|--主服务器：缓冲区存储的写命令发送完毕，从现在开始主服务器每接受一个写命令就会将相同的写命令发往从服务器；
			|--从服务器：执行主服务器发来的所有写命令，以及客户端发来的查询请求；
  4：主从复制过程中的问题：
		|--1：如果主服务器的内存不够将会影响创建子进程和缓冲区存储写命令；因此一般让主服务器只是用50%到60%的内存；剩下的用来执行BGSAVE命令和创建记录写命令的缓冲区；
		|--2：如果用户使用的是SLAVEOF配置选项，那么redis再启动的时候首先会加载当前可用的任何快照文件或者AOF文件；然后连接主服务器执行复制过程；
		|--3：如果使用的是SLAVEOF命令，那么redis会立即尝试连接主服务器；连接成功之后执行复制过程；
		|--4：当一个主服务器被多个从服务器连接的时候会有以下情况：
			|--1：当BGSAVE命令还未被执行，那么所有的从服务器将收到完全相同的快照文件，和相同缓冲区命令；
			|--2：如果BGSAVE命令正在执行或者已经执行完毕，主服务器会先进行当前从服务器的赋值工作，完成之后与新服务器进行新的复制步骤；
		|--5：当从服务器开始接收主服务器发来的快照文件的时候从服务器上面的数据将会被清空！，并停止响应连接从服务器的客户端；  
  5：主从链：
		|--从服务器也可以有自己的从服务器；并且从服务器向自己的从服务器执行复制步骤的时候，和主从复制步骤一样；
			|--当主服务器负载比较严重的时候，主服务器有可能会无法及时可快速的更新所有从服务器，或者因为重新连接和重新同步从服务器而导致系统超载；
			|--解决方法是：可以创建一个由主从服务器组成的中间层来承担主服务器的复制工作；
  6：复制过程的注意事项：
    |--检测从服务器是否已经将主服务器的命令进行同步：
		|--在发送实际写命令的时候还需要在发送完成之后发送一个虚构值，通过查询从服务器中是否存在虚构值进而确认同步是否成功；
		|--如果建立的主从复制链，一定要禁止相对主服务器实例自动重启，特别是在禁止主服务器持久化的情况下，主服务器一定不能自动重启；如果保持主服务器示例的自动重启，极有可能造成主服务器和从服务器数据全部被清空；
        |--要保证主服务器的内存空闲；
        |--保证主从服务器带宽足够；
        |--尽量使从服务器同时连接主服务器执行复制操作；避免主服务器反复执行BGSAVE命令；
    |--全量复制和部分复制：
      |--部分复制的条件：
          1：各个redis服务器的run_id不能发生变化，不能丢失；
          2：redis版本>=2.8
          （可以通过info server查看runid）
   无磁盘复制：
			通常来讲，一个完全重新同步需要在磁盘上创建一个RDB文件，然后加载这个文件以便为从服务器发送数据。
 
			如果使用比较低速的磁盘，这种操作会给主服务器带来较大的压力。Redis从2.8.18版本开始尝试支持无磁盘的复制。
			使用这种设置时，子进程直接将RDB通过网络发送给从服务器，不使用磁盘作为中间存储。 

redis服务器主从切换：
  主从手动切换：
  	主服务器挂掉之后，对从服务器执行slaveof no one与原来的主服务器断开连接；此时改从服务器将变为主服务器；
  	当主服务器恢复之后，切记将从服务器的数据持久化到磁盘上，并将改rdb文件复制到原来的主服务器，切记！
 主从自动切换：
 	1：版本要求>=2.8.2.8版本之后提供了sentinel主从切换方案，用于管理多个redis实例，实现主从自动切换；
	2：sentinel负责三个方面的任务：
		1：监控：sentinel会不断监控主从服务器，检测其是否正常工作；
		2：提醒：当监控的某个redis服务器发生故障的时候，sentinel可以向管理员发送通知；
		3：自动故障迁移：当一个主服务器不能工作时，sentinel会进行一次故障迁移，会将失效的主服务器的一个从服务器升级为新的主服务器；。并让其他失效主服务器的其他从服务器改为复制新的主服务器；
		4：集群中在主服务器失效之后，如果客户端继续访问失效的主服务器时，sentinel会向客户端返回新的主服务器地址，进而保证集群的可用性；
	3：sentinel是一个分布式系统，可以在一个架构中运行多个sentinel进程；
	4：启动sentinel：
		1：配置sentinel的配置文件：
			
			sentinel monitor mymaster 127.0.0.1 6379 2 //指示sentinel去监视一个名为mymaster的主服务器；且至少需要两个sentinel同意，这个主服务器才能被判定为失效；
			sentinel down-after-milliseconds mymaster 60000  //指定sentinel判定服务器失效需要的毫秒数；
			sentinel failover-timeout mymaster 180000
			sentinel parallel-syncs mymaster 1

			sentinel monitor resque 192.168.1.3 6380 4
			sentinel down-after-milliseconds resque 10000  
			sentinel failover-timeout resque 180000
			sentinel parallel-syncs resque 5   //指定进行故障转移的时候需要多少个服务器需要对新的主服务器进行同步，数字越小最终耗时血多，但是数字越大，同事会有较多从服务器阻塞；
			
  	5：主观下线和客观下线：
单个sentinel判定主服务器失效，称为主观下线；
多个sentinel判定主服务器失效，称为客观下线； 该类型只适用于主服务器，对于其他类型的redis实例，sentinel判定为失效的时候是不需要和其他sentinel协商的；

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
