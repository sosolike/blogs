1:php简介：
    解释执行的脚本语言；底层为c；支持c/c++编译扩展；
    一般用于中小型整站开发；
    数据接口开发
    前端开发
    与swoole扩展通用可以进行异步网络编程
2：php标记
        1：<?php code... ?>
	2：<script language="php">code... </script>
	3：<% code... %>
        4：<? code... ?>
        其中：
            第1,2种是可以直接使用的；第3,4中必须在php.ini配置文件中进行配置之后才可使用；
	    默认并推荐使用第一种，并且在php代码嵌入其他语言中的时候标记必须前后封闭
            在纯php代码中，后面的标记推荐省略；
3：注释：
        1：#或者//单行注释
	2：/* 多行注释 */  
4：php中的数据类型
    1：Boolean 布尔类型
	    1：简写bool
		--数据类型转换：--
            2：自动进行转换：除过"false",FALSE,0,0.0,null,'',"",array();NAN,undfined以外，其余均为true;
            3：手动转换：settype("bool",$type);settype("boolean",$type);
    2：Interger 整数类型
		1：从5.4版本起，整数值可以是十进制，八进制，二进制，十六进制；
		2：要使用八进制表达，数字前必须加上 0（零）。要使用十六进制表达，数字前必须加上 0x。要使用二进制表达，数字前必须加上 0b。 
		3：如果运算结果或者数字本身超出了int型的表示范围，将会以float来表示；
		4：php是不支持无符号整数的；
		--类型转换--
            		5：数字类型的字符串在参与运算时是默认可以自动转换为int型数字的，
            		6：也可以使用intval($var)函数进行转换；
            		7：settype("int",$var);settype("integer",$var);
    3：Float 浮点型
		1：浮点数精度有限，误差较大，无法比较两个看起来一样的浮点数是否相等；
		2：如果需要使用更高精度的数字，应该使用任意精度数学函数（BC数学函数扩展）或者gmp函数（数学扩展函数）
		3：switch里面不支持使用浮点数；
		类型转换
            		4：小数类型的字符串在参与运算时会自动转换成浮点型
            		5：int型数值超出范围也将自动转换为浮点型；
            		6：settype("float",$var);settype("double",$var);
           		7：也可使用floatval($var);进行转换
    4：String 字符串
		1：代表符号：''/"";需要表识单双引号自身则使用\"；
		2：单引号效率更高；没有特殊需求是推荐使用单引号；
        3：双引号可以识别php符号；
            简单语法
                3：在双引号中会尽可能连接$后面的字符组成一个合法的变量名；解析php变量；
                4：在双引号里面同样可以直接解析数组索引和对象的属性；"asfdafsd$abc[1]","asdfas$obj->th"；
            复杂语法
                3：可以通过{}来明确变量名的范围；
                4：可以通过{}来识别数组的索引和对象的属性，要求$符号必须紧挨着{$才能够识别$符号；"asfdafsd{$abc[1]}","asdfas{$obj->th}"；
		    特别注意：{}里无法识别常量和静态变量；
		4：php里面只有字符串类型，没有字符类型；
		5：转义字符：
			\t,\r\n\v\f\"\$\'
		6:字符串可以通过.号连接起来；并且字符串.号后面不一定要求必须是字符串，如果是其他数据类型会自动转换为字符串；
		--类型转换--
			1："".$var
			2：strval($var);
			3：另外在需要字符串的地方会自动转换为字符串；比如echo，print等；特别注意;true转换成字符串是"1",false转换成字符串是"";
			4：settype("string",$var);
	5：Array 数组
		php中的数组是一个有序映射
			1：php中的数组在使用时并不需要声明类型和长度；一个数组中可以放置不同类型的数据
			2：php数组有三种类型：索引数组，关联数组，索引关联数组；尽量避免使用索引关联数组；
			3：php中的数组长度可以动态改变；
			4：php中的数组可以当做普通的数组来使用，也可以当做：栈，散列，字典，集合，队列；
		key的一些注意事项
			5：如果下标是布尔值，那么该索引以前的索引全部会被转换为布尔值，并由后至前进行覆盖；
			6：浮点数会被存储为整数；如8.7会被存储为8；
			7：null会被转换为空字符串；
			8：不要给键设置无意义的内容；
			9：尽量不要出现索引关联数组；
	 	数组的创建：
			1：array();创建空数组
			2：array(2);数组的内容只是一个数字的时候，该数字代表数组的长度；
			3：array(1,2,"qwe");不指定键的时候默认是一个索引数组；
			4：array("a"=>1,"b"=>2);创建一个关联数组；
		数组中值的引用：
			$arr = array();
			$arr[index];
        数组的合并：
            array_merge($arr1,$arr2);
            array_merge_recursive($arr);  
		类型转换
		    1：对于任意 integer，float，string，boolean 和 resource 类型，如果将一个值转换为数组，将得到一个仅有一个元素的数组，其下标为 0，该元素即为此标量的值。
		    2：如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；私有变量前会加上类名作前缀；保护变量前会加上一个 '*' 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为
    6：Object 对象； 
	7：Resource 资源类型 ；保存外部资源的一个引用；
	8：null;空类型；在php中是标量；被赋值为null或者尚未被赋值，或者被unset掉都将是null;null是标量值，和undefined以及0均不相同；	
5：数据类型操作：
    1：不改变数据本身的数据类型转换
        intval();
        floatval();
        strval();
        (type)$var;
    2:改变数据本身的数据类型转换
        settype("type",$var);
    3:获取数据类型
        gettype($var);
        is_xxx($var)--is_array()  is_double()  is_float()  is_integer()  is_long()  is_object()  is_real()  is_string()
    4:进制之间转换
        二进制：bin
		八进制：oct
		十进制：dec
		十六进制：hex
		1：转换时只能以10进制为基准进行转换；
		2：转换函数均为decXXX()或者XXXdec();	octdec()/dechex();
		3：通用转换：base_convert($number,8,10);		
6：php中的常量：
    1：基本规则：
		无作用域限制；
		常量名多用大写加下划线分割的方法(小写也可，不推荐)；
		存储区域在静态存储区域；
		尽量少自定义常量；多使用系统常量；
		常量名不能使用表达式；
    2：常量声明
		define('常量名',常量值);
		const 常量名 = 常量值
    3：两种声明常量的方式区别
        define:
			1：默认区分大小写；第三个参数为true则区分大小写，为false则不区分大小写；
			3：常量值可为表达式
			4：不区分命名空间
		const:
			1：默认区分大小写，无法更改；
			3：常量值只能为确定的值，不能为表达式；
			4：可识别命名空间
    4：常用的系统常量：
        __FILE__
        __LINE__
        __DIR__
    5：检测常量是否已经定义：
        defined("常量名");
7：php中的变量
    1：普通变量：
        1：命名：
            1：由数字字母下划线组成，数字不能开头；
			2：多用于小写，多用下划线分隔式命名法命名；
			3：前面必须带有$符号；
			4：变量名严格区分大小写；
        2：php中的变量特性：
            1：php为弱数据类型语言，因此使用变量时无需声明数据类型；
            2：变量无需先声明后使用，但是推荐先声明后使用；
            3：同一个变量前后可以引用不同数据类型数据；
            4：$$name:可变变量；变量名称可变；一般用于处理名称有规律的数据；
            5：根据变量作用域分：可分为全局变量、局部变量
                全局变量只能在函数外部使用；
                局部变量只能在函数内部使用；
        3：常见变量操作
            isset($name)：检测变量是否存在以及是否有值；值可以是空字符串。空数组，null;
			empty($name);变量不存在或者为空都会是true;值为空字符串和空数组，以及null的时候返回true;
			unset($name)：删除变量对数据的引用；在面向对象中也可以用来销毁对象；
			$name1 = $name2：直接赋值；
			$name1 = &$name2：引用赋值；
        4：直接赋值和引用赋值的区别：
            $name1 = $name2：直接赋值；
				在赋值之初只是增加对变量$name2的一个引用，直到$name1或者$name2的值发生改变的时候才会为$name1分配内存空间；
				$name1和$name2保持相互独立，并占有不同的内存空间；
			$name1 = &$name2：引用赋值；
				系统不会为$name1分配内存空间,仅仅增加对$name2的引用；这些引用中无论哪个的值发生变化都会影响到其他引用；
    2：预定义变量：
    预定义变量的特性：
		1：所有的预定义变量均是数组；
		2：所有的预定义变量作用范围是当前页面；
		3：所有的预定义变量只能取值，或给其内容复制，绝对不能直接赋具体值；
    常见预定义变量：
    	1：$_GET
			1：用于数据的传递；是HTTP协议的一部分；在php中使用get进行数据传递方式灵活多变；应用最为广泛；
			2：$_get：通过将需要传递的数据追加至URL后面组成新的URL地址，进而传递数据；
			3：接收方式：$_GET["data_name"];
			4：传递方式：
				<form action = "" method = "get"><form>//通过表单传递数据；
				<a href="url?name = value&name = value"></a>
				window.location.href = "url?name=value&name=value"
				window.location.assign("url?name=value&name=value")
			5:特征：
				1：数据有长度限制；因为url本身是有长度限制的；
				2：不适合传递密文信息；因为get传值会直接将值附加在URL后面；
				3：可以通过链接传值，传值更加自由灵活；
				4：不可以上传文件
				5：不能主动对数据加密
		2：$_POST:
			1：用于数据的传递，一般专用于传递表单数据；使用方式较为限制；
			2：接收数据：$_POST["data_name"]; 或者file_get_contents("php://input")
			3：发送数据方式：
				<form action ="" method="POST">
				curl使用post方式请求；
				ajax使用post方式请求；
			4：特征：
				1：可以上传文件；
				2：数据量可以设置，且较大；
				3：一般多用于上传表单数据，所以限制较大，不够灵活；
				4：可以对数据加密上传；
				5：数据传递较为安全；
				6：http协议中post方式主要用来修改数据；
		3：$_REQUEST:
			1：全局数组变量，一般多用于接收由get/post上传的数据；
			2：get/post/session/cookie均可用request接收，但此时数据引用名称不能重名；
			3：本质是全局数组，作用域是全站；
			4：接收方式：$_REQUEST["data_name"];
		4:$GLOBALS:
			1:全局数组变量，包含了当前页面全部的全局变量;
			2:主要作用：将全局变量包装为超全局变量；
			3：两种方式：
				1：$GLOBALS["data_name"];
					此种方式可以在函数内部使用函数外部的变量，在函数内部对函数外部的变量做了修改将会保持；因为引用确确实实是外部所声明的变量；
				2：global $name
					此种方式可以在函数内部声明函数外部的同名变量；则可以使用外部同名变量的值；但是此时所做的修改将不会保持；因为此种方式只是声明了一个指向外部变量的引用；因此并不会改变外部变量真正的值，本质上来说并不是同一个变量；
		5：$_SERVER:
			1：可以获取本次对服务器请求时服务器的相关信息；请求时间的获取最好是该预定义变量获取而不是time();
			2：信息以关联数组的方式保存；
        6：$_FILE:
            1：存储上传文件的信息；
7：常用的php输出方式：
    echo:
		1:输出语句；而非函数，可以输出变量，常量，表达式的值；无返回值；效率较高，比print稍快；
		2：输出逻辑：
			输出对象如实表达式，将会先计算表达式的值，再将结果转换为字符串，然后输出；
	print:
		1:只能输出一个字符串，有返回值，始终返回1；
		2：同样print是语句不是函数；
	print_r():
		1：输出函数；打印变量基本信息；
		2：如果是基本数据类型则直接输出变量值；如果是array，将会打印其键值详细信息；object和array类似；
		3：print_r()会将指针移至最后，使用reset可将指针回到开始处；
	var_dump():
		1：输出函数；打印变量的详细信息；
		2：基本类型将会打印其数据类型和具体值；
		3：数组合对象将会打印其结构信息；   
8：运算：
	1：算术
		1：具备加减乘除求余运算；
		2：具备自增自减运算；
		3：前自增和后自增不一样，注意运算顺序不同会导致不同的结果；
		4：自增/自减运算支持数字。字符串，null；基本运算仅支持数字；
		5：自增自减运算中字符串按照ascll码进行，null当做0进行；
	2：比较：
		1：有大于，小于，等于，全等于，不等于，大等，小等；
		2：全等要求数据类型和值均一致的情况下才能认为是全等，等于只要值相同即可认为相等；
		3：比较双方有布尔值得全部转换从布尔值比较，true>false;
		4：没有布尔值的，如果是数字字符串比较按照数字大小比较，
		5：如果是普通字符串的，按照位进行比较；
		6：数字字符串和数字在一起按照数字比较；
	3：逻辑
		1：与或非：&& || ！；
		2：注意逻辑短路问题；
		3：结果是布尔值；
	4：按位
		&：按位与
		|：按位或
		^：按位异或
		~：按位取反
		<<：左移：符号不会被保留，相当于乘2；
		>>：右移：符号会被保留，相当于除2；
		前两个的计算结果是布尔值，后四个的计算结果是算术值；
	5：特殊：
		1：.连接两个字符串；
		2：[] 数组运算符；
9：流程：
	条件：
		1：条件：
				if(){};
				if(){}else{};
				if()else if(){}else{};
		2：条件2：
			？ ：
				eg: $res = 1 > 0 ? "ok" : "not ok";
		3：条件3：
			switch($value){
			}
			1：多个case具有相同的处理方式可以重叠；
			2：default根据需要添加；并且不需要break;
			3：switch不支持浮点数；
	循环：
		1:for循环：
			for(i=0;i<10;i++){
				//循环体
				}
		2:foreach：
			foreach(array as $value){};
			foreach(array as $key => $value){};	
			遍历数组最好使用foreach:遍历速度会更快；尽量不要使用while;
		3:while循环：
			i=0;
			while(i<10){
				#循环体；
				i++;
			}
		4：do~while循环：
			i=0;
			do(){
				i++
			}while(i<10);

		5：循环嵌套中的注意事项；
				1：不要嵌套层次太深；
				2：不要在循环中执行耗内存和IO操作；
		6：break/continue;	
			1：break:跳出当前循环；执行循环之后的代码；
			2：continue:终止当前循环，开始新的循环；
		

    
