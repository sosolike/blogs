1：php中的错误和异常：
    1：php中的错误和异常不同，内部php函数主要使用错误报告，只有现代面向对象的扩展使用异常；
    2：php中的异常Exception继承自Throwable;在php5中Exception为所有Exceptions的基类；在php7中为所有用户异常类的基类；在php7之前，Exception并未实现Throwable;

    2：php中Error的层次结构并不继承自Exception，而是同样继承自Throwable接口；

2：php中错误和异常的抛出：
    1：php中的代码如果发生异常，是无法自动抛出的，需要依靠手动抛出；
    2：手动抛出异常：throw new Exception('msg'); 即需要通过throw关键字抛出一个异常类的实例；
    3：手动抛出错误：trigger_error(string $error_msg[,int $error_type=E_USER_ERROR]):bool；该函数可以手动抛出一个用户级别的error、waring、notice

3：php中的错误常量(整数)：
    E_ERROR     :致命的运行时错误，会导致停止执行脚本
    E_WARNING   :运行时警告，不会导致停止执行脚本
    E_NOTICE    :运行时通知，不会导致停止执行脚本

    E_CORE_ERROR   :php初始启动期间发生的致命错误，类似于E_ERROR，区别在于该错误由php核心发出；
    E_CORE_WARNING :php初始化期间发生的警告，由内核发出；

    E_COMPILE_ERROR  :致命的编译时错误，由Zend脚本引擎生成的；
    E_COMPILE_WARNING:编译时警告，由Zend引擎生成；

    E_USER_ERROR    :用户级别的致命错误，由php函数trigger_error()生成；
    E_USER_WARNING  :用户级别的警告，由php函数trigger_error()生成；
    E_USER_NOTICE   :用户级别的通知，由php函数trigger_error()生成；

    E_RECOVERABLE_ERROR    :可以捕获的致命错误，表示发生了可能存在的危险的错误；但是未使引擎处于不稳定状态；如果这个错误没有被set_error_handler()捕获，应用程序将会终止；
    E_DEPRECATED    :运行时的通知，启用该选项之后，如果有函数在未来版本中无法使用将会引起警告；
    E_ALL    :支持所有的错误和警告；

    E_PARSE：编译时语法解析错误；解析错误只应该由解析器生成；

    上述错误代号可以使用"|"、"~"、"!"、"^"和"&"来组合声明需要报告或者不需要报告的错误类型；

php中错误和异常的处理：
    1：设置相关配置来指导php的错误报告方式：
        是否报告错误信息：
            1：display_errors:
                1：在php.ini配置文件中设置该项；表示是否输出错误信息至前台页面；
                2：其值可以为off/on;

            2：ini_set("display_errors",0/1/on/off):
                1：通过该函数可以在当前php脚本中设置是否打印错误信息至前台页面；
                2：其值可以为0/1或者off/on;
                3：通过init_set()的方式设置的效果仅仅在当前脚本中有效；

        错误报告级别：
            1：error_reporting:
                1：需要在php.ini配置文件中设置该项；表示设置错误报告级别
                2：错误级别为php指定的错误常量和位运算符号的组合
                3：在php5.3或者更高版本默认值为E_ALL&~E_NOTICE&~E_STRICT&~E_DEPRECATED，
                   在php5.3版本之前。默认值是E_ALL&~E_NOTICE&E_STRICT
                   在php4中默认为E_ALL&~E_NOTICE
                
            2：ini_set("error_reporting",E_ALL&~E_NOTICE):
                1：通过该函数可以在当前php脚本中设置当前脚本报告错误的级别；
                2：其值为php指定的错误常量和位运算符号的组合
                3：通过init_set()的方式设置的效果仅仅在当前脚本中有效；
           
        记录错误日志：
                1:log_errors:
                    1：需要在php.ini配置文件中设置该项；设置是否将错误信息记录到日志中；
                    2：其值为on/off

                2：ini_set("log_errors",0/1);
                    1：通过该函数在当前脚本中设置是否将错误信息记录至日志中；
                    2：其值为on/off；
                    3：通过init_set()的方式设置的效果仅仅在当前脚本中有效；

                3：log_errors_max_len ：
                    1：设置记录信息的最大字节数，0为不限制，默认是1024；
                    2：该值仅适用于记录的错误，显示的错误以及$_php_errormsg，不适用于显式调用的函数；

            错误日志记录位置：
                1：error_log:
                    1：需要在php.ini配置文件中设置该项；设置记录错误信息的文件路径：
                    2：其值可设置为具体的文件路径，或者syslog;如果设置为syslog，则会将错误发送到系统记录器；如果没有没有设置该项，则会将错误信息发送至SAPI错误记录器；例如CLI中的stderr；

                3：ini_set("error_log","log/mylog.log");
                    1：通过该函数在当前脚本指定错误信息记录位置；
                    2：其值可设置为具体的文件路径，或者syslog
                    3：通过该函数设置的值仅在当前脚本中有效；

            其余的错误处理配置：
                ignore_repeated_errors :表示不记录重复的消息；
                ignore_repeated_source :忽略重复消息的消息源
                track_errors :如果启用，则最后一条错误消息将始终存在于变量$_php_errormsg中；
                display_startup_errors :如果设置为true 即使启用了display_errors也不会显示PHP启动期间发生的错误,除了调试之外，强烈建议关闭display-startup_errors；
            
    2：使用try...catch...来捕获异常信息：
        1：try...catch...仅仅能够捕获手动抛出的异常信息，对于未手动抛出的异常信息则捕获不到；对于错误信息Error，由于Error层次结构不从Exception继承，因此使用try...catch(Exception $e)无法捕获到错误信息；如果需要使用try...catch...捕获错误信息则需要使用catch(Error $e)的方式；
        2：语法结构：
            try{
                
            }catch(Exception $e){

            }
        3：执行逻辑：
            1：try中执行正常但有可能发生错误或者异常的代码
            2：catch中执行发生错误或者异常之后的代码
            3：catch捕获的是异常对象；
            4：异常对象提供的方法：
                $e->getMessage():获取异常信息；
                $e->getCode():获取异常代码；
                $e->getFile():返回发生异常的文件名；
                $e->getLine():返回发生异常的代码行号
                $e->getTrace():返回错误栈；

    3：使用自动以函数来捕获处理未错误和异常信息：
        1：自定义错误处理函数：
            语法：set_error_handler("my_error_function_name",$type);
            参数：my_error_function_name：参自定义的错误处理函数名称；
                  $type：允许自定义错误处理器处理的级别；其值为php错误常量以及位运算的表达式；
            错误处理函数：
                function my_error_handler($code,$message,$file,$line,$trace){}
                参数说明：
                    $code:发生错误时的错误码
                    $message:发生错误时的信息
                    $file:发生错误时的文件
                    $line:发生错误时的行号
                    $trace:发生错误时的上下文信息
            备注：该函数不能捕获E_ERROR,E_PARSE类型的错误

        2：自定义异常处理函数：
            语法：set_exception_handler("my_exception_function_name",$type);
            参数：my_exception_function_name：自定义的异常处理函数名称；
                  $type:允许自定义异常处理器处理的级别；
            异常处理函数：
                function my_exception_handler($exception){}
                参数说明：
                    $exception：异常对象；
                    通过异常对象可以获取错误异常信息

        3：捕获php错误：
            语法：
                register_shutdown_function("my_shutdown_func")
            功能：
                捕获php的Fatal Error,Prase Error等；比如脚本错误，die(),exit(),异常，正常结束都会调用该函数；通过该函数可以判断脚本此次执行是否有错误产生；重点在于这个函数可以捕获E_ERROR和E_PARSE；
            获取本次脚本执行产生的所有错误：
            参数：my_shutdown_func自定义的处理函数名称
                    备注：在该自定义处理函数中需要调用：error_get_last();来获取错误异常信息；
                         error_get_list的返回值：返回一个数组，包含错误类型，错误消息，发生错误所在的文件，发生错误所在的行；
            备注：
                1：该函数只能捕获运行时发生的错误或者异常信息，编译时期则无法捕获得到；
                2：框架中之所有能够触发该函数原因在于：框架中一定会有一个index.php文件，其余所有待执行的代码都会通过include引入到index.php中，只要index.php不出错，其他文件出错均属于运行时出错；

错误处理：
http://php.net/manual/en/ref.errorfunc.php