php正则表达式语法：
    1：语法规则：
        /表达式/[修正符]
        备注：
            1：正则表达式的组成由正则比到时边界、表达式、修正符组成；
            2：正则表达式的边界可以是/ /、# #、! !组成；如：/表达式/、#表达式#、!表达式!
            3：修正符是对表达式的补充说明，可有可无；
    2：表达式的组成：
        单个字符、模式单元、原子表、元字符、转义元字符、普通转义字符

        单个字符：
            指定字符集中的任意字符，包括：字母(a-zA-Z)、数字(0-9)、符号(.%$等)、语言符号(其他非英文字符)及其组合
        
        元字符：
            []：
                表示[]中任意一个元字符、任意元字符的组合都可以满足要求；
                如：[0-9]：表示0-9任意字符都可以；[ac]：表示a、c、ac、ca以及任意个数的c和任意个数的a的组合均符合要求；

            [^]：
                表示[]中指定的所有元字符以外的字符及其组合均符合要求；即表示对[]中的元字符取反；
                如：[^0-9]：表示除0-9以外的任意字符或者除0-9以外的任意字符的组合都符合要求；
            
            ()：表示由多个字符组成一个整体，作为最小匹配的单位；
                如：(qwe)：表示如果存在qwe这个三个字符按照顺序组成的字符块即符合要求；

            |：表示多个匹配原子之间是或的关系,常和()联合使用；
               如：(qwe|asd)：表示如果存在一个qwe字符块或者asd字符块即符合要求；
            
            {m}：表示对{}之前的匹配原子的数量要求必须有m个；
                如：/a{2}/：表示需要有·连续·2个a字符；(as|qw){2}：表示需要有·连续·2个as字符块或者·连续·2个qw字符；qw和as混合连续2个是不很符合要求的，如：'qwas'或者'asqw'是不符合要求的，只有'asas'或者'qwqw'才符合要求
            
            {m,}：表示对{}之前匹配的原子的数量要求必须·至少·有m个，多了不限；
                如：/a{2,}/：表示需要有·连续·至少2个a字符；(as|qw){2,}：表示需要有·连续·至少2个as字符块或者·连续·至少2个qw字符；如：'asasas'或者'qwqwqw'才符合要求
            
            {m,n}：表示对{}之前匹配的原子的数量要求必须·至少·有m个，·至多·有n个；
                如：/a{2,3}/：表示需要有·连续·至少2个,最多3个a字符；(as|qw){2,3}：表示需要有·连续·至少2个as字符块至多3个或者·连续·至少2个至多3个qw字符；如：'asasas'或者'qwqwqw'才符合要求
            
            *：表示对*号之前的匹配单元需要有0个或者多个,等价于{0,}；表示可有可无；
                如：/a*/：表示需要有0个或者多个a字符；(as|qw)*表示需要有0个或者多个as字符块或者qw字符块；
            
            ?：表示对?号之前的匹配单元需要有0个或者1个，等价于{0,1};表示可有可无，但是最多只能有1个(连续)
                如：/a?/：表示需要0个或者1个a字符；(as|qw)+表示需要有0个或者1个as字符块或者qw字符块；
            
            +：表示对+号之前的匹配单元需要有1个或者多个,等价于{1,}；
                如：/a+/：表示需要有1个或者多个a字符；(as|qw)+表示需要有1个或者多个as字符块或者qw字符块；

            ^：表示目标字符串必须以指定的匹配单元作为开头；
                如：/^a/：表示必须以a作为字符串开头；/^(as|qw)/表示必须以as或者qw作为字符串开头；
            
            $：表示目标字符串必须以指定的匹配单元作为结尾；
               如：/a$/：表示必须以a作为字符串结尾；/(as|qw)$/表示必须以as或者qw作为字符串结尾； 
            
            .：表示除过换行符以外的任意字符；常用组合.*?表示最小匹配所有字符

        普通转义字符：
            \d：表示匹配0-9的数字[0-9]
            \D：表示匹配0-9的数字以外的其他任意字符[^0-9]

            \w：表示匹配一个英文字母、数字、下划线，等价于[0-9a-zA-Z]
            \W：表示匹配一个除英文字母、数字、下划线，等价于[^0-9a-zA-Z]

            \s：表示匹配一个空白字符,等价于[\r\n\f\t\v]
            \S：表示匹配一个除空白字符以外的任何一个字符，等价于[^\f\t\v\r\n]

            \oNN：表示匹配一个八进制数字
            \xNN：表示匹配一个十六进制数字
    
    3：修正符：
        i：表示表达式中的字符均不区分大小写
        s：表示匹配视为单行；
        U：表示拒绝贪婪匹配；
    
    4：匹配模式：

    5：php中和正则表达式有关的函数：
        1：array preg_match(string $pattern, string $subject[,array &$matches[, int $flags=0[, int $offset]]])
            功能：表示返回给定数组或者字符串$input中与模式$pattern匹配的元素或者子字符串；匹配到一项之后将停止匹配；
                特别注意，匹配时，该函数会以贪婪模式匹配符合要求的匹配单元，并且把连续匹配到的匹配单元看做一次成功的匹配；直到遇到不符合要求的匹配字符才停下来；比如需要匹配'pw',那么'pwpwpw'会被匹配为1个符合要求的字符串；
            参数：$pattern：要匹配的模式，可以是字符串或者正则表达式；
                $input：待匹配的数组或者字符串；
                $matches：用来存储匹配到的子串；
                $flags：表示匹配方式：
                    如果设置为PREG_GREP_INVERT,反向匹配；
                    如果设置为PREG_OFFSET_CAPTURE，返回匹配到的选项时会带上子串在父串中的索引；
                $offset：表示从目标字符串的开始位置开始搜索，单位是字节；
            返回值：返回pattern的匹配次数，其值为0或者1，如果发生错误将会返回FALSE

        2：array preg_match_all(string $pattern, string $subject[,array &$matches[, int $flags=PREG_PATTERN_ORDER[, int $offset]]])
            功能：表示返回给定数组或者字符串$input中与模式$pattern匹配的元素或者子字符串；不同于preg_match，preg_match_all匹配到之后还会继续向后匹配；
                特别注意，匹配时，该函数会以贪婪模式匹配符合要求的匹配单元，并且把连续匹配到的匹配单元看做一次成功的匹配；直到遇到不符合要求的匹配字符才停下来；比如需要匹配'pw',那么'pwpwpw'会被匹配为1个符合要求的字符串；

            参数：$pattern：要匹配的模式，可以是字符串或者正则表达式；
                $input：待匹配的数组或者字符串；
                $matches：用来存储匹配到的子串；
                $flags：表示匹配方式：
                    REG_SET_ORDER：表示$matches[0]包含第一次匹配得到的所有匹配(包含子组)， $matches[1]是包含第二次匹配到的所有匹配(包含子组)的数组，以此类推

                    PREG_PATTERN_ORDER：表示$matches[0]保存完整模式的所有匹配, $matches[1] 保存第一个子组的所有匹配，以此类推
                    PREG_OFFSET_CAPTURE：表示返回被匹配项的同时还会返回子串在父串的索引；

                $offset：表示从目标字符串的开始位置开始搜索，单位是字节；
            返回值：返回pattern的匹配次数，其值为0或者n，如果发生错误将会返回FALSE
        
        3：preg_quote(string $str[, string $delmiter = NULL])
            功能：会向$str中的每一个正则语法字符前添加一个\;特殊字符有：. \ + * ? [ ^ ] $ ( ) { } = ! < > | : -；注意:/不是特殊字符;(就是会将指定的特殊字符转义，不再作为正则语法字符，而是作为普通字符匹配)

            参数：$str：表示正则表达式
                 $delimiter：表示指定分隔符，如果指定，会对$delimiter也进行转义；
            
            返回值：返回转义后的字符串；
        
        4：preg_grep(string $pattern,$array $input[, int $flags=0])
            功能：返回给定数组与模式pattern匹配的元素组成的数组；
            参数：
                $pattern：正则表达式或者字符串，匹配模式
                $input：表示输入数组
                $flags：表示匹配方式：
                    设置为PREG_GREP_INVERT时表示反向匹配；
            返回值：返回匹配到的所有的数组元素组成的数组；
        
        5：preg_replace(mixed $pattern, mixed $replacement,mixed $subject[, $limit = -1[, int &$count]])
        功能：搜索suject中与pattern相匹配的部分，并使用replacement进行替换；

        参数：
            $pattern：匹配模式，可以是正则表达式或者字符串或者上述两项组成的数组；
            $replacement：表示待替换内容，可以是单个字符串或者数组；替换规则如下：
                1：如果该参数和$pattern都不是数组，只有一个，那么将会把匹配到的子串全部替换为该参数；
                2：如果$patter是数组，该参数是字符串，那么会把匹配到的所有内容替换成该参数；
                3：如果$patter和该参数都是数组，那么会按照顺序一一替换；
                4：如果$patter和该参数都是数组，但是该参数的元素个数少于$pattern，那么不够的部分会使用空格替换；
            $subject：表示目标父串；
            $limit：表示每个模式在subject上进行替换的最大次数；默认是-1(无限)
            $count：如果指定，将会被填充为完成的替换次数；
        
        返回值：如果subject是数组，那么返回一个数组，否则返回一个字符串，错误是返回NULL；
        注意：PHP 5.5.0 起， 传入 "\e" 修饰符的时候，会产生一个 E_DEPRECATED 错误； PHP 7.0.0 起，会产生 E_WARNING 错误，同时 "\e" 也无法起效

        6：preg_replace_callback(mixed $pattern,callable $callback,mixed $subject[, int $limit=-1[, int &$count]])
        功能：和preg_replace相同，不过具体替换的操作是由callback指定的回调函数进行的；callback需要以字符串的方式传递；