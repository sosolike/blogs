1:日期时间扩展
    date('format_str',time);
        功能：格式化日期时间time;如果time为空，则获取当前时间并进行格式化；
        格式化参数：
                Y/y:四位年数，两位年数；
                M/m:月份的缩写；有前导零的月份
                D/d/j:星期中的第几天，有前导零的天,无前导零月份的第几天；
                g/h:有/无前导零12小时制；
                G/H:有/无前导零24小时制；
                i:有前导零的分钟数；
                s：有前导零的秒数；
        eg：date("Y-m-d H:i:s",time());
            date("Y-m-d H:i:s);
    strtotime("english_time_str"):
        功能：将英文时间转换为时间戳；
        eg：将英文时间转换为时间戳：
                strtotime("now");strtotime("last sunday");
            获取未来的某个时间：
                strtotime("+2 year");
                strtotime("+2 month");
                strtotime("+2 day");
                strtotime("+2 hours");
                strtotime("+2 minutes");
                strtotime("+2 seconds");
                strtotime("+2 week");
            获取以前的时间：
                strtotime("-2 year");
                strtotime("-2 month");
                strtotime("-2 day");
                strtotime("-2 hours");
                strtotime("-2 minutes");
                strtotime("-2 seconds");
                strtotime("-2 week");
    time();
        功能：获取当前时间的unix时间戳；
    microtime();
        功能：获取当前时间的微秒时间戳；以秒为单位的小数；、
    getdate($time);
        功能：获取时间戳$time的时间信息；返回一个数组；
    mktime(int hour,int minutes,int seconds,int month,int day,int year);
        功能：根据给定的时间创建一个事件戳；
    date_default_timezone_set
        功能：设置系统时间基准
    date_default_timezone_get
        功能：获取当前系统时间基准；
2：数学计算扩展：
    ceil()：向上取整；
    floor()：向下取整；
    round()：四舍五入；
    rand()：生成随机数（整数）
    mt_rand()：生成随机数（整数）和生成指定范围的随机数；
    lcg_value()：生成随机小数；

    max()；求最大值；
    min()：求最小值
    base_convert();进制之间转换
    abs();求绝对值

    sin()：求正弦
    cos()：求余弦
    tan()：求正切

    sqrt()：求平方根
    pow()：求指数：pow(a,b)
    pi()：值为3.1415926
    fmod()：求余数
    exp()：求e的指数；
3：php缓冲区操作：
    使用php缓冲区和不使用php缓冲区的区别：
        使用php缓冲区：php的输出命令-->php缓存区域-->web服务器缓存--->浏览器缓存区域-->浏览器屏幕；
        不使用php缓冲区：php的输出命令-->web服务器缓存--->浏览器缓存区域-->浏览器屏幕；此时将不会再通过php缓存区域；
    php缓存区域的使用：
        1：在php.ini中配置缓存的参数:
            output_buffering = on;打开一个不限制大小的缓冲区域
            output_buffering = 4096;打开一个4096字节的缓冲区域；
            output_buffering = off;关闭php缓冲区域；
        2：代码中操作缓冲区域
            ob_start();打开缓冲区域； 
            ob_end_clean();关闭缓冲区域； 并清空缓冲区域的内容，（是删除，不是刷新输出）；
            ob_end_flush();关闭缓冲区域，并刷新缓冲区域的内容；
        3：操作缓冲区域的内容：
            ob_get_clean();获取并清空缓冲区域的内容
            ob_get_flush();获取并刷新缓冲区域的内容
            ob_get_contents();获取缓冲区域的内容，仅仅只是拷贝一份；对缓冲区域没影响；
            ob_get_length();获取缓冲区域内容长度，是缓冲区域实际存储内容的长度，而非php配置文件中的长度；
4：php操作json:
    1：json_encode()
        功能：将数组或者对象转换为json字符串；
        备注：
            1：对于数组：要求数组必须是关联数组，
            2：对于对象：只能转换访问权限是public的示例属性；其他权限的属性以及静态属性均不能转换；
            3：要避免转换索引数组；
    2：拼装json字符串：
        '{"name":"value","age":age}'
            备注：外面一定要是用单引号，内部使用双引号；
    3：json_decode($json,$true_or_false);
        功能：将json字符串解析为数组或者对象；
        参数：第一个参数为需要解析的json字符串，第二个参数如果是true则解析为数组，如果不填或者为false,则解析为对象；
        解析之后对于数据的访问：
            标量值直接根据键名访问；
            数组或者对象则根据键名获取数组及对象；
    4：输出json字符串：
        header("Content-type:application/json;charset=utf-8");
        exit(json_encode($arr/$obj));
5：php操作http响应头信息：
    1：函数原型：
        header(string str,bool replace,int code);
            str:要发送的报头字符串
            replace:设置是否用当前的报头替换之前的报头
            code:强制改写响应码
    2：http响应列表：
        Allow：
            指定服务器支持的request方法
        Cache-Control：
            指定响应文档能够被安全缓存的情况，   
            通常取值为public,private,或者no-cache;
        Connection
            指定浏览器是否需要使用持久的http连接，若为close:则不使用；若为keep-alive则意味着使用持久化连接；
        Content-Disposition
            指定浏览器要求用户将响应一给定的名称存储在磁盘中；
        Content-Encoding 
            指定传输时页面的编码规则，而不是字符编码集；
        Content-Language
            指定文档所使用的语言：比如：en,en-us等；
        Content-Length 
            指定响应的字节数，只有在持久化连接的时候才有用
        Content-type
            指定文档的mime类型
        Expires
            指定文档何时过期，并从缓存中移除；
        Last-Modified
            指定文档最后修改时间，
        Location
            设置浏览器转向请求新的地址；
        Refresh
            指定浏览器每隔多久请求更新一次页面
        Set-Cookie
            指明当前页面对应的cookie;
    3:header函数的常见使用方式：
        1：设置文档的mime类型：
            header('Content-Type:text/html')
            //设置css类型
            header('Content-Type:text/css')
            //Javascript
            header('Content-type: text/javascript');

            //XML
            header('Content-type: text/xml');

            //Text (Plain)
            header('Content-type: text/plain');

            //JPEG Image
            header('Content-type: image/jpeg(png)');

            //JSON
            header('Content-type: application/json');

            //PDF
            header('Content-type: application/pdf');

            // ZIP文件
            header('Content-Type: application/zip');

            //Flash动画
            header('Content-Type: application/x-shockw**e-flash');

            // 音视频文件
            header('Content-Type: audio/mpeg');
        
        2：实现页面跳转：
            header("Location:h2.php");
        3：实现页面刷新
            header("Refresh:10;url=http://www.baidu.com")
        4：设置响应内容长度
            header("Content-Length:1234");以字节为单位；
        5：设置一个下载类型：
            header('Content-Type；application/octet-stream');
            header('Content-Disposition:attachement;filename="example.zip"')
            readfile("/data/example.txt");
6：php操作ftp扩展
    1：连接和登录ftp服务器
        $link = ftp_connect(ip,port,timeout);        连接ftp服务器
        ftp_close($link);                            关闭ftp服务器连接
        ftp_quit($link);                             关闭ftp服务器连接
        ftp_login($link,$username,$password);

    2:操作ftp服务器上面的dir:
        ftp_chdir($link,$new_name);                 为ftp服务器指定目录更名
        ftp_mkdir($link,$dir);                      在ftp服务器创建一个目录
        ftp_nlist($link,$dir);                      返回指定目录的文件列表；
        ftp_pwd($link);                             返回当前目录名称；
        ftp_rename($link,$from_name,$to_name)       为指定目录更名
        ftp_rmdir($link,$dir)                       删除ftp服务器上面的目录

    3：操作ftp服务器上的文件：
        ftp_chmod($link,$mode,$file)                更改服务器上文件的权限
        ftp_rename($link,$from,$to)                 为ftp服务器上面的文件更名
        ftp_size($link,$file)                       返回指定文件的大小

        ftp_put($link,$ftp_file,$local_file,$mode,$startpos);
        ftp_get($link,$local_file,$ftp_file,$mode,$startpos);

        ftp_fput($link,$svn_file,$local_file,$mode,$startpos);
        ftp_fget($link,$local_file,$ftp_file,$mode,$sttartpos);

        ftp_nb_fput($link,$svn_file,$local_file,$mode,$startpos);
        ftp_nb_fget($link,$local_file,$ftp_file,$mode,$sttartpos);

        ftp_nb_put($link,$ftp_file,$local_file,$mode,$startpos);
        ftp_nb_get($link,$local_file,$ftp_file,$mode,$startpos);

        ftp_mdtm($link,$ftp_file)                   获取ftp服务器上指定文件的最后修改时间；
        ftp_delete($link,$path)                     删除ftp服务器上面的指定文件；
        ftp_exec($link,$command);                   在ftp服务器上执行命令
7：php使用curl扩展：
    1：curl介绍：
        1：cURL是支持使用多种协议和服务器进行数据传递的工具；
        2：php通过libcurl库可以使用curl工具
        3：libcurl库所支持的协议：
                http、https、ftp、gopher、telnet、dict、file和ldap协议
        4：libcurl库所支持的功能：
        支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证
    2：curl使用流程：
         #初始化，并创建curl资源：
            $curl = curl_init();
        #设置url和相应的选项：
            curl_setopt($curl,CURLOPT_URL,"http://www.runoob.com/");
        #抓取资源并传递给浏览器：
            curl_exec($ch);
        #关闭curl资源：
            curl_close($ch);
    3：常用curl模式：
        模拟get请求：
            　   初始化
            　　$ch = curl_init();

            　　  设置选项，包括URL
            　　curl_setopt($ch, CURLOPT_URL, "http://www.jb51.net");
            　　curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            　　curl_setopt($ch, CURLOPT_HEADER, 0);

            　　  执行并获取HTML文档内容
            　　$output = curl_exec($ch);

            　　  释放curl句柄
            　　curl_close($ch);
        模拟post请求：
            $url = "http://localhost/web_services.php";
        　　$post_data = array ("username" => "bob","key" => "12345");

            初始化
        　　$ch = curl_init();

            设置基本的选项
        　　curl_setopt($ch, CURLOPT_URL, $url);
        　　curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

        　　  设置post模式
        　　curl_setopt($ch, CURLOPT_POST, 1);
        　　  设置post数据
        　　curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);

            发送请求
        　　$output = curl_exec($ch);
        　　curl_close($ch);
        获取请求头信息：
            curl_setopt($ch, CURLINFO_HEADER_OUT, TRUE);
            $info = curl_getinfo($ch,CURLINFO_HEADER_OUT);
        获取响应头信息：
            $info = curl_getinfo($ch);
        发送cookie信息：
            curl_setopt($ch,CURLOPT_COOKIE,'A=a;B=b;C=c;');  

8：php操作文件扩展
    1：php包含文件：
        include "$path";
        require "$path";
        include_once    "$path";
        require_once    "$path";
        @1：区别：
            @1：require导入文件：如果文件不存在，或者导入文件出错，程序将终止运行；
            @2：include导入文件：如果文件不存在，则报警告错误，程序将继续执行；
            @3：include会有返回值；require没有返回值；
            @4：xxxx_once将只导入文件一次，每次导入文件的时候都会检测是否已经导入过该文件；
        @2：其他：
            @1：include和require在引入文件的时候，如果文件有return，则返回文件的return值；
    2：目录操作扩展：
        @1：获取当前文件的目录信息的方式：
            a：通过常量：__DIR__来获取当前文件所处的 目录 路径（绝对路径）
            b：通过常量：__FILE__来获取当前文件所处的 文件 路径（绝对路径）
            c：通过getcdw()来获取当前文件所处的 目录 路径（绝对路径）
        @2:检测目录是否存在：
            file_exists($dir);
        @3:获取文件路径的信息：
            basename($file);
            dirname($file);
            pathinfo($file);
            备注：
                1：basename若无第二个参数，则返回完整的文件名和文件后缀；
                            若第二个参数设置了文件后缀，则只返回文件名
                2：pathinfo：返回一个关联数组；包括basename,dirname,extension,filename;
        @3:查看目录所在磁盘空间：
            disk_total_space($dir)；查看磁盘总空间；
            disk_free_space($dir);查看磁盘可用空间；
        @4：创建目录：
            mkdir($dir);创建目录，不能递归创建；
        @5：操作目录：
            $dir_resource = opendir(__DIR__);创建文件指针；
            $res = scandir(__DIR__);返回该目录文件及子目录名称（索引数组）；
            $res = readdir($dir_resource);返回当前目录指针所指文件或者目录的名称；
            rewinddir($dir_resource);重置当前目录指针
            closedir($dir_resource);关闭当前目录；
        @6：改变当前文件所处的目录：
            chdir($url);
    3：文件操作扩展：
        @1：文件检测类操作：
            file_exists($file_path):检测文件是否存在
            is_dir($file_path):检测路径是否是目录
            is_file($file_path):检测路径是否是文件
            is_link($file_path):检测路径是否是链接
            is_writeable($file_path):检测路径是否可写
            is_readable($file_path):检测路径是否可读；
            is_executable($file_path):检测路径是否可执行
        @2：文件基本信息获取：
            fileatime($file_path)：返回上次访问时间，如果出错返回false
            filectime($file_path)：返回文件元信息最后一次被修改的时间
            filemtime($file_path)：返回文件内容最后一次被修改的时间
            filesize($file_path):获取文件大小
            fileperms($file_path):返回文件权限
            filetype($file_path):返回文件权限
            stat($file_path);获取文件信息；返回关联数组；
        @3：文件基本操作：
            copy($from_path,$to_path);复制单个文件
            unlink($file_path);删除文件； 
            rename($from_name,$to_name);重命名文件
            chown(file_path,own_name/own_id);更改文件所有者
            chmod(file_path,new_mod);更改文件权限
            chgrp(file_path,grp_name/grp_id);更改文件组别
        @4：文件内容操作：
            通过路径操作：
                file_get_content($file_path);
                可用于读出文件内容，以字符串返回；也可用于模拟get访问；

                file($path)
                将文件读取到一个数组中，一项是一行，默认是索引数组；

                readfile($path)
                读取文件内容，并直接写到输出缓冲区中；返回所读字符的个数；；

            通过文件资源访问：
                fread($file_resource,$length);
                读取$length个字节并以字符串方式返回；读取失败返回false;

                fgetc($file_resource)
                一次返回一个字符

                fgets($file_resource);
                一次返回一行

                fgetss($file_resource);
                一次返回一行，并且过滤掉html和php标记；

                fpassthru($file_resource)
                读取文件内容知道EOF，并直接写到输出缓冲区中；
        @5：文件其他操作：
            1：文件指针操作：
                fseek($file_path,$offset):将文件指针从当前位置向后移动n位；
                fteel($file_resource):返回当前文件指针位置；
                rewind($file_resource):将文件指针重置到首位；
                feof($file_resource):检测文件指针是否已经到达文件末尾；
                fopen($file_path,$mode);打开文件并返回文件资源，
                fclose($file_resource);关闭文件;
            2:文件写入：
                1：file_put_contents($file_path,$content);
                2：$resource = fopen($file_path,"ab+");
                    fwrite($resource,$contents);
        @6：文件锁：
            bool flock ( int handle, int operation [, int &wouldblock] );
            flock() 操作的 handle 必须是一个已经打开的文件指针。operation 可以是以下值之一：

            要取得共享锁定（读取程序），将 operation 设为 LOCK_SH（PHP 4.0.1 以前的版本设置为 1）：该锁的意思是被读取的文件正在被写入将会返回false,如果是被读取则返回true;
            要取得独占锁定（写入程序），将 operation 设为 LOCK_EX（PHP 4.0.1 以前的版本中设置为 2）:建议在对一个文件写入的时候加上该锁，避免同事有多个程序对该文件写入；
            要释放锁定（无论共享或独占），将 operation 设为 LOCK_UN（PHP 4.0.1 以前的版本中设置为 3）
            如果你不希望 flock() 在锁定时堵塞，则给 operation 加上 LOCK_NB（PHP 4.0.1 以前的版本中设置为 4）
            如果不想出现dirty数据，那么最好使用lock_sh共享锁。可以考虑以下三种情况： 
                1. 如果读的时候没有加共享锁，那么其他程序要写的话（不管这个写是加锁还是不加锁）都会立即写成功。如果正好读了一半，然后被其他程序给写了，那么读的后一半就有可能跟前一半对不上（前一半是修改前的，后一半是修改后的） 
                2. 如果读的时候加上了共享锁（因为只是读，没有必要使用排他锁），这个时候，其他程序开始写，这个写程序没有使用锁，那么写程序会直接修改这个文件，也会导致前面一样的问题 
                3. 最理想的情况是，读的时候加锁(lock_sh),写的时候也进行加锁(lock_ex),这样写程序会等着读程序完成之后才进行操作，而不会出现贸然操作的情况 

            写的时候： 
                如果多个写程序不加锁同时对文件进行操作，那么最后的数据有可能一部分是a程序写的，一部分是b程序写的 
                如果写的时候加锁了，这个时候有其他的程序来读，那么他会读到什么东西呢？ 
                    1. 如果读程序没有申请共享锁，那么他会读到dirty的数据。比如写程序要写a,b,c三部分，写完a,这时候读读到的是a，继续写b，这时候读读到的是ab，然后写c，这时候读到的是abc. 
                    2. 如果读程序在之前申请了共享锁，那么读程序会等写程序将abc写完并释放锁之后才进行读。 

所以推荐在读写文件的时候枷锁以保证文件时安全的；如果不想读阻塞：可以使用flock(lock_SH | LOCK_NB);

9：常用字符串操作：
    1：---确定子串在字符串中的位置函数：---

        stripos() 	返回字符串在另一字符串中第一次出现的位置（对大小写不敏感）。
        strpos() 	返回字符串在另一字符串中第一次出现的位置（对大小写敏感）。

        strripos() 	查找字符串在另一字符串中最后一次出现的位置（对大小写不敏感）。
        strrpos() 	查找字符串在另一字符串中最后一次出现的位置（对大小写敏感）。
        
        strchr()：子字符串在字符串中的第一次出现；
        strrchr():子字符串在字符串中最后一次的出现；返回的是被查找字符串及其后面的字符串；
    2：---对字符串进行分割---

        str_split($str,$legth);	将字符串按照指定的子串字符个数分割到数组里面；
        chunk_split(string,length,end);	将字符串按照指定的个数分割为更小的子串；但仍然是一个字符串；length设置每个子串的长度，end设置各个子串之间的连接符号；
        strtok(string,split);		把字符串分割为更小的子串，每次调用带上分隔符参数，返回一个子串；
        explode(string,split);		根据分割符将字符串分割至数组；
    3：---对字符串进行局部替换---
         str_replace(from,to,string);		对字符串中指定的字符进行替换
         str_ireplace(from,to,string);		对字符串中指定的字符进行替换，并且会忽略大小写；
         substr_replace(str,replacement,start,length);	按照指定的位置和长度对字符串进行替换，
         strtr(string,array);			对字符串中的子串进行替换；
    4：---字符串的比较---
         substr_compare();		按照指定的位置和长度对字符串进行比较
         strcasecmp();			对两个字符串进行比较；忽略大小写；
         strcmp()				对两个字符串比较，严格区分大小写；
         strncasecmp()；			对字符串中指定个数的字符进行比较；忽略大小写；
         strncmp();				对字符串中指定个数的字符进行比较；
    5 ---改变大小写---
         ucfirst()；			将字符串首字母改为大写；
         lcfirst();			将字符串首字母改为小写；
         ucwords();			将字符串每个单词的首字母都改为大写；
         strtolower();			将字符串每个字母都转换为小写；
         strtoupper();			将字符串每个字母都转换为大写；
    6---其他常用函数---
         strlen();			获取字符串长度；
         strrev();			将字符串翻转；
         ltrim()			去掉字符串左边的空白字符；
         rtrim()			去掉字符串右边的空白字符；
         md5()				对字符串进性md5操作；
         md5_file()		对文件进性md5操作；
         parse_str()		对查询字符串进行解析到数组中；
         str_repeat(string,repeat)		将字符串重复指定次数
         str_pad(string,length,pad_string,pad_type)			将字符串填充至指定长度；
         urlencode($str)：对字符串进行编码，在数据传递过程中必须要有；
         urldecode($str)：对字符串进行解码，在数据传递过程中必须要有；
    7：字符串过滤函数：
        	1：trim();过滤掉字符串两边的空白字符或者指定字符；
            2：ltrim();过滤掉字符串左边的空白字符或者指定字符；
            3：rtrim();过滤掉字符串右边的空白字符或者指定字符；
            4：htmlspecialchars()将预定义字符转换为html实体；
            5：htmlentities()把字符转换为html实体
            6：strip_tags():剥去字符串中的html，xml,以及php标签
            7：intval()；将数据转换为整形；
            8：floatval();
10：数组操作扩展：：
    1：数组的交并差：
        //差集
        array_diff($arr1,$arr2);返回$arr1存在但$arr2不存在的项；按值判断
        array_diff_key();返回$arr1存在但$arr2不存在的项；按索引判断

        //交集
        array_intersect($array1, $array2);返回$array1和$array2中都存在的值；按照值判断；返回的是$array1中的值；
        array_intersect_key($array1, $array2)；返回$array1和$array2中都存在的值；按照键判断；返回的是$array1中的值；

        //并集
        array_merge($array1，$array2);求$array1和$array2中的并值；如果键名相同，则$array2会覆盖$array1;
        array_merge_recursive($array1);求$array1和$array2中的并值；递归求值；如果键名相同，则$array2和$array1的值会形成二维数组;

    4：其他常用函数：
        //数组的常用函数
        array_combine($arr1,$arr2);将$arr1中的值作为键，将$arr2中的值作为值，返回一个组装后的数组，要求两个数组的长度保持一致；
        array_unique();去掉数组中的重复值
        in_array();检测具体的值在数组中是否存在
        array_key_exists();检测指定的键在数组中是否存在
        array_fill(index.number,value);用指定的值填充数组
        array_pad(array,size,value)将数组补至指定长度;size代表最终长度，如果是负值，被插入项则从前面开始插入；
        sort();数组进行顺序排序；按值进行；
        rsort();数组进行逆序排序，按值进行
        ksort();数组进行顺序排序，按键进行；
        krsort();数组进行逆序排序，按键进行；
        array_shift();删除数组第一项，并返回
        array_unshift();向数组最前面中插入一项
        array_pop();删除数组最后一项。并返回
        array_push();向数组最后一位加一个值，
        compact()；组装数组；
        is_array();检测对应变量是否是数组；
        count();检测数组的项数；另：count($arr) == count($arr,1) 则该数组为一维数组，否则为多维数组；
        array_reverse();逆转array的项
    5：数组的其他函数
        array_replace($arr1,$arr2);使用后一个数组替换前一个数组的值
        array_replace_recursive()
        join();将数组转换为字符串
        implode();通join()
        array_keys();
        array_values();
        array_chunk(array,size,preserve_key);将数组按照size分割为块，preserve_key如果为true,则使用原来的键名，否则使用新的索引来代替原来的键名；
        array_count_values();统计数组中各个值的出现次数；
        array_column();返回多维数组中的某个键值；
        array_change_key_case($input);改变数组键的大小写
    6数组的遍历函数
        array_map();		对数组中的每一项都应用某一个函数；返回一个新的map；
        array_rand();		随机从数组中返回一个或者多个数组项；
        array_walk();		对数组中的每一项都应用某一个函数，不能有return；
        each();				返回数组的键值对；
        list($a,$b,$c) = $arr; 把数组中的值返回给变量；
11：php正则表达式：
12：php处理错误异常的方式：
13：php操作session：
14：php操作cookie：
    


        
    