1:日期时间扩展
    date('format_str',time);
        功能：格式化日期时间time;如果time为空，则获取当前时间并进行格式化；
        格式化参数：
                Y/y:四位年数，两位年数；
                M/m:月份的缩写；有前导零的月份
                D/d/j:星期中的第几天，有前导零的天,无前导零月份的第几天；
                g/h:有/无前导零12小时制；
                G/H:有/无前导零24小时制；
                i:有前导零的分钟数；
                s：有前导零的秒数；
        eg：date("Y-m-d H:i:s",time());
            date("Y-m-d H:i:s);
    strtotime("english_time_str"):
        功能：将英文时间转换为时间戳；
        eg：将英文时间转换为时间戳：
                strtotime("now");strtotime("last sunday");
            获取未来的某个时间：
                strtotime("+2 year");
                strtotime("+2 month");
                strtotime("+2 day");
                strtotime("+2 hours");
                strtotime("+2 minutes");
                strtotime("+2 seconds");
                strtotime("+2 week");
            获取以前的时间：
                strtotime("-2 year");
                strtotime("-2 month");
                strtotime("-2 day");
                strtotime("-2 hours");
                strtotime("-2 minutes");
                strtotime("-2 seconds");
                strtotime("-2 week");
    time();
        功能：获取当前时间的unix时间戳；
    microtime();
        功能：获取当前时间的微秒时间戳；以秒为单位的小数；、
    getdate($time);
        功能：获取时间戳$time的时间信息；返回一个数组；
    mktime(int hour,int minutes,int seconds,int month,int day,int year);
        功能：根据给定的时间创建一个事件戳；
    date_default_timezone_set
        功能：设置系统时间基准
    date_default_timezone_get
        功能：获取当前系统时间基准；
2：数学计算扩展：
    ceil()：向上取整；
    floor()：向下取整；
    round()：四舍五入；
    rand()：生成随机数（整数）
    mt_rand()：生成随机数（整数）和生成指定范围的随机数；
    lcg_value()：生成随机小数；

    max()；求最大值；
    min()：求最小值
    base_convert();进制之间转换
    abs();求绝对值

    sin()：求正弦
    cos()：求余弦
    tan()：求正切

    sqrt()：求平方根
    pow()：求指数：pow(a,b)
    pi()：值为3.1415926
    fmod()：求余数
    exp()：求e的指数；
3：php缓冲区操作：
    使用php缓冲区和不使用php缓冲区的区别：
        使用php缓冲区：php的输出命令-->php缓存区域-->web服务器缓存--->浏览器缓存区域-->浏览器屏幕；
        不使用php缓冲区：php的输出命令-->web服务器缓存--->浏览器缓存区域-->浏览器屏幕；此时将不会再通过php缓存区域；
    php缓存区域的使用：
        1：在php.ini中配置缓存的参数:
            output_buffering = on;打开一个不限制大小的缓冲区域
            output_buffering = 4096;打开一个4096字节的缓冲区域；
            output_buffering = off;关闭php缓冲区域；
        2：代码中操作缓冲区域
            ob_start();打开缓冲区域； 
            ob_end_clean();关闭缓冲区域； 并清空缓冲区域的内容，（是删除，不是刷新输出）；
            ob_end_flush();关闭缓冲区域，并刷新缓冲区域的内容；
        3：操作缓冲区域的内容：
            ob_get_clean();获取并清空缓冲区域的内容
            ob_get_flush();获取并刷新缓冲区域的内容
            ob_get_contents();获取缓冲区域的内容，仅仅只是拷贝一份；对缓冲区域没影响；
            ob_get_length();获取缓冲区域内容长度，是缓冲区域实际存储内容的长度，而非php配置文件中的长度；
4：php操作json:
    1：json_encode()
        功能：将数组或者对象转换为json字符串；
        备注：
            1：对于数组：要求数组必须是关联数组，
            2：对于对象：只能转换访问权限是public的示例属性；其他权限的属性以及静态属性均不能转换；
            3：要避免转换索引数组；
    2：拼装json字符串：
        '{"name":"value","age":age}'
            备注：外面一定要是用单引号，内部使用双引号；
    3：json_decode($json,$true_or_false);
        功能：将json字符串解析为数组或者对象；
        参数：第一个参数为需要解析的json字符串，第二个参数如果是true则解析为数组，如果不填或者为false,则解析为对象；
        解析之后对于数据的访问：
            标量值直接根据键名访问；
            数组或者对象则根据键名获取数组及对象；
    4：输出json字符串：
        header("Content-type:application/json;charset=utf-8");
        exit(json_encode($arr/$obj));
5：php操作http响应头信息：
    1：函数原型：
        header(string str,bool replace,int code);
            str:要发送的报头字符串
            replace:设置是否用当前的报头替换之前的报头
            code:强制改写响应码
    2：http响应列表：
        Allow：
            指定服务器支持的request方法
        Cache-Control：
            指定响应文档能够被安全缓存的情况，   
            通常取值为public,private,或者no-cache;
        Connection
            指定浏览器是否需要使用持久的http连接，若为close:则不使用；若为keep-alive则意味着使用持久化连接；
        Content-Disposition
            指定浏览器要求用户将响应一给定的名称存储在磁盘中；
        Content-Encoding 
            指定传输时页面的编码规则，而不是字符编码集；
        Content-Language
            指定文档所使用的语言：比如：en,en-us等；
        Content-Length 
            指定响应的字节数，只有在持久化连接的时候才有用
        Content-type
            指定文档的mime类型
        Expires
            指定文档何时过期，并从缓存中移除；
        Last-Modified
            指定文档最后修改时间，
        Location
            设置浏览器转向请求新的地址；
        Refresh
            指定浏览器每隔多久请求更新一次页面
        Set-Cookie
            指明当前页面对应的cookie;
    3:header函数的常见使用方式：
        1：设置文档的mime类型：
            header('Content-Type:text/html')
            //设置css类型
            header('Content-Type:text/css')
            //Javascript
            header('Content-type: text/javascript');

            //XML
            header('Content-type: text/xml');

            //Text (Plain)
            header('Content-type: text/plain');

            //JPEG Image
            header('Content-type: image/jpeg(png)');

            //JSON
            header('Content-type: application/json');

            //PDF
            header('Content-type: application/pdf');

            // ZIP文件
            header('Content-Type: application/zip');

            //Flash动画
            header('Content-Type: application/x-shockw**e-flash');

            // 音视频文件
            header('Content-Type: audio/mpeg');
        
        2：实现页面跳转：
            header("Location:h2.php");
        3：实现页面刷新
            header("Refresh:10;url=http://www.baidu.com")
        4：设置响应内容长度
            header("Content-Length:1234");以字节为单位；
        5：设置一个下载类型：
            header('Content-Type；application/octet-stream');
            header('Content-Disposition:attachement;filename="example.zip"')
            readfile("/data/example.txt");
6：php操作ftp扩展
    1：连接和登录ftp服务器
        $link = ftp_connect(ip,port,timeout);        连接ftp服务器
        ftp_close($link);                            关闭ftp服务器连接
        ftp_quit($link);                             关闭ftp服务器连接
        ftp_login($link,$username,$password);

    2:操作ftp服务器上面的dir:
        ftp_chdir($link,$new_name);                 为ftp服务器指定目录更名
        ftp_mkdir($link,$dir);                      在ftp服务器创建一个目录
        ftp_nlist($link,$dir);                      返回指定目录的文件列表；
        ftp_pwd($link);                             返回当前目录名称；
        ftp_rename($link,$from_name,$to_name)       为指定目录更名
        ftp_rmdir($link,$dir)                       删除ftp服务器上面的目录

    3：操作ftp服务器上的文件：
        ftp_chmod($link,$mode,$file)                更改服务器上文件的权限
        ftp_rename($link,$from,$to)                 为ftp服务器上面的文件更名
        ftp_size($link,$file)                       返回指定文件的大小

        ftp_put($link,$ftp_file,$local_file,$mode,$startpos);
        ftp_get($link,$local_file,$ftp_file,$mode,$startpos);

        ftp_fput($link,$svn_file,$local_file,$mode,$startpos);
        ftp_fget($link,$local_file,$ftp_file,$mode,$sttartpos);

        ftp_nb_fput($link,$svn_file,$local_file,$mode,$startpos);
        ftp_nb_fget($link,$local_file,$ftp_file,$mode,$sttartpos);

        ftp_nb_put($link,$ftp_file,$local_file,$mode,$startpos);
        ftp_nb_get($link,$local_file,$ftp_file,$mode,$startpos);

        ftp_mdtm($link,$ftp_file)                   获取ftp服务器上指定文件的最后修改时间；
        ftp_delete($link,$path)                     删除ftp服务器上面的指定文件；
        ftp_exec($link,$command);                   在ftp服务器上执行命令
7：php操作文件扩展
    1：php包含文件：
        include "$path";
        require "$path";
        include_once    "$path";
        require_once    "$path";
        @1：区别：
            @1：require导入文件：如果文件不存在，或者导入文件出错，程序将终止运行；
            @2：include导入文件：如果文件不存在，则报警告错误，程序将继续执行；
            @3：include会有返回值；require没有返回值；
            @4：xxxx_once将只导入文件一次，每次导入文件的时候都会检测是否已经导入过该文件；
        @2：其他：
            @1：include和require在引入文件的时候，如果文件有return，则返回文件的return值；
    2：目录操作扩展：
        @1：获取当前文件的目录信息的方式：
            a：通过常量：__DIR__来获取当前文件所处的 目录 路径（绝对路径）
            b：通过常量：__FILE__来获取当前文件所处的 文件 路径（绝对路径）
            c：通过getcdw()来获取当前文件所处的 目录 路径（绝对路径）
        @2:检测目录是否存在：
            file_exists($dir);
        @3:获取文件路径的信息：
            basename($file);
            dirname($file);
            pathinfo($file);
            备注：
                1：basename若无第二个参数，则返回完整的文件名和文件后缀；
                            若第二个参数设置了文件后缀，则只返回文件名
                2：pathinfo：返回一个关联数组；包括basename,dirname,extension,filename;
        @3:查看目录所在磁盘空间：
            disk_total_space($dir)；查看磁盘总空间；
            disk_free_space($dir);查看磁盘可用空间；
        @4：创建目录：
            mkdir($dir);创建目录，不能递归创建；
        @5：操作目录：
            $dir_resource = opendir(__DIR__);创建文件指针；
            $res = scandir(__DIR__);返回该目录文件及子目录名称（索引数组）；
            $res = readdir($dir_resource);返回当前目录指针所指文件或者目录的名称；
            rewinddir($dir_resource);重置当前目录指针
            closedir($dir_resource);关闭当前目录；
        @6：改变当前文件所处的目录：
            chdir($url);

        
    