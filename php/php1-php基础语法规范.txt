php基本语法规范：
    1：php标记
		1：<?php code... ?>		
		2：<script language="php">code... </script>
		3：<% code... %>
		4：<? code... ?>
			其中：
				1：第1,2种是可以直接使用的；第3,4中必须在php.ini配置文件中进行配置之后才可使用；
				2：默认情况下推荐使用第一种，如果是将php代码嵌入html页面中时需要前后封闭，如果时独立的php文件则推荐只写明起始标签 <?php ，将后面的标记 ?> 省略；

    2：注释：
        单行注释：# 或者 //
        多行注释：/* 注释 */
    
    3：标识符命名规范：
        1：由数字，字母，下划线组成；且不能以数字开头，避免以_或者__开头
        2：不能和系统保留字冲突
        3：要有可读性，不能拼音和英文混搭，不能随意命名，推荐以小写+下划线分割式命名法命名
        4：标识符中 变量名，函数名，类名，方法名 严格区分大小写

    4：语句结束符号： ; 
    5：代码块符号：{}
    6：php对于代码的空格和换行没有严格要求，但要尽力保持代码结构整齐清晰；
php中的数据类型：
    1：Boolean 布尔类型
	    1：简写bool，开关量；
        2：特征：在php中：false,FALSE,0,0.0,null,'',"",array();NAN,undfined为FALSE;
                        其余则全部为TRUE

    2：Interger 整数类型
		1：从5.4版本起，整数值可以是二进制，八进制，十进制，十六进制；
		2： 要使用八进制表达，数字前必须加上 0。
            要使用十六进制表达，数字前必须加上 0x。
            要使用二进制表达，数字前必须加上 0b。 
		3：如果运算结果或者数字本身超出了int型的表示范围，将会以float来表示；
		4：php不支持无符号整数；

    3：Float 浮点型
		1：浮点数表示形式有两种：指数形式、小数形式；
		2：浮点数精度有限，误差较大，无法比较两个看起来一样的浮点数是否相等；
		3：如果需要使用更高精度的数字，应该使用任意精度数学函数（BC数学函数扩展）或者gmp函数（数学扩展函数）
		4：switch里面不支持使用浮点数；
    
    4：String 字符串
		1：'' 或者 ""包含起来的都是字符串；
		2：单引号效率更高；但是无法识别php符号；没有特殊需求时推荐使用单引号；
        3：双引号可以识别php符号；
            简单语法
                3：在双引号中会尽可能连接$后面的字符组成一个合法的变量名；当做php变量解析；
                4：在双引号里面同样可以直接解析数组索引和对象实例属性；"asfdafsd$abc[1]","asdfas$obj->th"；
            复杂语法
                3：可以通过{}来明确变量名的范围；
                4：可以通过{}来识别数组的索引和对象实例属性，要求$符号必须紧挨着{$才能够识别$符号；"asfdafsd{$abc[1]}","asdfas{$obj->th}"；
		    特别注意：{}里无法识别常量和静态变量；
		4：php里面只有字符串类型，没有字符类型；
		5：转义字符：
			\t,\r，\n，\v，\f，\"，\$，\'，
            不需要转义时可以使用\\来避免转义；
		6:字符通过.来连接；并且字符串.号后面不要求必须是字符串，如果是其他数据类型会自动转换为字符串；
    5：NULL型：
        1：NULL在php中是个标量数据类型；
        2：NULL不等同于0，'',"",array(),空对象，undfined,是一个单独的数据类型

    6：array类型：
			1：php中的数组在使用时并不需要声明类型；一个数组中可以放置不同类型的数据；
			2：php中的数组在使用时并不需要声明长度；php中的数组长度可以动态改变；
			3：php中的数组是一个有序映射，且索引可以自定义，并且提供了两侧增删数据的函数，因此可以当做列表，字典，队列，栈来使用；
			4：php数组根据key的不同：
				1：有三种类型：索引数组，关联数组，索引关联数组；尽量避免使用索引关联数组；
				2：key的一些注意事项
					1：如果下标是布尔值，那么该索引以前的索引全部会被转换为布尔值，并由后至前进行覆盖；
					2：浮点数会被存储为整数；如8.7会被存储为8；
					3：null会被转换为空字符串；
					4：避免给键名设置无意义的内容；
					5：避免出现索引关联数组；
	 	数组的创建：
			1：array();创建空数组
			2：array(2);数组的内容只是一个数字的时候，该数字代表数组的长度；
			3：array(1,2,"qwe");不指定键的时候默认是一个索引数组；
			4：array("a"=>1,"b"=>2);创建一个关联数组；
		数组中的基本操作：
			数组中指的获取：
				$arr[key];
				$arr[key][key];
			数组的合并：
				array_merge($arr1,$arr2);
				array_merge_recursive($arr1,$arr2); 
			数组的长度：
				count($arr) 
			数组键的赋值：
				$arr[key] = $value;

    7：Object 对象型数据；
    8：Resource 资源类型；保存外部资源的一个引用；
php中数据类型操作： 
    php中数据类型转换：
        1：公用转换，不改变源数据的数据类型：
            (type)$var
            如：(int)$var;
        2：公用转换，改变源数据的数据类型
            settype("type",$var);
            如：settype("int",$var);
        3：其他方式转换：
            intval($var)：将变量引用的数据转换为int类型；
            floatval($var)：将变量引用的数据转换为float类型；
            strval($var)：将变量引用的数据转换为string类型；
            备注：上述三种方式均不会改变源数据的数据类型，仅仅改变赋值结果；
        4：一些自动转换：
            float：当int型数据超出int表示范围，将会自动转换为float类型；
            int/float：当数字字符串在参与运算时，将会自动转换为对应的数字类型
            bool：除过false,FALSE,0,0.0,null,'',"",array();NAN,undfined以外均为TRUE;
    php中数据类型获取：
        gettype($var); 获取变量var的数据类型；

        is_xxx($var);检测变量的数据类型是否是指定类型：
            如：is_array()  is_double()  is_float()  is_integer()  is_long()  is_object()  is_real()  is_string()
    php中不同进制之间转换：
        1：
            二进制：bin
            八进制：oct
            十进制：dec
            十六进制：hex
                1：转换时只能以10进制为基准进行转换；
                2：转换函数均为decXXX()或者XXXdec();	如：octdec()/dechex();
		3：通用转换：base_convert($number,from,to);
php中的常量：
    1：基本特征：
        1：常量名应遵守php标识符命名规范；
		2：常量名多用大写加下划线分割的方法(小写也可，不推荐)；
		3：存储区域在静态存储区域；
        4：只能赋值一次；
    2：常量声明
		define('常量名',常量值);
		const 常量名 = 常量值
    3：两种声明常量的方式区别
        define:
			1：第三个参数为true则区分大小写，为false则不区分大小写；默认区分大小写；
			3：常量值可为表达式
			4：不区分命名空间
            5：多用在面向过程中声明常量
		const:
			1：默认区分大小写，无法更改；
			3：常量值只能为确定的值，不能为表达式；
			4：可识别命名空间
            5：用在php面向对象中声明常量
    4：常用的系统常量：
        __FILE__
        __LINE__
        __DIR__
    5：检测常量是否已经定义：
        defined("常量名");

php中的变量
    1：普通变量：
        1：命名：
            1：严格遵守php变量命名规范
            2：变量名应以$符号为前缀
        2：php中的变量特性：
            1：变量无需先声明后使用，但是推荐先声明后使用；避免变量出错；
            2：php为弱数据类型语言，因此使用变量时无需声明数据类型；
            3：变量在程序执行过程中可以引用不同数据类型数据；变量的数据类型取决于其引用的数据的数据类型；
            4：$$name:可变变量；变量名称可变；一般用于处理名称有规律的变量；
            5：根据变量作用域分：可分为全局变量、局部变量
                全局变量只能在函数外部使用；
                局部变量只能在函数内部使用；
        3：常见变量操作
            isset($name)：检测变量是否存在以及是否有值；值可以是空字符串。空数组，null,0;
			empty($name);变量不存在或者为空都会是true;值为空字符串和空数组，以及null的时候返回true;
			unset($name)：删除变量对数据的引用；在面向对象中也可以用来销毁对象；
		4：变量的赋值：
        	$name1 = $name2：直接赋值；
			$name1 = &$name2：引用赋值；
        5：直接赋值和引用赋值的区别：
            $name1 = $name2：直接赋值；
				在赋值之初只是增加对变量$name2的一个引用，直到$name1或者$name2的值发生改变的时候才会为$name1分配内存空间；
				$name1和$name2保持相互独立，并占有不同的内存空间；
			$name1 = &$name2：引用赋值；
				系统不会为$name1分配内存空间,仅仅增加对$name2所引用数据的引用；因为所有变量均引用的是同一片内存区域，所以任意一个变量值的改变均会引起其他同样引用这块内存区域的变量值的改变；
			
    2：预定义变量：
        1：预定义变量的特性：
            0：所谓预定义变量是指：php在运行过程中会创建一些特殊的变量，这些变量在php中具有特殊的含义；
            1：所有的预定义变量均是数组；
            2：所有的预定义变量作用范围是超全局的；
            3：所有的预定义变量只能取值，或给其元素复制，绝不能直接给预定义变量赋值；
            4：声明变量是也不能和预定义变量冲突；
        常见预定义变量：
            1：$_GET
                1：作用：用于接收客户端发来的GET请求参数；
                2：接收方式：$_GET["data_name"];或者通过$_GET接收所有的get请求参数；
                3：常见的一些发起get请求的方式：
                    通过表单发起get请求：<form action = "" method = "get"><form>
                    通过链接发起get请求：<a href="url?name = value&name = value"></a>
                    通过js发起get请求：window.location.href = "url?name=value&name=value"
                    通过js发起get请求：window.location.assign("url?name=value&name=value")
                4:get请求的一些特征：
                    1：get请求类型所能发送至服务器的数据有长度限制；并非是请求协议限制，而是浏览器为了保护服务器而添加的限制；
                    2：不适合传递敏感信息；因为get传值会直接将值附加在URL后面；直接可见；
                    3：不支持上传文件
                    4：http协议中get方式的语义主要用来获取数据；
            2：$_POST:
                1：作用：用于接收客户端发来的POST请求参数；
                2：接收方式：$_POST["data_name"];或者通过$_POST接收所有的post请求参数；
                3：常见的一些发起POST请求的方式：
                    通过表单发起POST请求：<form action = "" method = "post"><form>
                    php通过curl发送post请求；
                    js通过ajax发送post请求；
                4:post请求的一些特征：
                    1：可以上传文件；
                    2：可以发送的数据大小较大；
                    3：数据传递较为隐秘；（但同样不够安全）
                    4：http协议中post方式的语义主要用来修改数据；
                5：其他关于POST请求的内容：
                    1：使用表单发送请求，需要设置enctype属性：
                        1:application/x-www-form-urlencoded ：发送前会编码所有字符
                        2:multipart/form-data ：不对字符编码，如有上传文件，必须使用该种方式；
                    2：通过file_get_contents("php://input")获取POST数据；
                        1：上述方式只适用于application/x-www-form-urlencoded这种格式；对于multipart/form-data，则无效！
                        2：取值上等价于：$GLOBALS['HTTP_RAW_POST_DATA']
       
            3：$_REQUEST:
                1：全局数组变量，默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。 
                2：可以通过其获取get,post,cookie的数据，但是此时要求get,post,cookie中变量名不能重复；
                3：该数组中的内容是可以被远程用户篡改，所以并不可信，也并不推荐通过$_REQUEST来获取对应参数；
                4：接收方式：$_REQUEST["data_name"];
            4:$GLOBALS:
                1:全局数组变量，包含了当前页面全部的全局变量;
                2:主要作用：将全局变量包装为超全局变量；
                3：两种方式：
                    1：$GLOBALS["data_name"];
                        此种方式可以在函数内部使用函数外部的变量，在函数内部对函数外部的变量做了修改将会保持；因为引用确确实实是外部所声明的变量；
                    2：global $name
                        此种方式可以在函数内部声明函数外部的同名变量；则可以使用外部同名变量的值；但是此时所做的修改将不会保持；因为此种方式只是声明了一个指向外部变量的引用；因此并不会改变外部变量真正的值，本质上来说并不是同一个变量；
            5：$_SERVER:
                1：可以获取服务器和执行环境信息;
                2：包含了本次请求的头信息，路径，以及脚本位置等信息；
                3：信息以关联数组的方式保存；
            6：$_FILE:
                1：存储上传文件的信息；
            7：$_SESSION
                1：存储当前会话信息
            8：$_COOKIE
                1：存储当前cookie信息
常用的php输出方式：
    echo:
		1:输出语句；而非函数，可以输出变量，常量，表达式的值；无返回值；效率较高，比print稍快；
	print:
		1:只能输出一个字符串，有返回值，始终返回1；
		2：同样print是语句不是函数；
	print_r():
		1：输出函数；打印变量基本信息；
		2：如果是基本数据类型则直接输出变量值；如果是array，将会打印其键值详细信息；object和array类似；
		3：print_r()会将指针移至最后，使用reset可将指针回到开始处；
	var_dump():
		1：输出函数；打印变量的详细信息；
		2：基本类型将会打印其数据类型和具体值；
		3：数组合对象将会打印其结构信息； 
运算：
	1：算术
		1：对于+ - * / % 运算：仅支持数字和数字类型的字符串；
		2：对于自增自减运算支持：数字 字符串 null,字符串按照ascll码进行加减1并转换，null当做0进行；
		3：前自增和后自增在赋值的时候会导致结果不一样，注意运算顺序不同会导致不同的结果；
	2：比较：
		1：有大于，小于，等于，全等于，不等于，大等，小等；
		2：全等要求数据类型和值均一致的情况下才能认为是全等，等于只要值相同即可认为相等；
		3：比较双方有布尔值得全部转换从布尔值比较，true>false;
		4：没有布尔值的，如果是数字字符串比较按照数字大小比较，
		5：如果是普通字符串的，按照位进行比较；
		6：数字字符串和数字在一起按照数字比较；
	3：逻辑
		1：与或非：&& || ！；
		2：注意逻辑短路问题；
		3：结果是布尔值；
	4：按位
		&：按位与
		|：按位或
		^：按位异或
		~：按位取反
		<<：左移：符号不会被保留，相当于乘2；
		>>：右移：符号会被保留，相当于除2；
		前两个的计算结果是布尔值，后四个的计算结果是算术值；
流程：
	条件：
		1：条件：
				if(){};
				if(){}else{};
				if()else if(){}else{};
		2：条件2：
			？ ：
				eg: $res = 1 > 0 ? "ok" : "not ok";
		3：条件3：
			switch($value){
			}
			1：多个case具有相同的处理方式可以重叠；
			2：default根据需要添加；并且不需要break;
			3：switch不支持浮点数；
	循环：
		1:for循环：
			for(i=0;i<10;i++){
				//循环体
				}
		2:foreach：
			foreach(array as $value){};
			foreach(array as $key => $value){};	
			遍历数组最好使用foreach:遍历速度会更快；尽量不要使用while;
		3:while循环：
			$i=0;
			while($i<10){
				#循环体；
				$i++;
			}
		4：do~while循环：
			$i=0;
			do(){
				$i++
			}while($i<10);

		5：循环嵌套中的注意事项；
				1：不要嵌套层次太深；
				2：不要在循环中执行耗内存和IO操作；
		6：break/continue;	
			1：break:跳出当前循环；执行循环之后的代码；
			2：continue:终止当前循环，开始新的循环；

php中的错误和异常：
    1：在php中错误和异常是两个概念，
        1：错误：php脚本自身的问题导致程序无法正常运行；
        2：异常：php脚本自身没有问题，但是在运行时出现超出预期的错误；
        3：php中错误不等同于异常，异常可以被try..catch捕获，但是错误无法被try..catch捕获
    2：php中抛出错误和异常
        1：php本身并不会主动抛出错误异常信息；需要手动抛出；
        2：手动抛出异常：throw new Exception("msg")
        3：手动抛出错误：trigger_error("error_msg",ERR_TYPE)
    3：错误和异常的产生分为两种：
        1：系统产生的错误和异常
        2：业务逻辑需要抛出的错误和异常
    4：php中的错误级别：
        E_ERROR：致命错误，运行时产生；
        E_WARING：警告，运行时产生；
        E_NOTICE：通知，运行时产生；
        E_CORE_ERROR：致命错误，php初始化启动过程中产生；
        E_CORE_WARING：警告，php初始化启动过程中产生；
        E_CORE_NOTICE：通知，php初始化启动过程中产生；
        E_COMPILE_ERROR：致命错误，编译时产生；
        E_COMPILE_WARING：警告，编译时产生；
        E_COMPILE_NOTICE：通知，编译时产生；
        E_USER_ERROR：致命错误，用户主动抛出；
        E_USER_WARING：警告，用户主动抛出；
        E_USER_NOTICE：通知，用户主动抛出；
        E_PARSE：编译时语法解析错误
        E_ALL：所有错误
        注意：所有的错误需要使用E_ALL&~E_NOTICE
    5：php本身处理错误异常机制：
        1：关于是否报告错误信息：
            是否报告错误信息：
                1：display_errors:在php.ini配置文件中设置该项；是否输出错误信息；
                2：ini_set("display_errors",0/1/on/off):0不显示，1显示；
                    在php.ini的配置文件里面设置display_errors = on/off:选择是否输出错误信息；
                    ini_set()这种设置方式仅仅在当前脚本有效；
            错误报告级别：
                1：error_reporting:在php.ini配置文件中设置该项；设置错误报告级别
                2：ini_set("error_reporting",E_ALL&~E_NOTICE):当前脚本中设置
                    在php.ini的配置文件中设置error_reporting的常量值；
                    ini_set()这种设置方式仅仅在当前脚本有效；
            记录错误日志：
                1：log_errors:设置是否将错误信息记录到日志中；在php.ini的配置文件里，设置log_errors的值；
                2：ini_set("log_errors",0/1);当前脚本中设置；
                3：log_errors_max_len :设置记录信息的最大字节数，0位不限制，默认是1024；、
            错误日志记录位置：
                1：error_log:设置记录错误信息的位置：在php.ini的配置文件中设置对应值；
                2：可设值：syslog:记录到系统日志；
                          log/mylog：记录错误信息至文件(对该文件必须要有写的权限)；
                3：ini_set("error_log","log/mylog.log");
        2：通过try...catch...捕获处理
                语法：try{
                        code...
                    }catch(Exception $e){
                        code...
                    }
                执行逻辑：
                    1：try中执行正常但有可能发生错误或者异常的代码
                    2：catch中执行发生错误或者异常之后的代码
                    3：catch捕获的是异常对象；
                    4：异常对象提供的方法：
                        $e->getMessage():获取异常信息；
                        $e->getCode():获取异常代码；
                        $e->getFile():返回发生异常的文件名；
                        $e->getLine():返回发生异常的代码行号
                        $e->getTrace():返回错误栈；
                    5：由于php无法自动抛出错误或者异常，因此需要在try块中手动抛出异常：
                        语法：
                            1：throw new Exception("自定义的异常提示信息")
                            2：异常提示信息被捕获之后可以通过$e->getMessage()来获取；
                        分析：使用try--catch块来捕获throw抛出的异常信息一般用于业务逻辑的需要抛出异常信息；系统本身的错误或者异常信息不推荐使用这种方式
        3：通过自定义错误或者异常信息处理函数来处理未被try..catch捕获的异常信息；
                1：自定义错误处理函数：
                    语法：set_error_handler("my_error_function_name",$type);
                    参数：参数为自定义的错误处理函数名称；
                         $type:允许自定义错误处理器处理的级别；
                    错误处理函数：
                        function my_error_handler($code,$message,$file,$line,$trace){}
                        参数说明：
                            $code:发生错误时的错误码
                            $message:发生错误时的信息
                            $file:发生错误时的文件
                            $line:发生错误时的行号
                            $trace:发生错误时的上下文信息
                    备注：该函数不能捕获E_ERROR,E_PARSE类型的错误
                2：自定义异常处理函数：
                    语法：set_exception_handler("my_exception_function_name",$type);
                    参数：参数为自定义的异常处理函数名称；
                         $type:允许自定义异常处理器处理的级别；
                    异常处理函数：
                        function my_exception_handler($exception){}
                        参数说明：
                            $exception：异常对象；
                            通过异常对象可以获取错误异常信息
                3：捕获php错误：
                    语法：
                        register_shutdown_function("my_shutdown_func")
                    功能：
                        捕获php的Fatal Error,Prase Error等；比如脚本错误，die(),exit(),异常，正常结束都会调用该函数；通过该函数可以判断脚本此次执行是否有错误产生；重点在于这个函数可以捕获E_ERROR和E_PARSE；
                    获取本次脚本执行产生的所有错误：
                        error_get_last();
                        返回值：返回一个数组，包含错误类型，错误消息，发生错误所在的文件，发生错误所在的行；
                        该函数需要放在my_shutdown_func中调用
                    备注：
                        1：该函数只能捕获运行时发生的错误或者异常信息，parse-time时期根本不会执行；
                        2：框架中之所有能够触发该函数原因在于：框架中一定会有一个index.php文件，其余所有待执行的代码都会通过include引入到index.php中，只要index.php不出错，其他文件出错均属于运行时出错；
    
    错误异常处理示例：
        function halt($error){
            ob_start();
            if(is_array($error)){
                print_r($error);
            }
        }

        function my_error_handler($code,$message,$file,$line,$trace){
            ob_end_clean();
            $error = array(
                "code"=>$code,
                "message"=>$message,
                "file"=>$file,
                "line"=>$line,
                "trace"=>$trace,
            );
            halt($error);
        }
        function my_exception_handler($exception){
            ob_end_clean();
            $e = array(
                "code"=>$exception->getCode(),
                "message"=>$exception->getMessage(),
                "file"=>$exception->getFile(),
                "line"=>$exception->getLine(),
                "trace"=>$exception->getTrace(),
            );
            halt($e);
        }

        function shutdown_fun(){
            $info = error_get_last();
            if($info){
                ob_end_clean();
                $e = array(
                    "code"=>$info['type'],
                    "message"=>$info['message'],
                    "file"=>$info['file'],
                    "line"=>$info['line'],
                    "trace"=>array(),
                );
                halt($e);
            }
        }		

        set_error_handler("my_error_handler",E_ALL&~E_NOTICE);

        set_exception_handler("my_exception_handler");

        register_shutdown_function("shutdown_fun");
        
                    

