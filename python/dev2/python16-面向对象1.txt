python面向对象1：
    类的声明：
        1：声明方式：
            class ClassName(object):
                类成员...
        2：声明注意事项：
            1：声明类需要使用class关键字；
            2：类名必须符合python标识符规范，并推荐采用首字母大写的驼峰式命名法命名； 
            3：类声明时如果需要继承其他类则需要在ClassName()的括号中填写需要继承的类；
            4：类成员要保持缩进相同；类成员包括属性和方法；
    对象的创建:
        1：对象本质上是对类的封装，类则是创建对象的模板；
        2：创建的实例对象可以调用实例属性和实例方法；
        3：对象的实例化：
            1：obj = ClassName()
            2：obj = ClassName(arg1,arg2)
        4：在实例化对象的时候需要根据构造函数的要求传入对应参数；
        5：和实例对象有关的内置函数：
            1：检测对象类型：isinstance(obj,ClassName)
            2：获取对象所有的属性和方法：dir(obj)
            3：检测对象是否有指定属性：hasattr(obj,"x")
    属性：
        1：实例属性：
            1：属于对象的属性；
            2：生命周期和对象一致，创建实例对象的时候为实例属性分配内存空间并初始化，对象被销毁的时候实例属性也一并被销毁；
            3：声明方式：
                1：在类内部需要在实例方法中通过self.attr_name的方式声明并初始化；
                2：在类外部可以通过实例对象绑定任意实例属性：obj.attr_name = value;
            4：调用方式：
                在类内部调用：self.attr_name;
                在类外部调用：obj.attr_name;
            5：实例属性创建注意事项：
                1：推荐在类内部的构造函数中创建实例属性并初始化；不推荐在其他实例方法中创建实例对象；
                2：不推荐在类外部通过实例对象创建实例属性；
    
        2：类属性：
            1：属性属于类本身；
            2：生命周期和类的生命周期保持一致；
            3：声明方式：只能在类内部声明：
                attr_name = value
            4：访问：无论类的内外，均使用：ClassName.attr_name来访问；
    方法：
        1：构造函数：
            声明：
                def __init__(self):
                    code...
            备注：
                1：名称固定：__init__,不允许使用其他名称；
                2：构造函数只起初始化的作用，并非用来创建对象；
                3：一般在构造函数中声明实例属性并初始化；
                4：构造函数的第一个参数必须是self,代表类实例本身；形参从第二个参数开始；实参赋值时也是从第二个参数开始；
        2：实例方法：
            声明：
                def function_name(self):
                    code...
            备注：
                1：实例方法是属于对象的；生命周期同对象；
                2：实例方法的第一个参数必须是self,代表类实例本身；
                3：形参从第二个参数开始，实参赋值也从第二个参数开始；
                4：调用：在类内部：self.function_name()调用
                        在类外部：obj.function_name()调用
        3：静态方法：
            声明：
                @staticmethod
                def function_name():
                    code...
            备注：1：静态方法需要使用@staticmethod装饰；
                 2：静态方法的形参从第一个位置开始；实参赋值也是从第一个参数开始；
                 3：静态方法内部只能调用类方法，静态方法，类属性，不能调用实例属性以及实例方法；
                 4：无论类的内外，访问方式均为：类名.方法名；
        
        4：类方法：
            声明： 
                @classmethod
                def function_name(cls):
                    code...
            备注：1：类方法需要使用@classmethod装饰；
                 2：第一个参数必须是cls,形参从第二个参数开始；实参赋值也是从第二个参数开始；
                 3：类方法中只能调用类方法，类属性，实例方法，不能调用实例属性和实例方法；
                 4：无论类的内外，调用时使用类名.类方法调用；


