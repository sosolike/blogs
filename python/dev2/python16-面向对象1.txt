python面向对象1：
    类的声明：
        1：声明方式：
            class ClassName(object):
                类成员...
        2：声明注意事项：
            1：声明类需要使用class关键字；
            2：类名必须符合python标识符规范，并推荐采用首字母大写的驼峰式命名法命名； 
            3：类声明时如果需要继承其他类则需要在ClassName()的括号中填写需要继承的类；
            4：类成员要保持缩进相同；类成员包括属性和方法；
    对象的创建:
        1：对象本质上是对类的封装，类则是创建对象的模板；
        2：创建的实例对象可以调用实例属性和实例方法；
        3：对象的实例化：
            1：obj = ClassName()
            2：obj = ClassName(arg1,arg2)
        4：在实例化对象的时候需要根据构造函数的要求传入对应参数；
        5：和实例对象有关的内置函数：
            1：检测对象类型：isinstance(obj,ClassName)
            2：获取对象所有的属性和方法：dir(obj)
            3：检测对象是否有指定属性：hasattr(obj,"x")
    属性：
        1：实例属性：
            1：属于对象的属性；
            2：生命周期和对象一致，创建实例对象的时候为实例属性分配内存空间并初始化，对象被销毁的时候实例属性也一并被销毁；
            3：声明方式：
                1：在类内部需要在实例方法中通过self.attr_name的方式声明并初始化；
                2：在类外部可以通过实例对象绑定任意实例属性：obj.attr_name = value;
            4：调用方式：
                在类内部调用：self.attr_name;
                在类外部调用：obj.attr_name;
            5：实例属性创建注意事项：
                1：推荐在类内部的构造函数中创建实例属性并初始化；不推荐在其他实例方法中创建实例属性；
                2：不推荐在类外部通过实例对象创建实例属性；
    
        2：类属性：
            1：属性属于类本身；
            2：生命周期和类的生命周期保持一致；
            3：声明方式：只能在类内部声明：
                attr_name = value
            4：访问：无论类的内外，均使用：ClassName.attr_name来访问；
    方法：
        1：构造函数：
            声明：
                def __init__(self):
                    code...
            备注：
                1：名称固定：__init__,不允许使用其他名称；
                2：构造函数只起初始化的作用，并非用来创建对象；
                3：一般在构造函数中声明实例属性并初始化；
                4：构造函数的第一个参数必须是self,代表类实例本身；形参从第二个参数开始；实参赋值时也是从第二个参数开始；
        2：实例方法：
            声明：
                def function_name(self):
                    code...
            备注：
                1：实例方法是属于对象的；生命周期同对象；
                2：实例方法的第一个参数必须是self,代表类实例本身；
                3：形参从第二个参数开始，实参赋值也从第二个参数开始；
                4：调用：在类内部：self.function_name()调用
                        在类外部：obj.function_name()调用
        3：静态方法：
            声明：
                @staticmethod
                def function_name():
                    code...
            备注：1：静态方法需要使用@staticmethod装饰；
                 2：静态方法的形参从第一个位置开始；实参赋值也是从第一个参数开始；
                 3：静态方法内部只能调用类方法，静态方法，类属性，不能调用实例属性以及实例方法；
                 4：无论类的内外，访问方式均为：类名.方法名；
        
        4：类方法：
            声明： 
                @classmethod
                def function_name(cls):
                    code...
            备注：1：类方法需要使用@classmethod装饰；
                 2：第一个参数必须是cls,形参从第二个参数开始；实参赋值也是从第二个参数开始；
                 3：类方法中只能调用类方法，类属性，静态方法，不能调用实例属性和实例方法；
                 4：无论类的内外，调用时使用类名.类方法调用；
    属性以及方法的访问限制：
        1：在python中以__双下划线开头的实例属性以及实例方法只能在类内部通过self.__name来访问，在类的外部将无法通过obj.__name访问得到；

        2：python中加了__双下划线的属性和方法，一般情况下Python解释器会将__name改为_ClassName__name的形式，因此在类外部可以通过_ClassName__name的方式调用属性和方法；但是不推荐这么做，原因在于不同的python解释器会设置成不同的名称，并不具备统一性；

        3：对于__name的属性和方法如果类外需要访问推荐采用set和get方法；

        4：注意：python中对于__name__的属性则和__name的属性不同；在python中以__name__格式的属性或者方法是特殊的，在类外部可以访问；所以如果需要对类属性加限制不要使用__name__的格式！
    类之间的继承关系：
        1：python中的继承需要在类名后面的括号中填写需要继承的类，如果继承多个类，则多个类名之间使用,隔开；
        2：python中是支持多继承的，如：class ClassName(ParentClassA,ParentClassB)
        3：继承的结果：子类一旦继承父类之后，将会拥有父类所有的属性以及方法；
        4：子类访问父类属性以及方法：
          在类内部访问：
            1：对于属性：
                静态属性：
                    ParentClassName.attr_name  即可获取父类属性；
            2：对于方法：
                实例方法：
                    ParentClassName.fun_name(self,params)
                静态方法：
                    ParentClassName.fun_name(params)
                类方法：
                    ParentClassName.fun_name(params)
          在类外部：只能通过子类访问父类的实例属性和实例方法：
                1：子类实例只能访问实例属性以及实例方法时会优先调用子类内部的实例属性和实例方法；
                2：如果子类没有实例属性和实例方法，将会调用第一个父类的实例属性以及实例方法；
        5：子类构造函数与父类构造函数：
            1：如果子类没有声明构造函数，创建实例的时候将会调用第一个父类的构造函数；
            2：如果子类有构造函数，将会直接调用子类的构造函数；
            3：在子类中也可以通过ParentClassName.__init__(self)来调用父类的构造函数；
        6：实例动态绑定属性：
            1：在类外部可以通过实例动态为实例绑定属性以及方法，但是，通过这种方式绑定的属性以及方法只对该实例有效，对其他实例无效；如：
                绑定属性：sobj.attr_name = 'name_value'
                绑定方法：from types import MethodType
                         sobj.fun_name = MethodType(bind_fun_name,sobj)
            2：在类外部也可以通过类为类本身绑定方法或者属性：
                绑定属性：ClassName.attr_name = "name_value"
                绑定方法：ClassName.fun_name = bind_fun_name
            4：通过__solts__可以限制通过实例动态添加的属性：如：
                class Student(object):
                    __slots__ = ('attr_a','attr_b')
                至此，通过该类的实例仅仅能够添加attr_a属性和attr_b属性
        7：@property将为属性添加geter和seter方法：
            如果需要限制一个属性的设置和调用过程可以通过两种方式：
                1：将该属性设置为私有属性；并单独提供set方法和get方法；实例仅能通过get个set方法来设置该属性的值；
                2：通过@property装饰器，该装饰器可以将一个方法修饰为同名属性的get方法；并同时产生一个方法名.setter的装饰器，通过方法名.setter装饰器可以将同名方法修饰为set方法；如：
                    class Worker(object):
                        @property
                        def age(self):
                            return self.age
                        @age.setter
                        def age(self,age_data):
                            return self.age = age_data
                    
                如果只提供了@property修饰的方法，则相当于只为该属性提供了只读属性；



        
        
        
                
    



