基本语法规范：
    1：语句不需要用 ; 作为语句结束符；也不使用其他任何符号作为语句结束符；原则上一行就是一条语句，尽量避免手动换行！
    2：代码块不使用 {} 作为划分方式，而是通过缩进来确认同一段代码块；即：同一个代码块中的代码缩进必须保持一致；
    3：空行不是python的语法要求，但是在代码中合理使用空行可以提高代码的阅读性；
    4：注释：
        单行注释：#
        多行注释：''',""";
    5：标识符命名规则：
        1：由字母，数字，下划线组成;
        2：不能以数字开头；
        2：不能和关键字冲突；
        3：标识符严格区分大小写；
        4：要具备可读性；
        5：不推荐使用_或者__作为标识符命名前缀；
    6：字符编码：
        1：python2.x以ascll作为默认字符编码，因此仅仅支持英文，需要输出中文时必须在文件开头加上;# -*- coding: UTF-8 -*-
        2：python3.x默认以utf-8做为字符编码； 
基本数据类型：
    number--数字类型
        int : 整数
            特征：
                 1：python中允许使用二进制，八进制，十进制，十六进制；
                 2：python中的整数没有范围限制；
                 3：相比python2.x，python3.x取消了long型；
            类型转换：
                 1：int(var) 将变量转换为整数；
                 2：int(var,base=n)n为进制，可以将n进制的数字字符串转换为十进制的整数；
                 3：转换之后类型改变的仅仅是转换之后的结果，变量原类型依然不变；
        float : 浮点数
            特征：
                 1：python中浮点数有两种表示方式：指数形式和小数形式；
                 2：python中的浮点数无大小限制；
            类型转换：
                 1：float(var) 将变量转换为浮点数；
                 2：转换之后类型改变的仅仅是转换之后的结果，变量原类型依然不变；
    bool--布尔类型
        1：代表开关量，只有两个值；分别为True和False;
        2：python是弱数据类型语言，因此除过False,'',"",0,None,空list,空set,空dict,空元祖以外，都是True;
        3：python中逻辑运算的结果也是布尔值；
    string--字符串
        1：被 ' 和 " 包含的认为是字符串；
        2：python中没有字符类型，字符即为长度为1的字符串；
        3：常用的转义字符：\r、\n、\t、\v、\b、\f、\\、\'、\"；
        4：禁止转义的方式为\\(双斜杠)，或者使用r''或者r""将转义字符包裹在''或者""以内即可反转义；
        5：字符串的连接使用 + ; 如str1+str2;
        6：字符串的重复使用 * ; 如str*2
        7：字符的截取：str[n]、str[n:]、str[n:m]、str[:m]
        8：字符串长度：len(str)
        9：字符串索引顺序：从左向右字符串索引从0开始，从右向左，索引从-1开始；
    None--空值
        1：None和False不同，和0不同；是单独的一个数据类型，代表空值；
        2：None中首字母N必须大写，其余写法认为是非法字符；
    class--对象型数据
变量：
    变量命名规范：严格遵守python标识符命名规范；
    变量使用规范：1：python是弱数据类型语言，无需先声明后使用，可以直接在使用时声明；但是推荐先声明并初始化之后再使用；
                2：python变量声明时无需声明数据类型，其数据类型取决于其引用的数据的数据类型；
                3：程序运行过程中允许变量引用不同数据类型的数据；
    可变对象与不可变对象：
        可变对象：
                1：可变对象是指变量所引用的内存空间中的值是可以被其他值替换的；
                2：不可变对象是指变量所引用的内存空间中的值是不可以被其他值替换的；
        可变对象/不可变对象之赋值：
                可变对象赋值：给引用可变对象的变量赋一个新值，该变量所引用的内存空间中的值将会被替换为新值，而变量依然引用该块内存空间；
                不可变对象赋值：给引用不可变对象赋一个新值，系统将会从新分配一块内存区域存储新值，然后将变量重新指向该块新的内存区域，原先的内存区域将保持不变，但失去引用；
        可变对象/不可变对象之复制：
                可变对象复制：将一个引用可变对象的变量复制给另一个变量，那么另一个变量也将指向该块可变对象内存区域，之后，任何一个指向该可变对象内存区域的变量的值一旦被更改，那么其余指向该块内存变量的值都将被更改；
                不可变对象复制：将一个引用不可变对象的变量复制给另一个变量，那么另一个变量也将指向该块不可变对象内存区域，之后，给指向该块内存区域的某个变量重新赋值，该块内存变量将会按照不可变对象赋值逻辑进行，其余指向该块内存区域的变量不受影响；
        python中变量地址的检测：
                id(var):可以打印该变量指向的内存地址；
                is和==的区别：is判断时根据两个变量是否指向同一块内存区域，而==则是判断两个变量的值是否一致；
运算：
    算术运算：
        1：允许类型：+ - * / // %
        2：不支持自增自减运算
        3：仅支持数字参与运算
        2：/和//的区别：
                / :除法运算，所得结果是浮点数，即便被整除，结果也是浮点数；
                //:除法运算，所得结果是整数，即便不能被整除，结果也是整数，小数部分无论大小均被舍去；
    布尔运算：
        1：允许的计算类型：and、or、not；
        2：python中的逻辑运算符是单词，不是&&、|、！这种符号；
        3：逻辑运算的结果仍然是布尔值；
    比较运算：
        1：允许的计算类型：== != > < >= <=
        2：运算结果：仍是布尔值；
        3：is 就是判断两个对象的id是否相同， 而 == 判断的则仅判断内容是否相同。
    赋值运算：
        1：允许的计算类型：=、+=、-=、*=、/=、//=、%=
    位运算：
        &：按位求与运算
        |：按位求或运算
        ^：按位异或运算
        ~：按位取反运算
        <<：左移运算；
        >>：右移运算；
    成员检测运算符：
        in 检测子串是否在指定的字符串序列中，如果在返回True，如果不在返回False；
        not in 检测子串是否不在指定的字符串序列中，如果不在返回True，如果在返回False；
    长度获取：
        len() 支持的数据类型包括：字符串，列表，元祖，字典，集合
    序列截取：
        ser[n],ser[n:],ser[n:m],ser[:m]
        支持的数据类型包括字符串，列表，元祖，字典；
流程控制：
    条件：
        if 表达式:
            code...
    ----------------------------

        if 表达式:
            code...
        esle:
            code...

    ----------------------------

        if 表达式:
            code...
        elif 表达式:
            code...
        else:
            code...
    ----------------------------
    循环：
        while循环：
            while 条件表达式:
                code...
    ----------------------------
        while+else:
            while 条件表达式:
                code...
            else:(else在不符合条件的时候会执行，但是仅执行一次)
                code...
    ---------------------------
        for...in...循环：
            for variable in sequence:
                code..
                (variable 代表存储集合遍历出来的值，sequence代表被遍历的集合)
        for...in...else：
            for varaile in sequence:
                code...
            else:
                code...
                (else在for循环正常终止的时候执行)
    --------------------------
        遍历数字：
            for i in range(m)   #m=5
                code...
        遍历数字...else：
            for i in range(m)
                code...
            else:
                code...
    --------------------------
        使用enumerate遍历器：
            for index,item in enumerate(sequence):
                code...
        使用enumerate遍历器...else：
            for index,item in enumerate(sequence):
                code...
            else:
                code...
        (index代表遍历出来的索引，item代表遍历出来的值)
    -------------------------
    对于pass：在代码或者函数中，暂时不处理或者无内容时需要使用pass;
        eg:if a>1 : pass
        
函数：


        
        
    