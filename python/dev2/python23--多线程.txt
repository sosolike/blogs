1：python中原生提供了两个模块来提供多线程服务：_thread 和 threading;_thread是低级模块，threading时高级模块，是对thread的封装，因此推荐使用threading模块
2：python中使用多线程流程：
    1：引入threading模块：import threading
    2：创建线程对象：
        1：直接从threading直接创建线程对象：
            1：创建线程：
                原型：thread_line = threading.Thread(group=None,target=None,name=None',args=(),kwargs={})
                参数：group:线程组，暂时未实现，因此必须是None
                    target:该线程需要执行的函数名称
                    name:该线程的名称
                    args/kwargs:需要传递给线程函数的参数；
                返回值：执行成功返回线程对象；
            2：启动线程：
                thread_line.start()
            3：线程实例方法：
                thread_line.setDaemon(Bool):设置线程是否是后台运行，默认是前台运行，即Bool值是False;如果设置为True则为后台运行！
                thread_line.isDaemon():获取线程是否是后台线程；
                    备注：如果是后台线程：主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程无论成功与否，主线程和后台线程均停止；
                          如果是前台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，需要等待前台线程执行完毕才能停止；
                thread_line.setName('thread_name'):设置线程名字
                thread_line.getName()或者thread_line.name:获取线程名字
                thread_line.isAlive():返回线程是否正在运行
                thread_line.join([timeout]):阻塞当前线程，开始执行指定线程，直至线程函数执行完毕或者执行超时；
        2：自定义线程类继承threading.Thread,并重写run()方法：
            class MyThread(threading.Thread):
                def __init__(self,target,name,args,kwargs):
                    super(MyThread,self).__init__()#注意必须显式的调用父类初始化函数
                    self.target = target
                    self.name = name
                    self.args = args
                    self.kwargs = kwargs
                
                def run(self):定义每个线程要运行的函数
                    #do something...
                    #执行传入的待执行函数
                    self.target()

    3：threading模块提供的常用方法：
        threading.currentThread():返回当前线程对象；
        threading.enumerate()：返回正在运行的线程的list
        threading.activeCount():返回正在运行的线程数量

    4：threading模块提供的常量
        threading.TIMEOUT_MAX:设置threading全局的超时时间
    
    5：python的线程调度：
        python自带GIL锁，以保证同一时刻只能有一个线程在运行；优点在于可以保持多线程程序的简单性，但是同时，也带来了无法利用多核cpu的问题;
        虽然同一时刻只有一个线程在运行，但是多个线程之间同样是处于争夺cpu时间片的状态，具体到某一时刻运行哪一个线程是随机的！




        
                