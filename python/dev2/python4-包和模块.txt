一：python中组织管理代码的模式是：
        |--包
            |--模块
            |--包
                |--模块
                |--包
        包对应目录，模块对应python文件
            
二：模块：
    模块：
        python的模块就是一个python源码文件；
    模块的特点：
        1：方便代码的组织管理，可以根据不同意义或者不同功能将代码文件放置在不同的模块中，方便的代码的查找维护，在使用时只需要引入指定的模块即可使用模块中的变量、函数、类；
        2：模块会产生作用域，因此不同模块中的变量、函数和类的作用域是属于当前模块的；可以避免和其他模块的同名变量、函数和类冲突；
    模块的命名：
        1：模块的名称就是当前python文件的名称；
        2：自定义的模块名不能和python自带的模块名冲突；
        3：每一个模块都会有一个__name__属性；其值由python解释器设置的；如果当前python文件是当做主程序调用执行的，则__name_的值是__main__,如果是当做模块被其他python文件引入的，则其名称就是文件名；
    模块的导入方式：
        import xxx 导入整个模块。 模块中的函数或者变量需要使用 模块名.函数名/模块名.变量 名来访问；
        from 模块名 import 函数名 只会将模块中的指定函数导入进来，并不会导入模块所有的函数，被导入的函数可以直接使用函数名来调用； 
        from 模块名 import * 会将一个模块的所有内容导入到当前命名空间。被导入的函数可以直接使用函数名来调用； 
        备注：一个模块只会被导入一次，无论使用多少次import或者嵌套导入，都将只导入一次；
    模块的导入路径：
        1：现在当前包中查找模块；
        2：如果当前包中找不到模块则从内置的built-in模块中查找；
        3：上述路径找不到将会按照系统配置的环境路径查找对应的模块文件
        4:添加自己的搜索目录：sys.path.append("path");#运行时有效，运行结束后失效；
            import sys
            sys.path.append("模块所在路径")
            import 模块名
    模块的初始化：
        模块可以包含一些可执行语句，这些语句通常用来对模块进行初始化；而且这些语句只有在第一次导入模块的时候才会执行；无论导入几次，只执行一次；
    dir():
        该函数会给出被引入模块的所有属性列表
三：包：
    包：实质为目录，包中可以包含其他的包和模块；
    包的作用：用来组织管理模块；
    包的特点：
        1：方便对模块文件组织管理，
        2：包可以产生的新的作用域；减少变量名模块名的冲突
    导入包中的模块：
        import pack1.pack2.pack3.模块名.py  
            此时访问模块的方法需要使用全名去访问
            如：pack1.pack2.pack3.模块名.fun
        from pack1.pack2 import 模块名.py 
            此时访问模块的方法和直接导入模块时访问方法的方式一致；
            如：模块名.fun
        from pack1.pack2.模块名 import fun
        也可以直接导入某个包中的某个模块中的某个函数/变量,该方法可以直接使用，无需带上包名和模块名
四：__init__.py文件
    对于2.x版本：
        每一个包中都要添加一个__init__.py文件；
        只有目录下面存在这个__init__.py文件才会认为当前目录是一个包；否则将只会认为该目录是一个普通的目录；
    对于3.x版本： 
        无需为包添加__init__.py文件
    __init__.py文件内容：
        __init__.py文件可以是一个空文件，也可以吧__init__.py当做一个python模块使用；__init__.py当做模块使用的时候其名是其所处的包的包名；
五：python安装模块：
    python中使用pip安装模块，其安装位置在默认的Lib目录中；

