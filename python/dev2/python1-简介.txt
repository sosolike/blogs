python简介：
    语言类型：和系统编程语言不同,python是解释执行的脚本编程语言:
            1：python是脚本编程语言即动态语言，而非系统编程语言，因此具备脚本语言的基本特征：
                1.1：脚本文件即为可执行文件，脚本文件也并非是直接运行的，而是由解释器解释执行；在执行时需要先由解释器逐行读取，编译成机器指令，然后执行，因此执行速度比系统编程语言(静态语言)更慢；
                1.2：松散的数据类型，即变量的数据类型取决于程序运行时变量所引用的数据，在执行时由解释器动态检查；松散类型保证编码效率更高，但是也会给代码的执行带来速度上的影响；甚至引起运行时错误；
                
            2：python代码需要解释器解释执行；而不是由操作系统直接执行；常见的python解释器有:
                2.1：CPython:官方python解释器,在命令行下运行python指令就是启动CPython解释器；

                2.2：IPython:IPython是基于Cpython之上的一个交互式解释器，即IPython只是在CPython的基础上增强了交互方式，但是执行python代码的解释器依旧是CPython；

                2.3：PyPy:和CPython完全不一样的解释器，PyPy采用JIT的技术对代码进行动态编译，尤其对于需要多次执行相同代码时，PyPy可以显著提高执行速度,CPython和PyPy的区别在：
                (https://pypy.readthedocs.io/en/latest/cpython_differences.html)；

                2.4：Jypthon:是运行在java平台的Python的解释器，可以直接把Python代码编译成java字节码执行；

            3：python不同的解释器由于对python代码的解释，执行，甚至设计思想不同，因此对于同一段python代码其执行结果有可能不同；

    编程方式：1：面向过程编程
             2：面向对象编程
            
python源程序：
    1：python源程序文件是以.py作为后缀的；
    2：python分为2.x和3.x版本，且互不兼容；

python-PEP:
    PEP全称:Python Enchancement Proposals:Python增强提案；

    官方将PEP分为三类：
        I - Informational PEP   ：信息类：提供信息，有告知类信息，也有指导类信息等
        P - Process PEP         ：流程类：Python本身之外的周边信息
        S - Standards Track PEP ：标准类：主要描述Python的新功能、实践、标准、规范等内容；

    PEP访问地址：
        https://www.python.org/dev/peps/pep-0020/
        0020是提案编号

    推荐阅读的PEP：
        PEP 8   – Style Guide for Python Code，Python编码规范（必读）
        PEP 257 – Docstring Conventions，文档注释规范
        PEP 3120 – Using UTF-8 as the default source encoding，默认UTF-8

        PEP目前一共有478个，通过阅读PEP可以充分了解python功能，标准，规范等；推荐阅读的PEP如下：
        PEP 0   – Index of Python Enhancement Proposals
        PEP 7   – Style Guide for C Code，C扩展
        PEP 20  – The Zen of Python，Python之禅
        PEP 202 – List Comprehensions，列表生成式
        PEP 274 – Dict Comprehensions，字典生成式
        PEP 234 – Iterators，迭代器
        PEP 279 – The enumerate() built-in function，enumerate枚举
        PEP 282 – A Logging System，日志模块
        PEP 285 – Adding a bool type，布尔值
        PEP 289 – Generator Expressions，生成器表达式
        PEP 318 – Decorators for Functions and Methods，装饰器
        PEP 342 – Coroutines via Enhanced Generators，协程
        PEP 343 – The “with” Statement，with语句
        PEP 380 – Syntax for Delegating to a Subgenerator，yield from语法
        PEP 405 – Python Virtual Environments，虚拟环境
        PEP 471 – os.scandir() function，遍历目录
        PEP 484 – Type Hints，类型约束
        PEP 492 – Coroutines with async and await syntax，async/await语法
        PEP 498 – Literal String Interpolation Python，字面字符串插值
        PEP 525 – Asynchronous Generators，异步生成器
        PEP 572 – Assignment Expressions，表达式内赋值（最具争议）
        PEP 3105 – Make print a function，print改为函数
        PEP 3115 – Metaclasses in Python 3000，元类
        PEP 3333 – Python Web Server Gateway Interface v1.0.1，Web开发