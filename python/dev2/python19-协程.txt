协程：
    将函数编写成一个任务，能够接收任务调用方提供的输入，能够处理接收到的输入并将产出发送给任务调用方，这种函数称之为协程；
协程的特征：
    1：协程和函数相比---本质：
        1：协程本质上就是一个函数，可以由开发者根据需要任意调度，并且无论怎样调度、怎样执行、使用多少个协程，协程和其他函数一样，都是在当前线程中执行的；

    2：协称和函数相比---运行逻辑：
        1：函数执行之后只能在执行完毕之后再返回，并且下次执行时所有上下文都将被重新初始化；是无状态的；
        2：协程则可以在函数任意位置暂停执行，并能够保存暂停时的上下文信息，下次执行时将会从暂停处根据上下文以及输入值继续向下运行；

    3：协程和函数相比---输入输出：
        1：函数接收参数只能通过将值赋予形参的方式；并且在函数运行完毕之后将值返回；
        2：协程则可以在暂停处接收调用方传入的值，并且可以在调用处将值返回；
协程的创建方式：
    1：以生成器的方式创建协程：如：
        1：协程基本示例：
            def coroutine():
                n=0
                while True:
                    x = yield n
                    n += x

            备注：
                1：使用上述协程时需要先创建协程对象;协程函数调用之后将会得到协程对象，而非执行协程函数；如：
                    coror = coroutine()  #协程状态是GEN_CREATED，即新创建状态
                    
                2：上述协程可以接收调用方发送的数据赋值给变量x，然后继续向下运行计算x与n的和，最后将在yield处将数据返回给调用方，并暂停程序的运行；

                2：上述协程使用之前需要预激，使协程处于挂起状态；之后才能使用send()方法发送数据给协程处理；如：
                    coror.send(None)  #协程状态是GEN_SUSPENDED，即挂起状态
                    
                3：调用方可以使用该协程创建的协程对象调用send()方法向该协程的yield处发送数据；如：
                    coror.send(n)  

                4：协程下一次执行到yield处时，会将计算得到的n值返回给调用方,调用方可以在send()发送数据时接收返回值;如：
                    result = coror.send(n)  #result即为协程中yield出来的值


        2：协程的终止和异常：
            1：协程中未处理的异常会向上冒泡，传递给next()函数或者send()函数的调用方；如：
                try:
                    coror.send("str")
                except TypeError as e:
                    print("类型出错")

            2：一旦协程将异常抛出后，该协程也将自动终止，此时的协程状态为：GEN_CLOSED；此后将不能在使用send()发送数据也不能使用next()获取下一个值，否则将会报StopIteration异常；

            3：python2.5开始起，调用方可以使用协程对象通过throw方法将异常发送给协程；协程收到调用方发出的异常之后，会在暂停处抛出异常，如果暂停处已经捕获并处理异常，协程将会继续向下运行；如果协程没有处理该异常，异常将会向上冒泡，传递给调用方的上下文；

        3：协程的返回值：
            1：协程除过通过yield可以返回值以外，还可以通过return返回值，当return返回值时协程将会终止，并报出StopIteration异常，return的返回值将可以通过StopIteration对象的value属性获取：

    2：通过yield from 创建协程：
        1：python3.3中添加了yield from;和上述直接通过yield创建协程相比，yield from创建的协程则称为上述协程的委派生成器，上述协程则称为子生成器；
        2：yield from 的基本用法：yield from 子生成器()
        3：yield from用法：
            1：使用了yield from的代码称之为委派生成器；
            2：yield from 后跟的生成器称之为子生成器；
            3：委派生成器一旦执行到yield from 语句的时候，将会把执行权交于子生成器，如果子生成器不反回，那么委派生成器就无法继续向下执行；
            4：当委派生成器将执行权交给子生成器时，委派生成器的调用方使用send()方法可以直接将数据发往子生成器；同时，子生成器yield的数据也将直接发往委派生成器的调用方；
            5：子生成器return的数据会被当做StopInteration的第一个参数，被yield from语句返回，被委派生成器接收到；委派生成器接收到之后将继续向下运行；
            6：如果调用方调用子生成器之后报出StopInteration异常，那么会关闭子生成器，执行权交回委派生成器，继续执行委派生成器之后的代码；如果是其他异常，将会向上冒泡；

        4：通过委派生成器调用子生成器来创建协程的方式相对于直接调用子生成器相比：
            1：不需要在调用之前先去激活协程，使其处于挂起状态；
            2：yield from会自动处理StopIteration异常；
            3：可以实现协程的串联；
    
    3：通过asyncio.coroutine来修饰生成器：
        python3.4中，为了让协程和生成器的语义更加明确，python添加了asyncio.coroutine装饰器，来将一个生成器装饰为一个协程；
    4：通过asyn和await来定义协程：
        python3.5中，添加了types.coroutine修饰器，允许通过async来创建协程；如：
            async def fun_gen():
                code...
        备注：
            1：使用async修饰的函数将会被认为是一个协程；而不再是一个普通的函数
            2：async只能和await搭配使用，而不允许再出现任何形式的yield语句；只有return 和 await可以从协程中返回值；

    
协程的运行方式：
    协程运行方式只有两种：
        1：在其他协程中awit指定要运行的协程；
        2：将协程添加进事件循环中，等待