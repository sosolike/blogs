协程：
    将函数编写成一个任务，能够接收任务调用方提供的输入，能够处理接收到的输入并将产出发送给任务调用方，这种函数称之为协程；
协程的特征：
    1：协程和函数相比---本质：
        1：协程本质上就是一个函数，可以由开发者根据需要任意调度，并且无论怎样调度、怎样执行、使用多少个协程，协程和其他函数一样，都是在当前线程中执行的；

    2：协称和函数相比---运行逻辑：
        1：函数执行之后只能在执行完毕之后再返回，并且下次执行时所有上下文都将被重新初始化；是无状态的；
        2：协程则可以在函数任意位置暂停执行，并能够保存暂停时的上下文信息，下次执行时将会从暂停处根据上下文以及输入值继续向下运行；

    3：协程和函数相比---输入输出：
        1：函数接收参数只能通过将值赋予形参的方式；并且在函数运行完毕之后将值返回；
        2：协程则可以在暂停处接收调用方传入的值，并且可以在调用处将值返回；
协程的创建方式：
    1：以生成器的方式创建协程：如：
        1：协程基本示例：
            def coroutine():
                n=0
                while True:
                    x = yield n
                    n += x

            备注：
                1：使用上述协程时需要先创建协程对象;协程函数调用之后将会得到协程对象，而非执行协程函数；如：
                    coror = corotuine()  #协程状态是GEN_CREATED，即新创建状态
                    
                2：上述协程可以接收调用方发送的数据赋值给变量x，然后继续向下运行计算x与n的和，最后将在yield处将数据返回给调用方，并暂停程序的运行；

                2：上述协程使用之前需要预激，使协程处于挂起状态；之后才能使用send()方法发送数据给协程处理；如：
                    coror.send(None)  #协程状态是GEN_SUSPENDED，即挂起状态
                    
                3：调用方可以使用该协程创建的协程对象调用send()方法向该协程的yield处发送数据；如：
                    coror.send(n)  

                4：协程下一次执行到yield处时，会将计算得到的n值返回给调用方,调用方可以在send()发送数据时接收返回值;如：
                    result = coror.send(n)  #result即为协程中yield出来的值


        2：协程的终止和异常：
            1：协程中未处理的异常会向上冒泡，传递给next()函数或者send()函数的调用方；如：
                try:
                    coror.send("str")
                except TypeError as e:
                    print("类型出错")

            2：一旦协程将异常抛出后，该协程也将自动终止，此时的协程状态为：GEN_CLOSED；此后将不能在使用send()发送数据也不能使用next()获取下一个值，否则将会报StopIteration异常；

            3：python2.5开始起，调用方可以使用协程对象通过throw方法将异常发送给协程；协程收到调用方发出的异常之后，会在暂停处抛出异常，如果暂停处已经捕获并处理异常，协程将会继续向下运行；如果协程没有处理该异常，异常将会向上冒泡，传递给调用方的上下文；

        3：协程的返回值：
            1：协程除过通过yield可以返回值以外，还可以通过return返回值，当return返回值时协程将会终止，并报出StopIteration异常，return的返回值将可以通过StopIteration对象的value属性获取：

    2：通过yield from创建协程：
        def coropipe():
            yield from coroutie()
    

协程的运行方式：
    协程运行方式只有两种：
        1：在其他协程中awit指定要运行的协程；
        2：将协程添加进事件循环中，等待执行；