python---网络请求
1：python3发起网络请求使用urllib包；python2发起网络请求使用urllib和urllib2包；
2：python3使用urllib发起请求：
    1：通过urlopen直接发起简单请求：(仅仅包括请求地址，请求数据，超时时间)
        1：导入request模块：from urllib import request
        2：请求方式：   request.urlopen(url,data=None,timeout)
        3：参数：
                url：请求地址
                data：需要发送的请求数据；
                timeout：本次请求的超时时间

        4：data说明：
            1：如果data是空值，则为GET请求，如果data不为空，则为post请求；
            2：data只能是byte类型的数据
            3：一般有两种数据格式：
                1：字典：处理方式：parse.urlencode(dict).encode("utf-8")；(需要from urllib import parse模块)
                2：查询字符串：处理方式："a=a&b=b".encode("utf-8)即可；
        
        5：返回值：返回一个response对象

        6：获取返回值：
            对数据操作：responce.read()/readline()/readlines()/fileno()
            获取响应头信息：responce.info()
            获取http状态码：responce.getcode()
            获取发起请求的url：responce.geturl()
            获取某个具体的请求头信息：responce.getheader()
            返回请求头信息列表：responce.getheaders()

        7：数据读取的异同：
            对于读json字符串：read()/readline()/readlines()/fileno()完全一样;
            对于普通的字符串：read()返回所有内容
                            readline()返回一行内容
                            readlines()读取所有内容，存放在dict中一个项存放一行；
                            fileno()返回响应字符串的个数
            读取到的数据都需要使用decode("utf-8")来解码，否则是字节类型的数据
    
    2：通过request模块的Request对象使用urlopen发送复杂请求：(请求地址，请求数据，请求头信息，请求方法)
        1：使用方式：
            导入需要使用的模块
                1：from urllib import request
                2：from urllib import prase
            创建request对象：
                requestObj = request.Request(url,data,headers,method)
                参数：url：请求地址；
                     data：需要发送的请求数据，处理方式同1；
                     headers：请求头信息，使用dict;headers={"Cookie":"a=1;b=2"}
                     method：'POST'/'GET'
            发送请求：
                response = request.urlopen(requestObj);
                返回值：返回响应对象
            获取返回值：
                对数据操作：responce.read()/readline()/readlines()/fileno()
                获取响应头信息：responce.info()
                获取http状态码：responce.getcode()
                获取发起请求的url：responce.geturl()
                获取某个具体的请求头信息：responce.getheader()
                返回请求头信息列表：responce.getheaders()
                (同1中的数据获取)
            示例：
                reqData = {"name":"tom","age":233}
                req_data = parse.urlencode(reqData).encode("utf-8")
                cookies = {"Cookie":"a=1;b=2"}
                req = request.Request("http://a.com/a.php",data=req_data,headers=cookies,method="POST")
                res = request.urlopen(req)
                print(res.read().decode("utf-8"))

3：使用requests库发送网络请求：(推荐采用的方式)
    1：安装requests库：pip install requests
    2：发送请求(基本示例)
        发送GET请求：
            发送简单的GET请求：
                用法：requests.get(url)
                示例：requests.get("http://bd.com")
            发送带参数的GET请求：
                用法：requests.get(url,params={})
                示例1：requests.get("http://bd.com",params={'name':'tom','age':23})
                示例2：requests.get("http://bd.com?name=tom&age=23")
            发送带cookie的get请求：
                用法：requests.get(url,cookies={})
                示例：requests.get(url,cookies={'a':1,'b':2})
            发送带header头信息的get：
                用法：requests.get(url,headers={'Cookies':'a=1;b=2','User-Agent':'Mozilla/5.0...'})
        
        发送post请求：
            发送简单post请求：    
                用法： requests.post(url)      
                示例： requests.post('http://eg.com);
            发送带参数的post请求：(参数使用application/x-www-form-urlencoded对字典编码)
                用法：requests.post(utl,data={})
                示例：request.post('http://eg.com',data={'name':'tom'})
            发送带参数的post请求：(参数为json格式)
                用法：requests.post(utl,data={})
                示例：request.post('http://eg.com',json={'name':'tom'})
            发送带cookie的post请求：
                用法：requests.post(utl,data={},cookies={'uid':1,'uuid':2})
                示例：request.post('http://eg.com',data={'name':'tom'},cookies={'uid':1,'uuid':2})
                备注：cookies信息也可以使用header头信息来添加：
            发送带有header头信息的post请求
                用法：requests.post(url,data={},headers={'Cookie':'uid=1;uuid=123;'});
                示例：requests.post('http://eg.com',data={'name':'tom'},headers={'Cookie':'uid=1;'})
    
    3：基本规则：
        请求方式：
            1：GET请求：    requests.get(url)
            2：POST请求：   requests.post(url)
            3：put请求：    requests.put(url)
            4：DELETE请求： requests.delete(url)
            5：HEADER请求： requests.header(url)
            6: OPTIONS请求：requests.options(url)
        携带参数：
            1：对于GET请求：
                1：param={}  #参数以dict的方式传递
                2：以查询字符串的形式发送请求数据；
            2：对于POST/PUT/DELETE请求：
                1：data={}   #参数以dict的方式传递
                2：json={}   #传递json数据，以dict的方式传递
        设置cookies：
            1：通过cookies={}  #设置cookies参数，参数以dict格式传递:cookies={'a':1,'b':2}
            2：通过headers={}  #设置请求头的方式设置cookies：headers={"Cookie":"a=1;b=2"}
        设置超时：
            1：通过timeout=n  #n为超时时间，单位是s；

    4：requests请求结果解析：
        1：requests的请求结果是一个response对象
        2：获取相关请求信息：
            获取请求状态码：response.status_code

            获取响应头信息：response.headers;或者：response.headers['Content-Type']

            获取实际请求的url:response.url

            获取响应cookie:response.cookies;或者使用response.cookies['cookie_name']

            获取请求内容(字符串格式)：response.text

            获取请求内容(二进制)：response.content
            
            获取请求内容(json格式)：response.json()

            获取原始响应内容：response.raw

            获取响应的编码：response.encoding

            设置响应时的编码：response.encode = "utf-8"

            获取重定向信息：response.history
    
    5：错误与异常处理：
        1：遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 ConnectionError 异常。

        2：如果 HTTP 请求返回了不成功的状态码， Response.raise_for_status() 会抛出一个 HTTPError 异常。

        3：若请求超时，则抛出一个 Timeout 异常。

        4：若请求超过了设定的最大重定向次数，则会抛出一个 TooManyRedirects 异常。
        
        5：所有Requests显式抛出的异常都继承自 requests.exceptions.RequestException 。
            

