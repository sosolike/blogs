切片：序列的截取：
    即对于字符串（string），列表（list）,元祖（tuple）,字典（dict）截取区间元素的方法：
    name[n]：取第n个元素
    name[n:]：从第n个元素开始取到最后
    name[n:m]：从第n个元素取到第m个元素
    name[:m]：从第0个元素取到第m个元素
    name[n:m:span]：从第n个元素取到第m个元素，每隔span个元素取一次；
    注意：索引从左向右起始值是0，从右向左起始值是-1；
range函数：range函数是一个生成器，可以生成指定整数范围的数据迭代对象
    python2.x中 range返回一个整数列表:range(start,stop,step)
    python3.x中 range返回一个整数列表对象：range(start,stop,step)
    range使用方式：
        range(stop)
        range(start,stop)
        range(start,stop,step)

列表生成式：
    目的：可以用来生成列表或者元祖；
    使用： 
        生成列表：
            list(range(1,12))：可以通过遍历创建列表
            list(tuple)：可以将元祖转换为列表
        生成元祖：
            tuple(range(1,12))：可以通过遍历创建元祖
            tuple(list)：可以将列表转换为元祖

yield关键字：
    在python中，yield关键字在实现迭代协议中作用，使得函数成为一个生成器；使用yield创建协程则是使用yield的副作用！
    yield关键字特征：
        1：函数运行到yield处时，可以暂停函数的执行，并保存函数的运行状态，将值返回；
        2：在函数下一次被激活时将会从暂停处开始执行，直至运行结束或者遇到下一个yield，继续暂停；
    yield和return的区别：
        1：都可以返回值：
            但是return返回值之后将代表当前函数执行完毕，下次执行将从头开始新的一次执行；
            yield返回值之后将会暂停程序的执行，等待下一次激活后继续向后执行；
        2：在Python2.5中，又添加了新的特性：数据可以发送至yield暂停处，即：yield不仅可以返回一个值，还可以从外部接收一个值；接收到的值将会把 = 右侧的yield表达式整体替换掉；
    yield from：
        1：python3.3中添加了yield from;
        2：yield from 的语法：yield from 生成器对象；如：yield from generater_fun()
        3：yield from用法：
            1：使用了yield from的代码称之为委派生成器；
            2：yield from 后跟的生成器称之为子生成器；
            3：执行逻辑：
                1：生成器被委托给另一个生成器之后，客户端可以通过委托生成器调用子生成器；
                2：委托生成器运行的yield from之后，委托生成器的执行权将会交给子生成器，开始执行子生成器的代码；
                3：子生成器在运行未结束期间，委托生成器都没有执行权，即yield from后面的代码都不会得到执行；并且客户端可以直接通过委托生成器将数据发送到子生成器，并能够直接接受子生成器yield出来的值；
                4：等子生成器运行结束之后，return的数据将会作为StopInteration的第一个参数返回，这个值可以通过yield from获取到，与此同时，客户端需要捕获并处理StopIteration异常；
                5：子生成器返回之后，yield from后面的代码将会继续执行，因此yield from后面的代码等同于子生成器的回调代码；
                
        3：因此通过yield from即可实现一下三个功能：
            1：对生成器的再封装；即在不改变目标生成器的情况下可以在生成器前加上新的代码，实现再封装；
            2：实现生成器的串联，通过oyield from可以实现生成器的接力调用；进而实现串联；
            3：yield from代码后面的代码会在yield from的生成器return结束返回之后执行，在结构上，yield from后面的代码等同于yield from后面生成器的回调；

数据集合：
    数据集合：1：将一系列的已经存在的数据聚集在一起就称为一个数据集合，如list,dict,set,tuple，str等
             2：能够产生一系列数据的产生规则,执行规则可以生产一系列的数据，也称为数据集合,又名生成器
生成器：
    数据集合的创建：
        1：有的数据集合中的每一个元素是已经创建好的，可以根据元素的位置拿取元素本身；
        2：有的数据集合中的每一个元素并没有创建好，但是每一个元素的创建规则是已知的，则可以通过执行创建规则来创建每一个元素；这种创建元素的规则就称为生成器；
    python中的生成器：
        1：通过(x表达式 for x in range(start,stop,step))来创建生成器，数据即为x表达式的计算值；如：
            g = (x+x for x in range(1,6,2))
        2：通过yield关键字创建生成器，利用yield关键字的特性，在需要返回每一个计算结果的地方使用yield返回即可：如：
            def fib(max):
                n=0
                while n < max:
                    x = yiled b
                    n=n+1
                return 'done'
    生成器对象：调用生成器函数将会返回生成器对象，通过生成器对象可以获取生成器生成的值也可以将值发往生成器；如：
        fiber = fib(n)

    生成器生成的结果的获取：
        1：通过next(g)来获取下一个值；每次到用next(g)就会返回下一个元素，如果没有元素时将会抛出StopIteration错误；
        2：通过for循环遍历生成器，因为生成器本质上也是可迭代对象；
    
    将值发往生成器：
        1：fiber.send(value)
        2：将值发往生成器时，生成器中的yield b将会被整体替换成发送的值；而 b 则不变；
        3：使用send函数将值发往生成器时，生成器函数必须处于挂起状态，否则将会报异常，使生成器处于挂起状态的过程称为‘预激’
        4：预激的方式：
            1：通过next调用生成器对象；
            2：通过生成器对象调用send(None)来预激；

可迭代对象：
    1：如果一个数据集合能够使用for循环将其中的每一个数据遍历出来,则数据集合就称为可迭代对象(Iterable)；
    2：python中可以通过isinstance()来判断一个对象是否是Iterable对象；

迭代器：
    1：可以被next函数调用，并不断返回下一个值的对象称为迭代器：Iterator
    2：可以使用isinstance()来判断一个对象是否是Iterator对象；
    3：生成器实现了迭代协议，因此生成器也是迭代器；

备注：
    1：生成器都是Iterator对象；但是list,dict,tuple,str是Iterable对象(可迭代对象)，并非Iterator对象(迭代器)；
    2：将Iterable对象转换为Iterator对象可以使用iter()函数；
    3：Iterator下一个值的计算是惰性的，只有不断调用next函数才能获取下一个值，但是Iterable则代表的是一个完整的数据集合；