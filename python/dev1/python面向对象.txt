python面向对象编程:
类：
    1：类的声明：class ClassName(object):
    2：类声明时的注意事项：
        1：类名推荐驼峰式命名法命名，每个单词首字母都要大写
        2：类的代码块依靠缩进保证；
        3：python中类的继承使用()中放置需要继承的类；一般继承object即可；
        4：类中有属性和方法两类元素；

对象：
    1：对象的实例化：obj = ClassName();
    类的内置函数：
        1：检测对象类型：isinstance(obj,ClassName)
        2：获取对象所有的属性和方法：dir();
        3：检测对象是否有指定属性：hasattr(obj,"x")
        4：操作属性：getattr()、setattr()

属性：
    1：实例属性：
        声明：
            1：在类的内部通过self.abbrName的方式绑定的均是实例属性；
            2：在类外部可以通过类对象绑定任意实例属性；

          备注：在类的任意位置通过self.abbrName声明的均是实例属性，但是推荐实例属性统一在构造函数中声明；避免直接通过对象挂接实例属性或者随便在某个方法中声明实例属性；
        访问：
            在类的内部：self.abbrName来访问
            在类的外部：obj.abbrName来访问

    2：类属性：
        声明：
            1：在类内部声明：eg：name = "tom"
        访问：
            1：通过ClassName.abbrName来访问
            2：通过对象obj.abbrName来访问
        备注： 
            如果实例属性名称和类属性名称一致时，优先访问实例属性；所以为避免出错尽量避免同名；
            类属性属于类所有

构造函数：
    声明：def __init__(self):
            code...
    备注:
        1：构造函数起初始化作用；
        2：构造函数必须要有self参数，代表类本身；
        3：构造函数如果需要传入除过self以外的参数，则在创建对象是必须给予参数；
        4：一般推荐在构造函数中声明实例属性

方法的：
    实例方法：

        声明：def function_name(self):
                code...
        备注:
            1：普通方法的声明和函数的声明一致；
            2：方法中至少要有self参数；
            3：在类内部通过self.function_name调用
               在类外部通过obj.function_name调用
        
    静态方法：
        声明：
            @staticmethod
            def function_name():
                code...
        备注：
            1：静态方法需要使用@staticmethod修饰
            2：静态方法没有self参数
            3：可以被类和类实例调用；
            4：只能访问类变量和类方法，以及传入的变量
    
    类方法：
        声明：
            @classmethod
            def function_name(cls):
                code...
        备注： 
            1：类方法需要被@classmethod修饰
            2：默认参数是cls，传入的参数默认从第二个开始赋值；
            3：类方法中只能访问类属性和类方法,静态方法，不能访问实例属性和实例方法；
            
封装：
    1：普通变量均能被外部访问
    2：以__命名的变量只能被类内部访问
    备注：
        以__命名的变量会被python解释器将变量名称改为_类名__属性名的形式；
    
