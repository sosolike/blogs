切片：序列的截取：
    即对于字符串（string），列表（list）,元祖（tuple）,字典（dict）截取区间元素的方法：
    name[n]：取第n个元素
    name[n:]：从第n个元素开始取到最后
    name[n:m]：从第n个元素取到第m个元素
    name[:m]：从第0个元素取到第m个元素
    name[n:m:span]：从第n个元素取到第m个元素，每隔span个元素取一次；
    注意：索引从左向右起始值是0，从右向左起始值是-1；
range函数：range函数是一个生成器，可以生成指定整数范围的数据迭代对象
    python2.x中 range返回一个整数列表:range(start,stop,step)
    python3.x中 range返回一个整数列表对象：range(start,stop,step)

列表生成式：
    目的：可以用来生成列表；
    使用：list(range(1,12))：可以通过遍历创建列表
          list(tuple)：可以将元祖转换为列表
可迭代对象：
    如何一个数据集合能够使用for循环将其中的每一个数据遍历出来，那么数据集合就称为可迭代对象；
数据集合：
    数据集合：1：将一系列的已经存在的数据聚集在一起就称为一个数据集合，如list,dict,set,tuple，str等
             2：能够产生一系列数据的产生规则,执行规则可以生产一系列的数据，也称为数据集合,又名生成器对象
生成器：
    1：有的数据集合中的每一个元素是已经创建好的，可以根据元素的位置拿取元素本身；
    2：有的数据集合中的每一个元素并没有创建好，但是每一个元素的创建规则是已知的，则可以通过执行创建规则来创建每一个元素；这种创建元素的规则就称为生成器；
    3：eg:
        def createData():
            for i in range(10)
                return i*i
        该createData即可生成一个数据集合，但是这个函数每执行一次，就会计算出数据集合中的所有元素；
        将会带来以下几个问题：
            1：如果目标生成规则生成极多的元素将会占用极大的内存；
            2：有时候只是需要数据集合中的前面部分的元素，没必要一次生成所有的元素，造成性能以及内存的浪费；
    4：yield关键字
        yield关键字和return本质上一样，都是结束当前程序的运行；但是有以下几个不同点：
            1：yield关键字是'暂停'程序的执行，即使用yield之后可以返回需要返回的值，但是同时也会记住程序执行的位置，下次执行时将会在yield后面紧接着执行；
            2：return是终止程序的执行并返回值，即return会将需要返回的值返回，并彻底终止程序的运行，下次执行从头开始！
            3：yield不光可以返回指定的值，yield还可以接收一个值，并返回；
        基于yield的特征，可以在返回每一个元素的时候使用yield返回：
            1：因为yield可以返回值，因此在需要返回元素的地方使用yield返回元素；保证元素能够正常拿到；
            2：因为yield可以暂停程序，因此在返回元素的地方使用yield之后程序将被暂停，提供了能够拿取下一个元素的可能！
        改造上述规则：
            def createData():
                for i in range(10):
                    yield i*i
    5：python中的生成器：
        python中的生成器和上述createData一样，通过规则生产一系列的数据，并通过yield关键字返回元素；
        python生成器调用之后返回的结果称为生成器对象:creater = createData()

        生成器对象有两个方法：
            next():
                如：n=0
                    yield n

                next(creater);
                    不断调用next方法即可获取下一个元素n！
                    也可以使用for循环来获取每一个元素n
            send():
                如： n=0
                    x = yield n
                creater.send(value)
                    调用send方法可以将值发送给迭代器的yield关键字，此时yield n将会作为一个整体被替换成value;
                    但是n依然是0;


