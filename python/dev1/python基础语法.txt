基本语法要求：
    1：语句不需要用 ; 作为语句结束符；原则上一行就是一条语句，如果语句需要换行则使用 \ 换行；但是{}，[]，()中的语句换行无需使用 \ ；
    2：代码块不使用{}作为划分方式，而是通过缩进来确认同一段代码块；即：同一个代码块中的代码缩进必须保持一致；
    3：函数，方法使用空行作为分割，代表一段新的代码开始，类和函数入口也需要空行分割；
    4：注释：
        单行注释：#
        多行注释：#，''',""";
    5：标识符命名规则：
        1：由字母，数字，下划线组成，不能以数字开始；
        2：对大小写敏感；
    6：字符编码：
        1：python2.x以ascll作为默认字符编码，python3.x默认以utf-8做为字符编码；
基本数据类型：
    1：number类型：
        int: 整数
            允许二进制，十进制，八进制，十六进制；
            相比python2.x版本没有long型；
            大小无限制；
        float:浮点数
            允许两种表示方式：小数形式，指数形式；
            大小无限制；
        complex:复数；
    2：布尔类型：
        bool：开关量；
    3：字符串：
        1：被 ' 和 " 包含的认为是字符串；
        2：python没有字符类型，一个字符即为长度为1的字符串；
        3：常用的转义字符：\r \n \f \v \t \\ \' \";
        4：可以使用r'',或者r""使字符串中的转义字符禁止转义；
        5：字符串使用+来连接；使用*来重复字符串：str*2;
        6：字符串索引规则：从右向左索引以0开始，从左向右以-1开始；
        7：字符串截取方法：变量[头下标:尾下标]：如：str[2],str[2,5],str[2:];
    4：空值：none;和0不同，是标量；
变量：
    变量命名：
        1：以数字，字母，下划线组成；不能以数字开头；
        2：变量名严格区分大小写；
        3：变量在初始化的时候无需指定数据类型；
        4：同一个变量可以指向不同类型的数据；
        5：变量的数据类型和其指向的数据的数据类型相同；
        6：变量复制：
            a = b；将变量b赋值给变量a,此时并不会为变量a分配内存空间，仅仅是将变量a指向变量b所指向的数据；
常量：
    常量命名：
        1：以数字，字母，下划线组成；不能以数字开头；
        2：常量名严格区分大小写；推荐以大写+下划线的方式命名；
运算：
    算数运算：
       1：允许类型：+ - * / // %
       2：/和//的区别：
                    / :除法运算，所得结果是浮点数，即便被整除，结果也是浮点数；
                    //:除法运算，所得结果是整数，即便不能被整除，结果也是整数，小数部分无论大小均被舍去；
    布尔运算：
        1：允许的计算类型：and or not
        2：运算结果：仍是布尔值；
    比较运算：
        1：允许的计算类型：== != > < >= <=
        2：运算结果：仍是布尔值；
    赋值运算：
        1：允许的计算类型：= += -= *= /= //= %=
        2：运算结果：仍是布尔值；
    位运算符：
        &：按位求与运算
        |：按位求或运算
        ^：按位异或运算
        ~：按位取反运算
        <<：左移运算；
        >>：右移运算；
    成员运算符：
        in  如果再指定的序列中找到值返回true，否则返回false;
        not in 如果再指定的序列中没有找到值返回true,否则返回false;
    
流程控制：
    条件：
            if 表达式 :
                code...
                code...
        或者：
            if 表达式 :
                code...
            else :
                code...
        或者：
            if 表达式:
                code...
            elif 表达式:
                code...
            else :
                code
    循环：
        while循环：
            while 条件 :
                code...
            
        while+else:
            while 条件 :
                code...
            else :
                code...
                (不符合while条件的时候执行,仅执行一次)
        for..in循环：
            for variable in sequence:
                code...
                (variable代表存储遍历出来的值，sequence代表被遍历的集合)

        for..in..else:
            for variable in sequence:
                code...
                (variable代表存储遍历出来的值，sequence代表被遍历的集合)
            else:
                code...
                (for循环正常终止的时候执行)

        遍历数组序列：
            for i in range(5):
                code...
            (该函数只能用来遍历数字序列)
            (range函数可以指定遍历的步长)
            (也可以使用else,在遍历完成之后进入else中执行)
        使用enumerate:
            for index,item in enumerate(sequence):
                code...
            (item代表存储遍历出来的值,index代表存储遍历出来的索引，sequence代表被遍历的集合)
            (也可以使用else,在遍历完成之后执行else中的code)
    备注：
        pass：在代码段或者函数中，暂时不做处理或者无内容的时候要使用pass;
              eg:if a>1 : pass

函数：
    函数声明方式：def 函数名 (参数列表) :
                    code...（函数体）
        备注： 
            1：函数以def关键字声明；
            2：函数体必须缩进，且缩进要统一；
            3：可以使用return返回值；
            4：多个函数之间用空行隔开；

    函数调用：函数名(形参列表)
        备注： 
            1：允许给形参设置初始值；
            2：形参如果没有初始值，则调用函数的时候必须给形参赋值；
            3：可以使用*var来存储不定长参数；
    
    匿名函数：python使用lambda来创建匿名函数；
        备注： 
            1：声明方式：lambda [arg1,[arg2,arg3,...]]:expersion
            2：调用方式：匿名函数需要赋值给变量，通过变量调用；
    
    函数返回值：使用return返回值；
        备注：
            1：如果return没有返回具体的值，则返回none;
    变量作用域：
        变量作用域类型：
            局部作用域；
            闭包函数外的函数中
            全局作用域
        查找规则：
            局部作用域->闭包函数外的函数中->全局作用域;
        作用域围栏：
            python中只有类，函数，模块才会引入新的作用域，其他的代码块是不会产生作用域的；
        作用域访问规则：
            当前作用域声明的变量只能在当前作用域及以下作用域访问；不能向上突破；
        备注： 
            作用域在函数未执行前就已经形成了，作用域链也生成了，
            解释器在查找变量的时候按照上述规则查找；
            函数外部定义的变量全局可用
            函数内部定义的变量只能在函数内部使用




        
    


    


        
    
        





    


    

    