flask安装：pip install flask
使用flask:
    1:引入flask：from flak import Flask
    2:创建flask实例：app = Flask(__name__)
    3:运行flask实例：if __name__ == __main__:
                        app.run()

创建处理方法：
    @route('/request_path',methods=['GET','POST'])
    def fun_name():
        pass
    
    1：route装饰器用来声明该方法的请求路径，允许的请求方法
    2：请求路径可以使用'/path_info'或者'/path_info/<int:param>'来设置
    3：如果请求路径要求有参数，那么请求时必须给予参数，并且方法里面也要声明参数
    4：类型要求有int,float两种类型
生成路径：
    from flask import url_for

    url_for('path_info',param_name=param_value)

处理请求：
    获取请求对象：from flask import request
    获取请求信息：request.args.get('get_param','default')    #获取get请求参数,default为默认值
                request.form.get('post_param','default')   #获取post请求参数
                request.cookies.get('cookie_name')         #获取cookie值

                eg:http://127.0.0.1:5000/a?name=232

                request.method       #获取请求方法 GET/POST
                request.url          #请求的完整url(包含域名+路径+参数):http://127.0.0.1:5000/a?name=232
                request.base_url     #请求的url部分(域名+路径):http://127.0.0.1:5000/a
                request.url_root     #请求的域名部分(仅仅是域名部分):http://127.0.0.1:5000/  
                request.path         #请求的路径部分(仅仅是路径):/a
重定向：
    from flask import redirect
    
    redirect(url_for('path_info'))
响应：
    1：响应一个字符串：
        return 'some string'
    2：响应一个response对象：
        response = make_response('value')
        return response
    3：设置响应头信息：
        response = make_response('value')
        return (response,http_status,headers)
        注：response是响应对象，
            http_status是响应码
            headers是响应头信息，是一个dict
    4：设置cookie:
        resposne = make_response('value');
        response.set_cookie('cookie_name','cookie_value')


    
                
                 
                      




    