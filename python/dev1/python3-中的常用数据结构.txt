一：python中的基本数据结构：
    list---列表---可变对象
        1：特征：
                1：列表只能存储值本身；不能存储k-v；
                2：列表中元素有序，顺序是按照列表中元素的插入顺序排序；
                3：列表中每个元素都有索引，索引从左向右从0开始，从右向左，从-1开始；
                4：列表声明无需注明数据类型，列表中可以存储任意数据类型；
                5：列表声明时无需注明列表长度，其长度允许动态改变；
                6：列表中元素的查找速度会随着元素的增加而变慢；但是会比较节省内存空间；
        2：操作：
            0：声明：[arg1,arg2,arg3,...]
            1：取值：list[index]
            2：赋值：list[index] = value
            3：删除：del list[index]
            4：获取长度：len(list)
            5：组合列表：list1+list2
            6：重复列表：list*n
            7：检测是否存在指定元素：a in list、a not in list
            
        3：其余操作：
            截取：list[2:]/list[2:4]/list[start:end:span]
            list.sort();对列表进行排序；直接对列表本身进行排序，会更改原数据；
            list.reverse(),反向列表中的元素
            list.pop();删除列表中的一个元素（默认是最后一个）,并返回改元素
            list.insert(index,obj);将对象插入列表；
            list.index(item),返回某个元素的索引位置；
            list.count(item),统计某个元素在列表中出现的次数；
            list.append(item);在列表的末尾添加新元素；
    元组：：
        1：特征：
                1：元祖只能存储值本身；不能存储k-v；
                2：元祖中元素有序，顺序是按照列表中元素的插入顺序排序；
                3：元祖中每个元素都有索引，索引从左向右从0开始，从右向左，从-1开始；
                4：元祖声明无需注明数据类型，列表中可以存储任意数据类型；
                5：元祖是不可变数据对象，因此一旦初始化之后其中的值将不能被改变，删除，也不能给元祖增加元素；
                6：列表中元素的查找速度会随着元素的增加而变慢；但是会比较节省内存空间；
        2：操作：   
                0：声明：(arg1,arg2,arg3,arg4,arg5)
                1：取值：tuple[index]
                4：获取长度：len(tuple)
                5：组合列表：tuple1+tuple2
                6：重复列表：tuple*n
                7：检测是否存在指定元素：a in tuple、a not in tuple
                8：元祖中的元素不允许删除，更新，增加；
        3：其余操作：
                1：max(t);取元组中的最大值
                2：min(t);取元祖中的最小值
                3：tuple(list);将序列转换为元祖
                4：如果元组只有一个元素，则元素后面一定要有,；否则()将被认为是运算符；
    字典：
        1：特征：  
                1：存储的是k-v值，而非单个数据本身；
                2：每个k-v有序，顺序是按照存储顺序排序；从左向右从0开始，从右向左从-1开始；
                3：无需声明数据类型，可以存储不同数据类型的值；
                4：每个元素都是一个键值对，键名不能重复，不能被修改，不能被删除；
                5：声明时无需注明长度，长度允许被动态改变的；
                6：字典的查询效率和字典中元素个数无关，效率非常好；但是占据空间较大；
                7：字典是可变内存对象；

        2：操作：
                0：声明：{key1:val1,key2:val2,...}
                1：取值：dict[key]
                2：赋值：dict[key] = value
                3：删除：del dict[key]
                4：获取长度：len(dict)
                7：检测是否存在指定元素：a in dict、a not in dict；(a指的是索引名称)
                8：字典不允许使用+拼接，不允许使用*重复；
        3：其余操作：
                    1：str(dict)：以字符串的方式打印字典
                    2：type(var)：返回输入变量的类型；
                    3：dict.keys();dict.values();
                    4：dict.items();
                    5：dict.get(key);
                    6：dict.clear();删除字典内的所有元素
                    7：dict.pop(key)
    集合：set
        1：特征：   
                1：set集合只能存储元素，没有索引,不能存储k-v；
                2：set集合中的值不能重复，具备自动去重功能；
                3：集合中的元素是无序的；
                4：集合只能通过list创建；
                5：set是可变对象
        2：操作：   
                0：声明：set([arg1,arg2,arg3])
                1：添加一个元素：s.add(val);
                2：删除一个元素：s.remove(val);
                3：允许求交并差：
                    s1 | s2  :求并集
                    s1 & s2  :求交集
                4：获取长度：len(dict)
                5：检测是否存在指定元素：a in dict、a not in dict
    二：不同数据结构提供的特殊处理方法：
        ###############################################
    三：列表相关处理：
        map：
                map函数：
                功能：允许使用自定义函数对列表的每一项处理，并返回处理后的元素组成的迭代器对象；
                参数：第一个参数是自定义的函数；第二个参数是列表；
                返回值：返回处理之后的元素组成的列表的迭代器对象；
                如：
                        def auto_add (param) :
                        return param+1

                        list_tmp = list(range(1,10))

                        r = map(auto_add,list_tmp)

                        list(r)
    filter：
        功能：允许使用自定义函数对列表的每一个元素处理，然后根据返回值是true还是false决定是保留还是丢弃该元素；
        参数：第一个参数是自定义函数，第二个参数是列表
        返回值：返回通过检测的元素组成的列表
    reduce：
        reduce函数：允许自定义一个函数接收两个参数，（第一次运算时传入列表的第一个元素和第二个元素，之后会把这两个元素运算的结果作为第一个元素与后面传入的元素进行相同的运算）；r
        参数：第一个参数是自定义函数，第二个参数是列表
        返回值：返回运算之后的结果；
    sorted：
        sorted：可以直接对集合排序，默认按照数据大小排序；同时也支持使用自定义函数进行排序；
        参数：第一个参数是列表或者集合，第二个参数使用key=函数名，第三个参数reverse=true则会逆序排序；