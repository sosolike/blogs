模块：
    python的模块就是一个python源码文件，该文件中定义的函数在被其他文件引入之后可以直接调用；
模块的特点：
    1：代码分组易于维护
    2：减少变量、函数命名冲突
    3：自定义的模块名不能和python自带的模块名冲突；
导入模块：
    import xxx 是从 Python 系统库，或者项目的最外层导入 xxx模块。 
    from 模块名 import 函数名 只会将模块中的指定函数导入进来，并不会导入模块所有的函数 
    from 模块名 import * 会将一个模块的所有内容导入到当前命名空间。
    备注：一个模块只会被导入一次，无论使用多少次import，都将只导入一次；
包：
    1：组织模块的虚拟名称，类似于命名空间
    2：包的层级可以有多个，类似多级目录结构；
    3：减少模块命名冲突；对模块而言易于组织易于维护；
    4：导入包中的模块
        import pack1.pack2.pack3.模块名.py  
            此时访问模块的方法需要使用全名去访问
            如：pack1.pack2.pack3.模块名.fun
        from pack1.pack2 import 模块名.py 
            此时访问模块的方法和直接导入模块时访问方法的方式一致；
            如：模块名.fun
        
        from pack1.pack2.模块名 import fun
        也可以直接导入某个包中的某个模块中的某个函数,该方法可以直接使用，无需带上包名和模块名
        
创建模块：
    1：模块中变量和函数的访问权限：
        正常命名的变量和函数模块外部都是可以访问的；
        使用了_xx或者__xx这种命名格式的变量和函数外部不应该被直接引用，仅能在模块内部使用
        类似__xxx__这样的变量名是特殊变量，可以直接引用，但是一般代表特殊含义
    2：模块中除了变量和方法还可以有可执行代码，一般用来初始化模块；
__name__属性：
    一个模块被另一个程序第一次引入时，其主程序将运行，
    一个模块自身在运行的时候__name__ = __main__
    如果__name__ 不等于 __main__的时候则是模块被引入
dir():
    该函数会给出被引入模块的所有属性列表；
python模块路径：
    1：默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在sys模块的path变量中
    2：添加自己的搜索目录：
        1：sys.path.append("path");#运行时有效，运行结束后失效；
        2：设置环境变量PYTHONPATH，该环境变量的内容会被自定添加到模块的搜索路径中；

    

    

