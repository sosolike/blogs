基本语法要求：
    1：语句不需要用 ; 作为语句结束符；原则上一行就是一条语句，如果语句需要换行则使用 \ 换行；但是{}，[]，()中的语句换行无需使用 \ ；
    2：代码块不使用{}作为划分方式，而是通过缩进来确认同一段代码块；即：同一个代码块中的代码缩进必须保持一致；
    3：函数，方法使用空行作为分割，代表一段新的代码开始，类和函数入口也需要空行分割；
    4：注释：
        单行注释：#
        多行注释：#，''',""";
    5：标识符命名规则：
        1：由字母，数字，下划线组成，不能以数字开始；
        2：不能和关键字冲突；
        3：要有可读性；
        4：对大小写敏感；
        5：不推荐使用_或者__作为标识符命名前缀；
    6：字符编码：
        1：python2.x以ascll作为默认字符编码，因此仅仅支持英文，需要输出中文时必须在文件开头加上;# -*- coding: UTF-8 -*-
        2：python3.x默认以utf-8做为字符编码；
基本数据类型：
    1：number类型：
        int: 整数
            特征：允许二进制，十进制，八进制，十六进制；
                 相比python2.x版本没有long型；
                 大小无限制；
            转换：int(var)/int(str,base=n)
                 其中：int(var)默认将变量var转换为十进制整数；
                      int(str,base=n)n为进制，可以将n进制的字符串str转换为10进制的整数；
        float:浮点数
            特征：允许两种表示方式：小数形式，指数形式；
                 大小无限制；
            转换：float(var)
                 其中：float(var)默认将变量var转换为十进制浮点数；

        complex:复数；
    2：布尔类型：
        bool：开关量；
            特征：
                1:python中False和True才代表布尔值，其余如false,true则是非法字符；首字母一定要大写；
                2：python是弱数据类型语言，因此除过False,0,None,'',"",空的列表，空的元祖，空的set以及空的dict以外都是True;
    3：字符串：
        1：被 ' 和 " 包含的认为是字符串；
        2：python中没有字符类型，字符即为长度为1的字符串；
        3：常用的转义字符：\r \n \f \v \t \\ \' \";
        4：不希望转义字符转义时，可以使用r'',或者r""使字符串中的转义字符禁止转义；
        5：字符串使用+来连接；使用*来重复字符串：str*2;
        6：字符串索引规则：从右向左索引以0开始，从右向左以-1开始；
        7：字符串截取方法：变量[头下标:尾下标]：如：str[2],str[2:5],str[2:],str[:5];
        8：字符串长度获取：len(str);
    4：空值：None;和0不同，是标量；而且只能使用None，首字母要大写，而none则是非法字符；
    5：class：对象型；
变量：
    变量声明：
        1：以数字，字母，下划线组成；不能以数字开头；
        2：变量名严格区分大小写；不能和关键字冲突，要有可读性；
        3：python是弱数据类型语言，因此变量在初始化的时候无需指定数据类型；
        4：同一个变量可以指向不同类型的数据；
        5：变量的数据类型和其指向的数据的数据类型相同；
    python中的可变对象和不可变对象：
            1:可变对象：   
                如果一个变量引用的是可变对象，则该变量所指向的存储可变对象值的内存空间中的内容是可以直接改变的；即：内存空间的值可变；
            2:对于不可变对象：
                如果一个变量引用的是不可变对象，则该变量所指向的存储不可变对象值的内存空间中的内容是可以不可以改变的；即：内存空间的值不可改变
            3:python中的可变对象和不可变对象：
                python中的不可变对象：int型，float型，str型，tuple型，None型数据，均是不可变对象；
                python中的可变对象：list,dict 
            4：变量的赋值：
                1：对于可变对象：给变量从新赋值之后，原来变量指向的内存空间的值将会被覆盖；存储上新的值；
                2：对于不可变对象：给变量从新赋值之后，将会开辟一块新的内存来存储新赋的值，当前变量的指向了另外的内存区域；
                3：变量指向的内存地址可以通过id()函数获取；
                4：判断两个变量是否相等可以通过：==来判断；判断两个变量是否指向同一个内存区域可以使用：is来判断；
                    即：==检测的是值，is检测的是内存地址；
            6：变量复制：
                对于可变对象：
                如：b所引用的是可变对象：
                    a = b；本质上是将变量b所引用的数据所在的内存地址赋值给了变量a;变量a也指向了这块内存区域；并不会为a开辟新的内存空间；因此变量a和变量b任意一个的值发生变化，都会引起原先所引用的内存空间中值的变化；
                对于不可变对象：
                如：b所引用的是不可变对象
                    a=b；将变量b的值赋给a的时候，变量a和b将指向同一块内存区域，只有在其中某个变量赋上新值的时候才会为其开辟新内存空间，并将变量指向新内存空间；
运算：
    算数运算：
       1：允许类型：+ - * / // %
       2：不支持自增自减运算
       3：仅支持数字参与运算
       2：/和//的区别：
                    / :除法运算，所得结果是浮点数，即便被整除，结果也是浮点数；
                    //:除法运算，所得结果是整数，即便不能被整除，结果也是整数，小数部分无论大小均被舍去；
    布尔运算：
        1：允许的计算类型：and or not（注意不要使用符号&& || ！）
        2：运算结果：仍是布尔值；
    比较运算：
        1：允许的计算类型：== != > < >= <=
        2：运算结果：仍是布尔值；
        3：is 就是判断两个对象的id是否相同， 而 == 判断的则仅判断内容是否相同。
    赋值运算：
        1：允许的计算类型：= += -= *= /= //= %=
    位运算符：
        &：按位求与运算
        |：按位求或运算
        ^：按位异或运算
        ~：按位取反运算
        <<：左移运算；
        >>：右移运算；
    成员运算符：
        in  如果再指定的序列中找到值返回true，否则返回false;
        not in 如果再指定的序列中没有找到值返回true,否则返回false;
        成员运算符支持：字符串，列表，元祖，字典，集合；
    长度获取：len()
        支持的数据类型有：字符串，列表，元祖，集合，字典；
    
流程控制：
    条件：
            if 表达式 :
                code...
                code...
        或者：
            if 表达式 :
                code...
            else :
                code...
        或者：
            if 表达式:
                code...
            elif 表达式:
                code...
            else :
                code
    循环：
        while循环：
            while 条件 :
                code...
            
        while+else:
            while 条件 :
                code...
            else :
                code...
                (不符合while条件的时候执行,仅执行一次)
        for..in循环：
            for variable in sequence:
                code...
                (variable代表存储遍历出来的值，sequence代表被遍历的集合)

        for..in..else:
            for variable in sequence:
                code...
                (variable代表存储遍历出来的值，sequence代表被遍历的集合)
            else:
                code...
                (for循环正常终止的时候执行)

        遍历数字序列：
            for i in range(5):
                code...
            (该函数只能用来遍历数字序列)
            (range函数可以指定遍历的步长)
            (也可以使用else,在遍历完成之后进入else中执行)
        使用enumerate:
            for index,item in enumerate(sequence):
                code...
            (item代表存储遍历出来的值,index代表存储遍历出来的索引，sequence代表被遍历的集合)
            (也可以使用else,在遍历完成之后执行else中的code)
            (对于dict，key代表从0开始的索引，item是键名，值则需要通过dict的名称获取)
    备注：
        pass：在代码段或者函数中，暂时不做处理或者无内容的时候要使用pass;
              eg:if a>1 : pass

函数：
    函数声明方式：def 函数名 (参数列表) :
                    code...（函数体）
        备注： 
            1：函数以def关键字声明；
            2：函数体必须缩进，且缩进要统一；
            3：多个函数之间用空行隔开；
            4：函数名的命名要根据标识符来进行；

    函数调用：函数名(实参列表)
    函数形参： 
        必选参数;
            1：函数声明时要求了形参，而且没有给出默认值，此时调用函数时必须按照形参顺序给出对应的实参值；
                eg:
                    def a(q,w,e):
                        print(q,w,e)
                    a(1,2,3)
        默认参数：
            2：允许形参设置默认参数，有以下几种情况：
                    def a(q=1,w=2,e=3,r=4):
                        print(q,w,e,r)
                1:此时如果未给出实参值，将直接使用形参设置的默认值；如果给出实参值，则使用实参给出的值；
                2:如果是中间某个形参设置了默认参数，而函数调用时未提供实参值，则该参数以后的所有的参数都赋值时都要带上参数名；
                3：推荐在自定义函数的时候，尽量避免将有默认参数的形参放置在前面或者中间；
                4：如果形参是可变对象，在函数运行期间改变了该可变对象的内容，这种改变实质上是更改了形参变量所指向的内存空间中的内容；所以尽量不要给形参传递可变对象或者将其默认值设置为可变对象；
        可变参数：
            3：a：可以使用*var来存储不定长参数；接收到的参数默认组成一个tuple:
                    def tmp(*t):
                        print(t)
                        print(type(t))
                    tmp(1,2,3)
                    备注：   1：函数中只能将存储不定长参数的变量放置在最后面；不能放置形参列表的前面或者中间位置；
                            2：给存储不定长参数赋值时仍然按照普通的赋值方式赋值；
                            3：不定长参数会将接收到的实参存储在tuple中；
                            4：而且允许使用*list/*tuple将列表和元组中的元素变成可变参数传入；接收到的参数将会组成
                             tuple;
                                def tmp(*t):
                                    print(t)
                                    print(type(t))

                                list_tmp = [1,2,3,4]
                                tmp(*list_tmp)
            关键字参数：
                c：允许使用**var来接收一个dict,接收到之后，该形参相当于复制了一份传进来的dict；
                    备注：1：**var这种方式只能用来接收dict这种类型的实参，
                         2：var本质上就是一个dict，内容是传递给var的实参dict；
                         2：如果通过var改变了传进来的dict的内容，外部的dict不受影响；因此推荐使用这种方式接收dict参数；
                    def tmp(**t):
                        print(t)
                        print(type(t))

                    dict_tmp = {"name":"tom","age":23,"sex":"mail"}
                    tmp(**dict_tmp)
            限制关键字参数：
                e：限制性关键字参数前面需要使用*来分割
                   如果限制性关键字参数前面使用了可变参数：则可以不使用*作为分隔符；
            参数组合：
                必选参数，默认参数，可变参数，关键字参数，限制关键字参数，
                1:尽量避免过多组合；
                2:尽量避免使用限制性关键字参数
                3：推荐直接使用(*var,**param)来接收任意类型，任意多个参数；


    匿名函数：python使用lambda来创建匿名函数；
        备注： 
            1：声明方式：lambda [arg1,[arg2,arg3,...]]:expersion
            2：调用方式：匿名函数需要赋值给变量，通过变量调用；
    
    函数返回值：使用return返回值；
        备注：
            1：如果return没有返回具体的值，则返回none;
    变量作用域：
        变量作用域类型：
            局部作用域；
            闭包函数外的函数中
            全局作用域
        查找规则：
            局部作用域->闭包函数外的函数中->全局作用域;
        作用域围栏：
            python中只有类，函数，模块才会引入新的作用域，其他的代码块是不会产生作用域的；
        作用域访问规则：
            当前作用域声明的变量只能在当前作用域及以下作用域访问；不能向上突破；
        备注： 
            作用域在函数未执行前就已经形成了，作用域链也生成了，
            解释器在查找变量的时候按照上述规则查找；
    尾递归：
        尾递归是指在函数返回的时候，调用函数本身，并且return语句中不能包含任何表达式，称为尾递归；
        尾递归中，无论函数调用多少次，都只占用一个栈帧，不会出现栈溢出的情况；
        但是python解释器并未对尾递归做出优化，因此在函数递归调用的时候还是会有栈溢出；
    高阶函数：
        1：将函数作为实参传递给函数，接收函数作为实参的函数就称为高阶参数函数；通过高阶参数函数可以实现处理函数的无状态特性；
        2：函数可以将函数作为返回值返回；定义在函数中的函数称为闭包函数；或者称为高阶返回函数；
            eg：高阶参数函数：
                def tmp (x,y,f) :
                    return f(x)+f(y)

                def auto_add (param) :
                    return param+1

                print(tmp(-1,-2,auto_add))
            eg：高阶返回函数
            注意：重点：
                1：返回一个函数的时候，该闭包函数并未执行；只有在调用该闭包函数的时候才会执行；
                2：调用闭包函数时，如果闭包函数引用了闭包外部的变量，则该变量的值是外部函数执行完成后对该变量最后一次写入的值；
                3：闭包函数中不要引用外部任何可变对象；原因在于外部的可变对象的值有可能会被更改；
            如：
                def count():
                    fs = []
                    for i in range(1,4):
                        def f():
                            return i*i
                        fs.append(f)
                    return fs

                res = count()
                f1 = res[0]
                f2 = res[1]
                f3 = res[2]
                print(f1())9
                print(f2())9
                print(f3())9
                原因在于每次循环的时候所创建的闭包函数并不会执行，只有在调用f1(),f2(),f3()的时候闭包函数才会执行，此时访问的变量i是最后一次循环修改之后的值；
    
    






        
    


    


        
    
        





    


    

    