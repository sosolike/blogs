1：python3发起请求使用urllib模块，python2发起请求使用urllib和urllib2模块；
2：发起请求的方式：
    1：通过urlopen直接发起请求：
        1：语法：urllib.request.urlopen(url,data=none,timeout)
        2：使用方式：
            1：导入request：from urllib import request
            2：发起请求：request.urlopen(url,data,timeout)
            3：参数：
                1：url：需要被请求的url地址
                2：data：需要发送到请求地址的数据
                    1：如果data为空则是get请求，如果data不为空则是post请求
                    2：python中该data只能是byte类型的数据；
                    3：结合实际一般发送两种格式，但是都需要使用encode进行编码：
                            1：查询字符串："a=a&b=b".encode("utf-8")即可；
                            2：dict字典：parse.urlencode(dict).encode("utf-8")
                    备注：对于字符串直接encode即可，对于dict字典则需要先使用parse模块的urlencode解析成查询字符串再使用encode进行编码；
                3：timeout：超时时间；
            4：返回值：返回一个responce对象；
            5：响应对象提供的方法：
                对数据操作：responce.read()/readline()/readlines()/fileno()
                获取响应头信息：responce.info()
                获取http状态码：responce.getcode()
                获取发起请求的url：responce.geturl()
                获取某个具体的请求头信息：responce.getheader()
                返回请求头信息列表：responce.getheaders()
            6：对于数据操作的几个方法的区别：
                对于读取json格式的数据:read()/readline()/readlines()/fileno()完全一样;
                对于字符串： read()返回所有的字符串
                            readline()一次返回一行字符串
                            readlines()读取所有的字符串内容，存放在dect中，一个项存放一行；
                            (上述三种方式获取到字符串内容以后还需要使用decode("utf-8")解码)
                            fileno()返回响应字符串的个数
                注意：返回的内容要decode("utf-8")才能使用，否则是字节类型的数据
                
    2：先创建request对象，再使用urlopen发送请求：相比上一个请求方式可以设置header头信息；
        1：使用方法：
            1：req = urllib.request.Request(URL,data=None,headers={},method=None);
            2：res = urllib.request.urlopen(req);
        2：使用方式： 
            1：引入urllib包中的request模块：from urllib import request;
            2：创建各项参数：
                url：需要被请求的url地址
                data：需要发送的数据
                headers：需要指定的header头信息
                method：采用的发送方法
        3：发送请求：req = request.Request(url,data,headers,method)
                    res = request.urlopen(req)
        4：获取结果：
            content = res.read().decode("utf-8");
        5：示例：
            request_data = {'name':'ttt','age':23}

            request_obj = request.Request('http://atmp.com/a/a.php',data=parse.urlencode(request_data).encode('utf-8'),method='POST',headers={'Cookie':'uid=12df3;uui=234'})

   3：requests库发送网络请求
        安装requests：pip install requests
        发送get请求：
            发送简单get请求：    
                用法： requests.get(url)      
                示例： requests.get('http://eg.com);
            发送带参数的get请求：
                用法：requests.get(utl,params={})
                示例：request.get('http://eg.com',params={'name':'tom'})
            发送带cookie的get请求：
                用法：requests.get(utl,params={},cookies={'uid':1,'uuid':2})
                示例：request.get('http://eg.com',params={'name':'tom'},cookies={'uid':1,'uuid':2})
                备注：cookies信息也可以使用header头信息来添加：
            
            发送带有header头信息的get请求
                用法：requests.get(url,params={},headers={'Cookie':'uid=1;uuid=123;'});
                示例：requests.get('http://eg.com',params={'name':'tom'},headers={'Cookie':'uid=1;'})
            
        发送post请求：
            发送简单post请求：    
                用法： requests.post(url)      
                示例： requests.post('http://eg.com);
            发送带参数的post请求：(参数使用application/x-www-form-urlencoded对字典编码)
                用法：requests.post(utl,params={})
                示例：request.post('http://eg.com',data={'name':'tom'})
            发送带参数的post请求：(参数为json格式)
                用法：requests.post(utl,params={})
                示例：request.post('http://eg.com',json={'name':'tom'})
            发送带cookie的post请求：
                用法：requests.post(utl,params={},cookies={'uid':1,'uuid':2})
                示例：request.post('http://eg.com',dtaa={'name':'tom'},cookies={'uid':1,'uuid':2})
                备注：cookies信息也可以使用header头信息来添加：

            发送带有header头信息的post请求
                用法：requests.post(url,data={},headers={'Cookie':'uid=1;uuid=123;'});
                示例：requests.post('http://eg.com',data={'name':'tom'},headers={'Cookie':'uid=1;'})
        requests还支持发送PUT,DELETE,HEADER,OPTIONS请求，仅仅只需要将post换成对应的请求方式即可

        特殊说明：
            1：requests支持多种请求方式，具体使用时按照requests.xxx()即可；xxx可以是get.post,put,delete,header,options,

            2：get请求发送数据需要使用params={}；
            3：post、put、delete等需要使用data={}发送数据，如果需要发送json格式的数据需要使用json={}

            4：设置cookie信息可以通过cookies={}来添加cookie信息，也可以使用headers={}来添加cookie信息；

            5：设置timeout信息可以通过timeout=n来设置超时信息，单位为s；
        

        requests请求结果解析：
            1：requests的请求结果是一个response对象
            2：获取相关请求信息：
                获取请求状态码：response.status_code

                获取响应头信息：response.headers;或者：response.headers['Content-Type']

                获取实际请求的url:response.url

                获取响应编码：response.encoding

                获取响应cookie:response.cookies;或者使用response.cookies['cookie_name']

                获取请求内容(字符串格式)：response.text

                获取请求内容(bytes对象)：response.content
                
                获取请求内容(json格式)：response.json()
                




