切片：序列的截取：
    即对于字符串（string），列表（list）,元祖（tuple）,字典（dict）截取区间元素的方法：
    name[n]：取第n个元素
    name[n:]：从第n个元素开始取到最后
    name[n:m]：从第n个元素取到第m个元素
    name[:m]：从第0个元素取到第m个元素
    name[n:m:span]：从第n个元素取到第m个元素，每隔span个元素取一次；
    注意：索引从左向右起始值是0，从右向左起始值是-1；

迭代：
    1：可以通过for...in来遍历元素；
        eg:list = [1,2,3]
           for item in list :
                print(item)
    2：通过迭代器对象：
        eg:list = [1,2,3]
           it = iter(list)  #创建迭代器对象
           print(next(it))  #获取下一个元素
    3：先创建迭代器对象，再使用for循环遍历；
        eg:list = [1,2,3]
           it = iter(list)  #创建迭代器对象
           for item in it :
                print(item)
生成器：yeild
    功能：
        生成器的目的是将一个函数变成一个迭代器；
    使用方式：
        如果需要遍历一个列表或者其他集合，并对该集合中原本的元素加以处理，最后返回一个新的集合或者列表；此时适合使用yeild,尤其在数据量特别大的时候必须使用yeild避免内存占用太多；在需要返回处理之后元素的地方使用yeild即可；
    返回值：
        使用yeild之后返回的是一个迭代器对象，而非集合或者列表；
    详解：
        使用了yeild的函数将不再是一个普通的函数，而是一个迭代器；
        而且也只有在功能是迭代的函数中使用yeild；（在需要返回被返回的值的地方使用yeild）
        该函数将会返回一个迭代器对象，而不是一个具体的值或者一个列表或者其他集合；
        只有在遍历该迭代器对象的时候才会具体执行该函数，并且在yeild关键字处返回对应的值； 
    
    应用示例：自定义处理列表项：
        def mymap (list_tmp) :
        for item in list_tmp :
            item += "tmp"
            yield item

        list_tmp = ["a","b","c"]
        for i in mymap(list_tmp) : #只有在每次循环的时候才会真正去执行mymap这个函数
            print(i) 
列表生成式：
    目的：可以用来生成列表；
    使用：list(range(1,12))
装饰器：
    所谓装饰器只是一个函数，该函数接收一个函数作为参数，并返回一个函数；可以在不改变原有功能代码的基础上添加新的功能；

    1：装饰器一定是在被装饰函数执行之前执行；
    2：装饰器是一个闭包；
    3：该闭包函数接收的参数就是被装饰的函数传入的实参；
    4：该闭包函数返回的函数就是被装饰的函数
    5：注意要把闭包函数接收到的参数传入返回的函数中；

    @语法糖：
        1：使用@方式调用装饰器：
            @outer
            fun()
        2：eg:
            def outer(some_func):
                def inner(c):
                    print(c)
                    c+=1
                    print("before some_func")
                    ret = some_func(c)
                return inner 
            #本质
            inner = outer(a)
            inner(12)
            #@语法糖
            @outer
            def a(b):
                print("origin code",b)
            a(123)
偏函数：
    所谓偏函数就是functools模块提供的一个功能函数，该函数可以把现有的函数的一些可变的参数固定，返回一个新的函数名，方便调用；
    如：
        import functools
        int2 = functools.partial(int,base=2)
        int2(n),会将二进制的字符串n转化为整数；
        //类似于:
        int(n,base=2)


            





    






