切片：
    即对于字符串（string），列表（list）,元祖（tuple）,字典（dict）,集合（set）截取区间元素的方法：
    name[n]：取第n个元素
    name[n:]：从第n个元素开始取到最后
    name[n:m]：从第n个元素取到第m个元素
    name[:m]：从第0个元素取到第m个元素
    name[n:m:span]：从第n个元素取到第m个元素，每隔span个元素取一次；
    注意：索引从左向右起始值是0，从右向左起始值是-1；

迭代：
    1：可以通过for...in来遍历元素；
        eg:list = [1,2,3]
           for item in list :
                print(item)
    2：通过迭代器对象：
        eg:list = [1,2,3]
           it = iter(list)  #创建迭代器对象
           print(next(it))  #获取下一个元素
    3：先创建迭代器对象，再使用for循环遍历；
        eg:list = [1,2,3]
           it = iter(list)  #创建迭代器对象
           for item in it :
                print(item)
生成器：yeild
    生成器的目的是将一个函数变成一个迭代器；
    详解：
        使用了yeild的函数将不再是一个普通的函数，而是一个迭代器；
        而且也只有在功能是迭代的函数中使用yeild；（在需要返回被返回的值的地方使用yeild）
        该函数将会返回一个迭代器对象，而不是一个具体的值或者一个列表或者其他集合；
        只有在遍历该迭代器对象的时候才会具体执行该函数，并且在yeild关键字处返回对应的值；
    何时使用yeild：
        如果需要遍历一个列表或者其他集合，并对该集合中原本的元素加以处理，最后返回一个新的集合或者列表；此时适合使用yeild,尤其在数据量特别大的时候必须使用yeild避免内存占用太多；
    
    应用示例：自定义处理列表项：
        def mymap (list_tmp) :
        for item in list_tmp :
            item += "tmp"
            yield item

        list_tmp = ["a","b","c"]
        for i in mymap(list_tmp) :
            print(i) 
列表生成式：
    目的：可以用来生成列表；
    使用：对于数字：
            list(range(1,12))

装饰器：
    目的：可以在不修改元有方法代码的基础上增加功能；
    语法：本质上装饰器就是一个由返回函数的高阶函数；




    






