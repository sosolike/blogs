高阶函数：
    将函数作为实参传递给函数，接收函数作为实参的函数就称为高阶函数；
    如：
        def tmp (x,y,f) :
            return f(x)+f(y)

        def auto_add (param) :
            return param+1

        print(tmp(-1,-2,auto_add))

map/reduce
    map函数：允许使用自定义函数对列表的每一项处理，并返回处理后的迭代器对象；
    参数：第一个参数是自定义的函数；第二个参数是列表；
    返回值：返回处理之后的元素组成的列表；
    如：
        def auto_add (param) :
            return param+1

        list_tmp = list(range(1,10))

        r = map(auto_add,list_tmp)

        list(r)
    reduce函数：允许自定义一个函数接收两个参数，（第一次运算时传入列表的第一个元素和第二个元素）reduce会把自定义函数的运行结果作为第一个参数和列表的下一个元素做运算；
    参数：第一个参数是自定义函数，第二个参数是列表
    返回值：返回运算之后的结果；

filter:
    功能：允许使用自定义函数对列表的每一项处理，然后根据返回值是true还是false决定是保留还是丢弃该元素；
    参数：第一个参数是自定义函数，第二个参数是列表
    返回值：返回通过检测的元素组成的列表

排序：
    sorted：可以直接对集合排序，默认按照数据大小排序；同时也支持使用自定义函数进行排序；
    参数：第一个参数是列表或者集合，第二个蚕食使用key=函数名，第三个参数reverse=true则会逆序排序；


装饰器：
    所谓装饰器只是一个函数，该函数接收一个函数作为参数，并返回一个函数；可以在不改变原有功能代码的基础上添加新的功能；

    1：装饰器一定是在被装饰函数执行之前执行；
    2：装饰器是一个闭包；
    3：该闭包函数接收的参数就是被装饰的函数传入的实参；
    4：该闭包函数返回的函数就是被装饰的函数
    5：注意要把闭包函数接收到的参数传入返回的函数中；

    @语法糖：
        1：使用@方式调用装饰器：
            @outer
            fun()
        2：eg:
            def outer(some_func):
                def inner(c):
                    print(c)
                    c+=1
                    print("before some_func")
                    ret = some_func(c)
                return inner 
            #本质
            inner = outer(a)
            inner(12)
            #@语法糖
            @outer
            def a(b):
                print("origin code",b)
            a(123)
偏函数：
    所谓偏函数就是functools模块提供的一个功能函数，该函数可以把现有的函数的一些可变的参数固定，返回一个新的函数名，方便调用；
    如：
        import functools
        int2 = functools.partial(int,base=2)
        int2(n),会将n转化为二进制整数；
        //类似于:
        int(n,base=2)
    



    
    




