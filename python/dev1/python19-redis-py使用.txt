python通过redis-py操作redis

python连接redis：
    python不使用连接池连接redis：
        import redis
        red = redis.Redis(host="",port="",db=0)

    python使用连接池连接redis：
        import redis
        pool = redis.ConnectionPool(host="127.0.0.1",port=6379)
        red = redis.Redis(connection_pool=pool)

python操作string：
    set():
        #在Redis中设置值，默认不存在则创建，存在则修改
        r.set('name', 'zhangsan')
        '''参数：
            set(name, value, ex=None, px=None, nx=False, xx=False)
            ex，过期时间（秒）
            px，过期时间（毫秒）
            nx，如果设置为True，则只有name不存在时，当前set操作才执行,同setnx(name, value)
            xx，如果设置为True，则只有name存在时，当前set操作才执行'''
    mset()
        #批量设置值
        r.mset(name1='zhangsan', name2='lisi')
    get()
        #取某个值
        get(name)
    mget()
        #批量取值
        mget("name1","name2")
python操作Hash
    hset(name, key, value)
        #name对应的hash中设置一个键值对（不存在，则创建，否则，修改）
        r.hset("dic_name","a1","aa")

    hmset(name, mapping)
        #在name对应的hash中批量设置键值对,mapping:字典
        dic={"a1":"aa","b1":"bb"}
        r.hmset("dic_name",dic)

    hget(name.key)
        r.hset("dic_name","a1","aa")
        #在name对应的hash中根据key获取value
        print(r.hget("dic_name","a1"))#输出:aa

    hgetall(name)
    #获取name对应hash的所有键值
    print(r.hgetall("dic_name"))

    hmget(name, keys, *args)
        # 在name对应的hash中获取多个key的值
        print(r.hmget("dic_name","a1","b1"))
    
    hlen(name)、hkeys(name)、hvals(name)

    #hlen(name) 获取hash中键值对的个数
    print(r.hlen("dic_name"))

    #hkeys(name) 获取hash中所有的key的值
    print(r.hkeys("dic_name"))

    #hvals(name) 获取hash中所有的value的值
    print(r.hvals("dic_name"))

    hexists(name, key)
    #检查name对应的hash是否存在当前传入的key
    print(r.hexists("dic_name","a1"))#输出:True

    hdel(name,*keys)
    #删除指定name对应的key所在的键值对
    r.hdel("dic_name","a1")
List操作：
    lpush(name,values)
    # 在name对应的list中添加元素，每个新的元素都添加到列表的最左边
    r.lpush("list_name",2)
    r.lpush("list_name",3,4,5)#保存在列表中的顺序为5，4，3，2

    rpush(name,values)
    #同lpush，但每个新的元素都添加到列表的最右边

    lpushx(name,value)
    #在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边

    rpushx(name,value)
    #在name对应的list中添加元素，只有name已经存在时，值添加到列表的最右边

    lpop(name)
    #移除列表的左侧第一个元素，返回值则是第一个元素
    print(r.lpop("list_name"))


    rpop(name)
    #移除列表的右侧第一个元素，返回值则是第一个元素
    print(r.rpop("list_name"))



    llen(name)
    # name对应的list元素的个数
    print(r.llen("list_name"))

    r.lset(name, index, value)
    #对list中的某一个索引位置重新赋值
    r.lset("list_name",0,"bbb")

    r.lrem(name, value, num)
    #删除name对应的list中的指定值
    r.lrem("list_name","SS",num=0)

    ''' 参数：
        name:  redis的name
        value: 要删除的值
        num:   num=0 删除列表中所有的指定值；
            num=2 从前到后，删除2个；
            num=-2 从后向前，删除2个'''
    
    lindex(name, index)
    #根据索引获取列表内元素
    print(r.lindex("list_name",1))

    ltrim(name, start, end)
    #移除列表内没有在该索引之内的值
    r.ltrim("list_name",0,2)

    rpoplpush(src, dst)
    # 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
    #src 要取数据的列表
    #dst 要添加数据的列表

    brpoplpush(src, dst, timeout=0)
    #同rpoplpush，多了个timeout, timeout：取数据的列表没元素后的阻塞时间，0为一直阻塞
    r.brpoplpush("list_name","list_name1",timeout=0)








    

    










    

