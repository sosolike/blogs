使用os模块操作目录：
    导入os模块：import os

    相关目录操作：
        1：创建目录:
            #在指定位置创建一个目录,要求路径从倒数第二级之前的路径必须存在，否则将报FileNotFoundError异常；
            os.mkdir(path)：

            #创建多级目录，多级目录如果不存在将会自动创建，不会报告FileNotFoundError
            os.makedirs():创建多级目录

        2：删除目录：
            #删除指定目录，并且该目录必须是空目录,如果待删除目录非空将会报告OSError异常；如果待删除目录不存在将会报告FileNotFoundError异常；
            os.rmdir(path)

            #删除非空目录，需要使用shutil模块的rmtree方法；如果待删除目录不存在将会报告FileNotFoundError异常；
            import shutil
            shutil.rmtree(path)

        3：重命名当前目录
            #重命名目录，如果原始目录不存在将会报告FileNotFoundError异常；
            os.rename("oldpath","newpath")

        4：读取目录：
            #读取目录中文件/子目录列表，并返回一个list对应相关名称；
            os.listdir(path)

        5：获取当前的工作目录：
            #获取当前脚本的目录路径；不包含文件名，仅为当前脚本的目录；
            os.getcwd()

    路径相关操作：
        路径相关操作需要使用os.path模块
        1：连接路径：
            #由于不同操作系统的路径分隔符不同，尽量避免使用路径分割符直接拼接路径，而是使用系统函数来拼接：
            os.path.join(path1,path2)

        2：拆分路径：
            #将文件路径拆分为目录+文件名称.扩展名,返回一个tuple(目录路径,文件名.扩展名)
            os.path.split(path)

        3：获取文件扩展名：
            #返回文件的扩展名
            os.path.splitext(path)：

        4：获取路径名：
            os.path.dirname()
            
        5：获取文件名：
            os.path.basename()
        
        6：获取当前路径的绝对路径：
            os.path.abspath()，如获取当前文件的绝对路径：
                os.path.abspath(__file__)
    
    文件操作：
        检测相关操作：
        #检测是否是文件
            os.path.isfile()    
        #检测是否是目录
            os.path.isdir()   
        #检测目录或者文件是否是绝对路径  
            os.path.isabs() 
        检测文件或者目录是否存在    
            os.path.exists()    

        文件信息获取类：
        #获取文件大小
            os.path.getsize()   
        #获取文件属性
            os.path.stat() 
        #获取文件访问时间     
            os.path.getatime(filePath)  
        #获取文件创建时间
            os.path.getctime(filePath)  
        #获取文件修改时间
            os.path.getmtime(filePath)  
    
    1：删除文件：
        os.remove(path)：删除文件
    2：重命名文件：
        os.rename(origin_name,new_name)重命名文件；
    3：移动文件
        import shutil 
        shutil.move("oldpath","newpath")
    4：复制文件：
        shutil.copy("oldpath","newpath")

文件内容相关操作：
    python中不支持直接通过文件路径操作文件内容，只能通过创建文件句柄来操作文件内容
    1：打开文件：
        函数：open(file_path,mode)
        参数：file_path：文件具体路径
             mode：打开文件的模式：r/r+;w/w+;a/a+;如果写入的是字符串则不要带b,如果写入的是二进制数据则必须带上b；
        返回值：返回一个文件的标识符；即文件对象；如：f = open(path_file,"ab+");

    2：读取文件内容：
        f.read([size])：
            1：无参数：读取文件所有内容，以字符串的形式返回；
            2：有参数：可以指定需要读取的数据数目；以字符串形式返回；
        f.readline():
            1：默认无参数，一次读取一行，并以字符串的形式返回；
        f.readlines()：
            1：默认无参数，返回一个list,一行是一项

    3：向文件写入内容：
        f.write(string)
            1：按照指定的模式向文件写入内容;
            2：写入之后必须使用f.flush()或者f.close()才能真正将内容写入到文件中；

        f.writelines([str1,str2,str3])
            1：将一个列表中的内容写入文件，默认不换行，换行须自行添加\r\n;

    4：文件锁：
        在多个进程同时向文件写入内容时需要对文件上锁，否则文件内容将会混乱；对文件上锁需要使用fcntl模块：
        #导入fcntl模块
            import fcntl
        #在对文件内容操作之前上锁
            fcntl.flock(f,lock_type)
        
        #在对文件内容操作完毕之后删除锁，或者在进程结束之后文件锁失效，以及在调用文件标识符的close()函数关闭文件之后失效：
            fcntl.flock(f,lock_type)
        
        #锁类型：
            fcntl.LOCK_SH：创建一个共享锁，在读文件时使用；
            fcntl.LOCK_EX：创建一个排他锁，在写文件时使用；
            fcntl.LOCK_UN：删除该进程创建的锁；


    4：文件指针操作：
        f.tell()：返回当前文件指针所指位置，即文件开头到指针当前位置处的字节数；
        f.seek(offset, from_what)：改变当前文件指针位置；
            offset：是指移动的字符个数；
            from_what：指的是从哪里开始：0：从文件首行首字符开始；1：从当前位置；2：从文件的结尾往前移动offset个字符

    5：关闭文件：
        f.close()：关闭文件； 

    6：其他操作：
        f.flush()：将需要写入文件的内容立刻刷新到文件中；
        f.fileno()：返回一个整形的文件描述符；