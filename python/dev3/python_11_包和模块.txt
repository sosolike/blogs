python中通过包、模块的方式组织管理代码：
    |--包
        |--模块
        |--包
            |--模块
            |--包
    1：其中，目录对应的是包的概念，python文件对应的是模块的概念；
    2：在python2中，__init__.py是包的标识，目录中有__init__.py文件才能认为该目录是一个包，该目录中的python文件是模块；
    3：在python3.3中，__init__.py文件不是必须的；无论是否有__init__.py，项目中的目录都会被当做包来看待；其python文件也会被当做模块来看；
    4：__init__.py文件的作用：
        1：用来对模块进行初始化操作，在导入包中的模块时，会优先执行__init__.py文件中的代码；因此在导入本包模块时如有需要初始化的操作，可以在该文件中进行；

python中的模块：
    python中，模块即指python源文件，一个python文件即称之为一个模块；

    模块的意义：
        1：方便代码的组织管理，查找维护；
        2：能够产生作用域，避免标识符重名带来问题；
    
    模块的名称：
        1：每一个模块都会有一个__name__属性，该属性表示模块的名称；
        2：在导入模块时，模块的名称为python文件的文件名，即__name__的值为当前文件名；
        3：在当做可执行文件执行时，其名称为__main__,即__name__的值为__main__；

    模块的导入方式：
        #导入整个模块，模块中的函数、全局变量、类需要使用 ModuleName.name 来访问
        import ModuleName

        #导入模块中指定的内容,模块中的函数、全局变量、类可直接使用被导入成员的名称来访问
        from ModuleName import name

        #导入模块中的所有内容，模块中的函数、全局变量、类可以直接使用被导入成员的名称来访问
        from ModuleName mport *

        注意：
            1：模块只会导入一次，无论导入多少次，模块中的内容只会在第一次导入
            2：所有的python文件都应该是可导入的，即python文件中的可执行内容务必在 __name__ == "__main__" 时执行；避免因为误导入二造成未知错误；
        
    模块的导入路径：
        1：首先会在当前包中查找模块;
        2：如果当前包未找到指定模块，将会从内置的built-in模块中查找；
        3：如果在built-in模块中也未找到，将会从系统环境变量中配置的路径中查找；
        4：如果上述三个方式都未找到将会报ModuleNotFoundError异常；
        5：除此之外，还可以手动添加模块路径：
            import sys
            sys.path.append("模块所在路径")
            import 模块名
            在一个项目的起始文件可以使用该方式设置当前项目的模块路径：
                import sys,os
                propath = os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)),"."))
                sys.path.append(propath)
    
    模块的初始化：
        1：模块中可以包含可执行语句，在python作为模块导入时执行，即__name__ != "__main__"时执行；但是无论模块被导入多少次，该可执行语句仅执行一次；

python中的包：
    包在python中即为目录，一个目录称之为一个包；包中包含模块和对应的子包；

    包的作用：
        1：方便对模块进行组织管理，查找维护；
        2：能够产生作用域，防止不同模块的同名标识符冲突；

    通过包名导入模块：
        #直接导入包中的模块，通过该方式导入的模块，访问模块中成员时需要使用全路径来访问：如：pack1.pack2.pack3.模块名.func_name
        import pack1.pack2.pack3.模块名 
        
        #导入包中的指定模块，通过该方式导入的模块，访问模块中成员时需要使用模块名来访问：模块名.func_name
        from pack1.pack2 import 模块名

        #导入包中指定模块的指定成员：通过该方式导入的模块，访问模块中成员时可以直接使用成员名来访问：func_name
        from pack1.pack2.模块名 import fun

别名：
    导入的包名，模块名，模块中的成员名，均可使用 as 来创建别名；如：
      from pack1.pack2.模块名 import fun as func   #在使用时即可通过func()来调用模块中的fun函数  

重新加载模块内容：
    由于模块一旦导入，后续的再次导入只是增加对已导入模块的引用，并不会重新加载模块内容，因此，如果需要重新加载模块内容时可以使用reload()函数重新加载模块；如：
        from package import module_name

        #需要重新加载模块内容时：
        reload(module_name)

python中导入模块的注意事项：
    1：尽量按需导入，避免导入模块中所有的内容；
    2：尽量避免模块的嵌套导入问题；两个模块互相导入时将会出错，因此应该避免；
