python函数：
    1：函数的定义方式：
        def 函数名称(形参列表):
            函数体
    
        函数定义中的规范：
            1：函数需要使用def关键字来定义；
            2：函数名称应该遵守python标识符命名规范；
            3：python中的函数体不使用 {} 来包裹，而是通过相同的 缩进 来确认同一个函数体；
            4：除非函数本身功能、代码、结构简单以外，函数内部应当使用文档字符串进行描述；
            5：函数在python中属于一等对象，函数之间应当使用两个空行来分隔开，以保证可阅读性；
    
    2：函数的形参列表：
        python中支持5中类型的参数：必选参数、默认参数、可变参数、关键字参数、限制性关键字参数；
        1：必选参数：
            声明方式：函数中声明了形参，但是没有给定默认值，在调用函数时，就必须按照函数名称/顺序给出实参数据：func_name(arg1,arg2)

            传参方式：1：按照顺序传入实参：func_name(1,2)
                     2：按照参数名称传入实参：func_name(arg1=1,arg2=2)

            注意事项：函数调用时必须传入实参数据，实参数据将会按照顺序/名称赋值给形参；形参的数据是实参的副本，而非实参本身；
        
        2：默认参数：
            声明方式：函数中声明了形参，且给定了默认值，在调用函数时，可以不用给定实参数据，函数将会使用默认值：func_name(arg1,arg2=2)

            传参方式：1：按照顺序传入实参：func_name(1,3)：arg1=1，arg2=3 或者 func_name(1)：arg1=1,arg2=2
                     2：按照名称传入实参：func_name(arg1=1,arg2=3)：arg1=1，arg2=3 或者 func_name(arg1=1)：arg1=1,arg2=2

            注意事项：1：默认参数之后不允许再有必选参数；
                     2：默认参数是在解释器读完函数内容之后就完成的初始化，并且默认参数的值将会存储在函数对象的__defaults__属性中；
                     3：在函数调用时未给定默认参数值，且函数内部没有给默认参数重新赋值时，函数内部将会自动使用__defaults__的值，并且在函数内部修改了该形参的值，那么后续调用函数将会直接使用该形参修改之后的值；
                     4：基于3，以及python中的可变对象和不可变对象的原因，应当避免使用可变对象作为函数形参；
        
        3：可变参数：
            声明方式：函数中可以通过一个参数接收多个实参，这种参数称之为可变参数：func_name(arg1,*arg2)

            传参方式：1：按照名称传参：func_name(arg1=1,2,3,4) :arg1=1，arg2=(2,3,4)
                     2：按照顺序传参：func_name(1,2,3,4) :arg1=1，arg2=(2,3,4)
                     3：对于可变参数本身，可以直接使用list或者tuple传入：func_name(1,*[2,3,4]) 或者func_name(1,*(2,3,4))
            
            注意事项：1：可变参数只能放置在必选参数和默认参数之后
                     2：可变参数存在的目的在于使用一个参数接收多个实参，并且会将实参按传入顺序存放在tuple中；
                     3：使用可变参数接收list类型实参和直接使用必选/默认参数接收list类型的实参具有根本的不同：
                        使用可变参数接收list类型的实参，可变参数的值仅为实参的副本，其内存地址不同，是实参的一份拷贝；对关键字参数做出修改并不会影响外部实参的值；并且函数接收到的数据会保存在tuple中，可以防止函数中误改型参值；
                        使用必选参数或者默认参数接收list类型的实参，此时向函数传递的是实参的引用，即必选/默认参数和实参指向同一个list;在函数内部对list的值做出修改将会影响外部的实参；
                    4：基于第3条，建议使用可变参数的方式接收list类型的实参；而非直接使用必选参数或者默认参数接收list类型的形参；
        
        4：关键字参数：
            声明方式：关键字参数用来接收dict类型实参的键值对：func_name(arg1,**arg2)

            传参方式：1：按照名称传参：func_name(arg1=1,**{'key1':value})
                     2：按照顺序传参：func_name(1,**{'key1':value})

            注意事项：1：关键字参数只能放置在必选参数、默认参数、可变参数之后；
                     2：使用关键字参数接收dict类型实参和直接使用必选/默认参数接收dict类型的实参具有根本的不同：
                        使用关键字参数接收dict类型的实参，关键字参数的值仅为实参的副本，其内存地址不同，是实参的一份拷贝；对关键字参数做出修改并不会影响外部实参的值；
                        使用必选参数或者默认参数接收dict类型的实参，此时向函数传递的是实参的引用，即必选/默认参数和实参指向同一个dict;在函数内部对dict的值做出修改将会影响外部的实参；
                     3：基于第2条的原因，建议使用关键字参数接收dict类型的实参，而非直接使用必选参数或者默认参数接收dict类型的形参；
        
        5：命名关键字参数：
            声明方式：命名关键字参数用来明确的表示，向命名关键字参数传参时必须指定命名关键字参数的名字；func_name(arg1,*,arg2)

            传参方式：1：按照名称传参：func_name(arg1=1,arg2=2)
                     2：按顺序传参：func_name(1,arg2=2)
            
            注意事项：1：命名关键字参数之前必须使用*隔开，且*之后的都将被认为是命名关键字参数；
    
    3：函数的返回值：
        函数中使用 return 来返回值；可以允许存在多个return,但是仅第一个会执行；
        如果没有明确的返回一个值，函数执行完成之后将会返回None

    4：函数的调用：
        python中函数可以直接使用函数名调用；也可以将函数赋值给变量之后，通过变量来调用
    
    5：高阶函数：
        1：在python中，函数可以作为参数传递给另外一个函数，那么接收一个函数作为参数时，该函数称之为高阶函数；
        2：python内置的几个高阶函数：
            map()和reduce():
                map()函数接收两个参数，第一个参数为函数名，该函数中指定要对序列中每一个元素所做的操作；第二个参数为一个序列；map()函数的作用在于将序列中的每一个元素都作用于传入的该函数，并返回一个新的值，所有返回的值组成一个新的序列；如：
                    def map_fun(x):
                        return x*2
                    
                    map(map_fun,[1,2,3,4]) :[2,4,6,8]
                
                reduce()函数接收两个参数，第一个参数为函数名，该函数中指定对第一个和第二个参数的操作；第二个参数为一个序列；reduce()函数的作用在于，先向目标函数传入序列的第一个元素和第二个元素，将其操作结果作为第一个元素；然后将第三个元素作为目标函数的第二个参数，进行下一轮计算，直至序列元素结束；并返回最终计算的值；该函数在python2中是内置函数，在python3中被放入到functools中；
                    from functools import reduce
                    def reduce_fun(x,y):
                        return x+y
                    
                    reduce(reduce_fun,[1,2,3,4]) :10 
                
            filter()函数：
                filter()函数接收两个参数：第一个参数为函数，第二个参数为序列对象；该函数的作用在于将序列中的每一个元素作用于形参接收到的函数，并根据该函数返回的布尔值来决定是否保留该元素，实现对序列中元素的过滤；最终返回一个过滤后的元素组成的序列；
                def check(x):
                    if x%2==0:
                        return True
                    else:
                        return False
                filter(check,[1,2,3,4]) :[2,4]
            
            sorted()函数：
                python2中：
                    sorted()函数接收两个参数：第一个参数为序列对象，第二个参数为自定义函数；该函数的作用在于将序列安装函数指定的比较方式排序；依据函数返回的0/1、-1来确定两个元素的大小顺序；主要用来以自定义的方式对序列进行排序；
                    def sort(x,y):
                        if x>y:
                            return -1
                        elif x<y:
                            return 1
                        else:
                            return 0
                    
                    sorted([1,2,3,4],sort) :[4,3,2,1]
                python3中：
                    sorted()函数接收三个参数：第一个参数为序列对象，第二个参数为key,第三个参数为reverse；
                        其中：序列对象指待排序的序列
                             key指需要用来排序的元素
                             reverse如果为True则逆序排序，如果为False则顺序排序；
    6：返回函数(闭包)：
        1：python中可以将一个函数作为另一个函数的返回值返回；如：
            def outfunc():
                innerfunc():
                    print('inner')
                
                return innerfunc

        2：在一个函数中将另一个函数作为返回值返回的编码方式称之为闭包；外层函数调用之后返回的是内层函数，而不是内层函数的执行结果；在执行完外层函数的返回值(即内层函数)之后，才能得到函数的返回结果；

        3：闭包的特征：
            1：外层函数调用返回的是内层函数，而不会执行内层函数，只有真正调用内层函数之后才会执行内层函数；
            2：闭包中，内层函数如果持有外层函数的变量，那么在执行完外层函数之后，被内层函数所持有的变量并不会销毁；内层函数中所持有的外层函数中的变量的值是外层函数最终执行完成后最后一次对该变量赋的值；如：
                def outer():
                    i = 0
                    for x in range(5):
                        i = x
                        def inner():
                            print(i)
                
                inner_func = outer()
                inner_func()：4
            3：内层函数中如果持有外层函数的可变对象，那么外层函数一旦对该可变对象的值做出修改之后，内层函数所持有的的该可变对象的值也将改变，会引起一些数据上的错误；
    
    7：lambda表达式：
        python中支持使用匿名函数，即使用lambda定义函数；
        1：lambda表达式语法：lambda 形参列表:表达式

        2：语法说明：
            1：lambda表达式必须使用lambda标注；
            2：形参列表和lambda之间有一个空格，形参列表中多个参数使用','隔开；
            3：表达式即为函数的处理逻辑，并且只允许一个表达式，最多支持三目运算符，更复杂的表达式不支持；
            4：表达式中不用使用return,表达式的结果就是返回值；

        3：示例：lambda x,y:x*y    #计算x*y的积

        4：lambda可以直接作为函数的实参传入函数，也可以赋值给变量，通过变量调用；
    
    8：python中函数的特征：
        1：python中一切皆对象，函数也不例外，本质上函数也是对象，每一个函数都是function类的实例对象；
        2：python中函数是一等对象，即函数本身可以赋值给变量或者数据结构中的元素，函数可以作为另一个函数的参数，函数也可以作为另一个函数的返回值；
        3：函数中常用的几个属性：函数即是对象自然就有与之相关的属性，常用的有：
            __name__：函数的名称
            __defaults__：函数形参的默认值；
            __code__：编译成字节码的函数元数据和函数定义体；
            __closure__：函数闭包，即自有变量的绑定，默认是None；
        4：由于python中可变对象的特殊性，尽量避免使用可变对象作为默认参数，对于list和dict推荐使用可变参数和关键字参数接收；

python装饰器：
    1：装饰器的作用在于装饰函数；即在不改变原函数逻辑的情况下，在执行原函数之前或者之后执行一些另外添加的逻辑内容；

    2：装饰器的实现原理在于：在执行函数之前或者之后添加所需要的逻辑，并对函数从新封装，在需要的地方执行封装之后函数；

    3：装饰器的实现：由于装饰器装饰函数之后，需要将装饰完成的函数返回，在需要的地方执行被装饰之后的函数；python中只有借助闭包来实现：执行完外层函数之后会返回内层函数，而不会直接执行内层函数，返回的内层函数可以根据需要调用执行，符合装饰器的需要，因此装饰器需要借助闭包来实现；

    4：闭包实现装饰器：
        闭包实现装饰器的原理在于：将被装饰函数作为外层函数的参数，传递至外层函数；在内层函数中调用传入的函数；并根据需要在函数调用之前或者之后执行相关逻辑，即可实现对函数的装饰；如：
            def out_dec(func):
                inner_dec():
                    print("在执行之前添加逻辑")
                    func()
                    print("在执行之后添加逻辑")
            
            def wait_decfunc():
                print("原函数")

            deced_func = out_dec(wait_decfunc)    #调用外层函数传入被装饰函数名，即可得到被装饰之后的函数
            deced_func()    #调用被装饰之后的函数，即可执行被装饰的函数；

    5：python中提供了 '@' 来代替调用外部函数以返回被装饰函数的过程；如：
        @out_dec
        def wait_decfunc():
            print("原函数")
        
        wait_decfunc()    #通过@的方式来装饰函数，在调用时直接调用原函数即可；
    
    6：常用的几种装饰器：
        1：被装饰函数有参数：
            def out_dec(func):
                #函数被装饰完成之后返回的是内层函数，调用时也是调用内层函数，所以内层函数本身的参数需要和原函数保持一致或者对应起来
                inner_dec(param,param2):        
                    print("在执行之前添加逻辑")
                    func(param,param2)
                    print("在执行之后添加逻辑")
        
        2：装饰器函数带有参数：
            #装饰器函数本身带有参数时，需要使用三级封装来实现；
            def decorateParam(param):   
                def decorate(funed):
                    def decorate_fun(param1,param2):
                        print("param")
                        print("装饰指定函数")
                        funed(param1,param2)
                        print("装饰指定函数")
                    return decorate_fun
                return decorate
    
    7：多个装饰器装饰函数：
        python中支持多个装饰器装饰一个函数，系统将会按照装饰器顺序依次装饰；@装饰器越靠近函数，就越先被用来装饰函数；如：
            @deca
            @decb
            def funca():
                print("func")

            系统会先使用decb装饰器装饰函数funca,然后再使用deca装饰器装饰decb装饰完之后的函数；