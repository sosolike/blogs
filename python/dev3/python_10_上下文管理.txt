上下文：
    在进行某个操作之前所做的操作称之为上文，在进行某个操作之后所做的操作称之为下文；

上下文管理：
    在某些情况下，进行某项具体的操作之前需要先进行一些初始化工作，比如资源的分配等；在某项操作进行完之后，无论该操作执行成功还是异常，都需要进行一定的善后工作，比如对分配的资源进行销毁等；这种某项操作的前置操作和后置操作称之为上下文管理；

上下文管理的特征：
    1：上下文管理的意义在于进行某项操作之前能够进行资源的创建等一些初始化操作；在进行某项操作之后能够进行资源回收及一些善后工作；让操作本身专注于具体的事务逻辑；
    2：上下文管理的技术实现在于前置和后置操作；
    3：上下文管理中，下文管理在操作执行失败或者异常或者成功都要得到执行；

上下文管理的实现：
    1：通过try...finally实现上下文管理：在try语句的finally块中，无论try语句中是否发生异常，finally中的逻辑都将得到执行；借此可以实现上下文管理；
        try:
            #执行某些初始化操作
            print("init")
            #执行具体的业务逻辑
            print("do something")
        except Exception as e:
            #处理某些异常
            print("salve exception")
        finally:
            #执行某些善后操作
            print("destory resource")
    
    2：通过实现上下文管理协议实现上下文管理：使用try语句块即可实现上下文管理，但是如果try语句块使用过多将会对编码不友好，因此，python中提供了with语句(with context_expr() as var:)和上下文管理器来简化上下文管理：
        1：上下文管理器：实现了上下文协议的对象即称之为上下文管理器；
            1：上下文协议：即指实现__enter__(self)方法和__exit__(self)方法，__enter__方法会在执行其他实例方法之前先执行；__exit__方法会在执行其他实例方法之后执行，并且无论其他的实例方法是否出现错误、异常还是正常执行完成，__exit__方法都会被执行；

            2：__enter__(self)方法和__exit__(self)方法： 
                __enter__(self)方法，接受一个参数：self,代表实例对象本身；并且__enter__方法的返回值将会赋值给with语句中as子句之后的变量；因此在自定义上下文管理器时，__enter__方法必须返回self实例对象本身；

                __exit__(self,e_t,e_v,t_b)方法，接收四个参数：self:代表实例对象本身，e_t代表异常的类型，e_v代表异常的实例对象，t_b代表traceback异常栈；如果with语句块中的逻辑成功执行，那么代表异常的三个参数均为None;__exit__(self)参数无需返回值；
        
        2：with语句：
            1：with语句用来简化try...finally来实现对上下文的管理，必须和上下文管理器配合使用；

            2：with语句语法：with context_expression [as target(s)]；其中context_expression必须返回一个上下文管理器对象；并且在with语句带有as子句时，会将上下文管理器对象赋值给target(s)；target(s)可以是单个变量，或者是元祖；

            3：with语句的执行过程：
                1：首先创建上下文管理器对象；
                2：执行上下文管理对象的__enter__方法；
                3：在try语句块中执行with语句块中的代码；
                4：检测with语句块中的代码是否抛出异常，如果抛出异常则继续向外层抛出；
                5：在finally语句块中调用上下文管理器对象的__exit__方法
            
            4：with语句只能作用于上下文管理器(否则调用__enter__方法和__exit__方法时将会报异常)，相同的，上下文管理器必须借助with语句才能实现上下文管理功能(否则，__enter__和__exit__方法无法被调用);

    3：通过contextlib模块实现上下文管理：直接实现上下文管理协议创建上下文管理器的方式在面向对象编码时可以方便的实现上下文管理；但是对于面向过程式的编码方式不够友好，python提供了contextlib模块，通过该模块可以将一个生成器函数修饰为上下文管理器；
        1：contextlib模块的contextmanger装饰器可以将一个生成器函数修饰为上下文管理器；在使用with语句调用该生成器时，生成器函数的yield值将会赋值给as子句的target(s)，并且with语句块中的内容执行完毕或发生错误、异常等将会激活生成器函数，执行yield之后的逻辑；因此，可以将资源的创建放在yield之前，并将创建好的资源通过yield返回；在yield之后执行资源的销毁逻辑；

        2：具体实现示例：
            from contextlib import contextmanager

            @contextmanager
            def func():
                #创建资源、初始化操作
                print("init resource")

                #返回资源
                yield resource

                #销毁资源、善后操作
                print("destory resource")

            with func() as resource:
                #处理具体逻辑
    
    4：多个上下文管理器的嵌套：nested()函数；
        1：多上下文管理器嵌套：
            with A() as X:
                with B() as Y:
                 with C() as Z:
                    #do something
        
        2：使用nested()函数：
            with nested(A(),B(),C()) as X,Y,Z:
                #do something
    
    5：with语句和try...except:
        1：使用with语句发生异常时，仅仅是会保证__exit__函数一定得到执行，但是所发生的错误异常仍然会向上抛出，直至被捕获或者打印至控制台；因此with语句代替不了try...except;在使用with语句来进行上下文管理时，如果对可能抛出的错误异常需要进行处理，仍然需要使用try...except进行捕获并处理；
        