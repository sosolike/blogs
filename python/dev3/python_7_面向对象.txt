python面向对象：
    1：类的定义：
        1：定义语法：class ClassName(inheritedClass):
                        class_attr = value    #定义类属性

                        def __init__(self):
                            #定义构造方法
                            self.obj_attr = value    #定义一个实例属性
                        
                        def func(self):
                            #定义实例方法
                        
                        @staticmethod
                        def func():
                            #定义一个静态方法
                        
                        @classmethod
                        def func(cls):
                            #定义一个类方法
        
        2：类定义说明：
            1：python中使用class关键字定义一个类；
            2：类名推荐使用首字母大写的命名方式；并且要符合python中标识符命名规范；
            3：在类后使用()来表示当前类需要继承的父类，python中支持多继承，因此继承多个父类时使用','分隔开多个父类；
            4：类中成员包括：类属性，实例属性，类方法，静态方法，实例方法，构造方法以及魔术方法；类成员无需{}包裹，但是需要保持相同的缩进；

    2：对象的创建：
        1：对于对象和类的关系：
            类是用来创建对象的模板，对象则是类具体化的实例；

        2：对象的实例化：
            obj = ClassName()           #构造方法无明确需要传入的形参
            obj = ClassName(arg1,arg2)  #构造方法有明确需要传入的形参
        
        3：几个操作对象的常用函数：
            dir(obj)   #获取对象的所有属性以及方法
            isinstance(obj,ClassName)    #检测对象是否是指定类的实例
            hasattr(obj,'x')    #检测对象是否有指定属性

    3：类成员-属性：
        1：属性有两种：类属性和实例属性；
        2：类属性：该属性属于类，不属于实例对象；对象的创建并不会影响类属性的值，在对象创建之后，所有对象中的类属性都是完全相同的；
            1：类属性的特征：
                1：在类初始化的时候即初始化类属性，类被销毁时即被销毁，类属性的生命周期和类相同；
                2：类属性只能在类内部定义；不能在类中其他方法中定义，否则将成为方法中的局部变量；如：
                    class ClassName():
                        class_attr = 1      #class_attr是在类内部定义类属性

                        def func(self):
                            var_name = 1    #var_name属于实例方法func的局部变量
                3：类属性只能通过类名访问：无论是在类内部的方法中还是类外部访问，类属性都必须使用类名来访问；如：
                    class ClassName():
                        class_attr = 1    #类属性

                        def func(self):
                            print(ClassName.class_attr)         #在类内部方法中访问类属性
                        

                    ClassName.class_attr    #在类外部方法中访问类属性
                
        3：实例属性：该属性属于对象本身；并且不同对象中的实例属性属于各自对象；
            1：实例属性特征：
                1：实例属性属于对象，每创建一个对象，这些实例属性就会被创建一次；每一个对象中都有各自的实例属性，不同对象的实例属性互相独立；
                2：实例属性在创建对象时定义并初始化，对象被销毁时也将被销毁，其生命周期和对象本身相同；
                3：实例属性定义：
                    1：可以在构造方法、实例方法中通过 self.实例属性名 来定义；构造方法中和实例方法中定义的实例属性，每一个对象中都会存在一份；
                    2：可以通过实例对象定义，obj.实例属性名；通过实例对象定义的属性只有当前实例对象有；
                    3：不允许再静态方法、类方法中定义或者调用实例属性
                    示例：
                        1：在类构造方法中和实例方法中定义：
                        class ClassName():
                            def __init__(self):
                                self.obj_attr = 1    #在构造方法定义实例属性
                            
                            def func(self):
                                self.obj_attr = 1    #在实例方法中定义实例属性
                        
                        2：通过实例对象定义：
                            obj = ClassName()
                            obj.obj_attr = 1    #通过实例对象定义实例属性

                4：实例属性的访问：
                    1：在类内部需要使用self关键字来访问：self.obj_attr；
                    2：在类外部需要通过实例对象来访问：obj.obj_attr；
                    3：通过实例对象访问实例属性时，如果实例属性不存在，那么会查找同名类属性；并返回该属性的值；
                
    4：类成员-方法：
        1：构造方法：
            1：构造方法的定义：
                def __init__(self):
                    #构造方法体
            
            2：关于构造方法的说明：
                1：构造方法用来初始化对象，比如初始化实例属性等；而非创建对象；
                2：构造方法的名称必须是__init__，不能是其他名称；
                3：构造方法的第一个参数是self,代表实例对象本身；向构造方法中传入参数时从第二个参数开始；
        
        2：实例方法：
            1：实例方法的定义：
                def func_name(self):
                    #实例方法体
            
            2：关于实例方法的说明：
                1：实例方法属于对象，每一个对象中都有一份实例方法
                


                
         
    