语法风格规范：
    1：关于语句行：
        1.1：语句不需要用 ; 作为语句结束符；也不使用其他任何符号作为语句结束符；
        1.2：原则上一行就是一条语句，语句尽量避免手动换行！不要使用'/'连接不同行；
        1.3：python会将(),[],{}中的行隐式的连接起来，因此tuple,list,dict中的内容以及函数/方法的参数均可换行；
        1.4：如果字符串一行放不下可以对字符串分行之后，使用 () 来包裹；

    2：关于语句块：
        2.1：代码块不使用 {} 包裹，而是通过相同的缩进来确认同一段代码块；也就是说同一个代码块中的代码缩进必须保持一致；
        2.2：缩进推荐使用四个空格(tab设置为四个空格也可以),
        2.3：对于参数换行时，可以使用垂直对齐的方式对参数换行:；如果第一行没有参数，也可以使用四个空格悬挂缩进的方式来换行参数；
        2.4：示例：
            # 垂直对齐
            foo = function_name(var_one, var_two,
                                var_three, var_four)
            # 悬挂缩进
            foo = function_name(
                var_one, var_two,
                var_three, var_four)
                
    3：关于空行：
        3.1：空行不是python的语法要求，但是在代码中合理使用空行可以提高代码的阅读性；
        3.2：顶级定义(函数或者类)之间空两行，方法之间定义空一行；
        3.3：代码中按照阅读需要添加一个空行

    4：关于空格：
        4.1：括号内不要用空格，但是括号内的 , : ; 之后添加空格，比如dict、tuple、list、函数/方法的参数中；
        4.2：对于二元运算符，如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not)两侧添加空格；算数运算符是否添加空格依据实际情况而定；=用在默认参数中时，不要添加空格；
        4.4：不要使用空格来实现对符号的垂直对齐；如：
            foo       = 1000  # comment
            long_name = 2     # comment that should not be aligned
    
    5：关于shebang:
        5.1：大部分py文件不必以#!作为文件的开始，根据PEP-394，程序的main文件应该以#!/usr/bin/pythonx开头；表名该python文件需要使用哪个python解释器解释执行；
    
    6：标识符命名规则：
        6.1：由数字、字母、下划线组成;
        6.2：不能以数字开头；
        6.3：不能和关键字冲突；
        6.4：标识符严格区分大小写；
        6.5：避免以__作为前缀且以__结尾的标识符(如__init__)；
        6.6：要具备可读性；除了计数器和迭代器以外，避免使用单字符名称；
        6.7：使用_前缀的标识符表示当前模块变量或函数是protected,即使用from module import *时不会包含；
        6.8：使用__下划线开头的实例变量或方法表示当前类内私有属性或者私有方法，在类外部无法访问；
        6.9：对类名推荐使用首字母大写的命名方式，但是对于变量，函数，方法，模块名，包名推荐使用小写加下划线的方式；
    
    7：关于脚本内的可执行代码：
        7.1：任何一个脚本文件都应该是可导入的，即当前脚本的执行逻辑都应该放在main()函数中，并在 __name__ == '__main__'时才可以执行；否则在导入该脚本文件时也会引起脚本中代码的执行，造成意外；

    8：使用pylint来检查代码是否有错误：
        8.1：python是脚本编程语言，脚本文件即为最终的可执行文件，因此在编码阶段出现的某些错误有时候无法被发现，容易引起运行时错误，因此推荐使用pylint来检查代码；

注释规范：
    1：python中的注释包含两个方面：文档字符串和代码注释
        1.1：文档字符串是指：在包、模块、类、函数/方法中使用"""文档字符串"""("""包裹起来的字符串)的方式对对应内容进行介绍；语法："""文档字符串"""|'''文档字符串'''
        1.2：代码注释是指：对某一行代码的意义进行描述，帮助阅读代码；语法：# 注释内容
    2：文档字符串：
        通过在包、模块、类、函数/方法中使用"""包裹字符串的方式，来对对应的内容加以说明，帮助更换的阅读使用代码；文档字符串应对遵守以下规范：
        2.1：在函数/方法中使用文档字符串：
            1：理论上每一个函数/方法都应该包含文档字符串来对函数/方法加以说明，除非该函数/方法有以下特征可以省略：
                1：外部不可见
                2：非常短小
                3：逻辑简单明了
            2：文档字符串应该出现在函数/方法的第一行；内容缩进要和函数/方法中的内容缩进保持一致；
            3：文档字符串的结构：
                1：文档字符串第一行应该描述一下该函数/方法的功能，即该函数/方法可以完成什么功能；不用单独缩进，紧跟在"""或者'''后面，并且以。或者！结尾；
                2：描述函数的其他项目：参数，返回值，异常
                    2.1：每一个项目都要和上一个项目使用空行隔开，如果上一个项目是函数/方法的描述，也要使用空行隔开；并且项目要带上项目名；
                    2.2：项目名不用单独缩进两个空格，和"""保持相同的缩进，直接书写，并且以:结尾，分别为：
                        函数/方法需要传入的参数-Args
                        函数/方法的返回值-Returns，如果是生成器则使用Yields
                        函数/方法内可能抛出的异常-Raises
                    2.3：项目内容需要另起一行，相对于"""缩进两个空格开始书写；
                        Args:添加参数描述
                            需要另起一行添加详细内容，列出每一个参数的名字，并使用:和空格添加对该参数的描述，如果描述超过两行，超出的行同样需要使用缩进两个空格或者四个空格悬挂缩进；描述应该包含参数的类型以及含义；
                        Returns/Yields:添加返回值描述
                            需要另起一行添加详细内容，描述返回值的类型以及含义，如果函数没有返回值，该项可以省略；
                        Raises：添加异常描述
                            需要另起一行添加详细内容，需要列出该函数/方法可能抛出的异常以及抛出异常时的情况
                    2.4：示例：
                        def save_user_info(name,age):
                            """该函数存储用户姓名及年龄,并返回存储结果。
                            
                            Args: 
                                name: 用户姓名，必填参数，只能为字符串。
                                age: 用户年龄，必填参数，只能为数字，大于0且小于150。
                            
                            Returs:
                                如果保存成功返回1，如果保存失败返回0。
                            
                            Raises:
                                IOError:数据库连接失败时将会抛出IOError异常。
                            """
        2.3：在类中使用文档字符串为类添加说明:
            1:在类的第一行应该添加一个文档字符串，用来对类进行整体性描述，"""不需要单独缩进两个空格，描述内容和类中代码块缩进一致，紧跟""",并且以 。或者 ！结尾。
            2:如果类中有公共属性(静态属性/实例属性),应该使用Attributes来为公共属性添加说明：Attribute应该和上述对类的描述通过空行隔开，不用缩进两个空格，和"""保持相同的缩进，并且以:结尾；
            3：示例:
                class ExampleClass(object):
                    """该类是测试基类，用来提供基本测试方法。

                    Attributes: 
                        code: 该属性表示测试结果，1：表示测试成功，0表示测试失败
                        id: 该属性表示测试用例id,整数；

    3：基本代码语句注释：
        1.1:代码的解释性注释应该使用#来注释，如果是单行即使用 # 注释内容，如果是多行注释应该在每一行使用 # 注释内容;
        1.2：对于比较复杂的代码块应该在代码块开始时使用 # 来添加注释。
            如：
                # 如果i=0那么打印i=0
                # 如果i!=0那么打印i!=0
                if i==0:
                    print 'i=0'
                else:
                    print 'i!=0'
        1.3：对于单行代码添加解释性注释，应该在代码尾部使用 # 来添加注释，并且#和代码至少间隔两个空格；
            如：
                print time.time()  # 打印当前时间戳


python中的字符编码:
    python分为2.xx版本和3.xx版本；其中2.xx版本默认使用的是ASCII编码，python3.xx版本默认使用的是unicode编码；
    1：关于字符编码：
        字符集和编码：
            1：字符编码应该拆开看，即字符编码是两个概念：字符集和编码规则
            2：字符集：是指一套字符集合，并为每一个字符设置一个编号，通过字符可以得到唯一一个编号，通过编号可以的到唯一一个字符；
            3：编码规则：是指将字符集中的编号转换成二进制串的规则；
            4：编码：既可以是动词，也可以是名词，动词表示将字符编号转换为二进制串，名词表示使用何种编码规则；
        ASCII字符编码：
            1：在计算机中使用1个字节来存储一个字符，最高位置0，剩余7位来表示字符；根据ASCII的规则，得到既是一个字符集，也是一套编码规则(字符编号映射至二进制串的方式即为编码规则)；
            2：并且只包括了英文字母，数字，运算/标点符号以及一些非打印字符，一共128个；其中96个打印字符(字母，数字，符号)和32个非打印字符(控制字符，比如退格，换行，响铃等)
            3：ASCII编码表示的字符类型有限，对于其他字符类型无法表示(比如中文，日文，韩文等)，因此ISO提出了unicode字符编码规则；
        unicode字符集：
            1：unicode编码是ISO提出的一套字符集(注意，unicode仅仅只是字符集)，可以包含上百万个字符；每一个字符都有一个唯一的unicode编号，以16进制表示，并在前面加上U，记做U+XXXX；存储时存储字符对应的unicode编号，获取时获取unicode编号并按照unicode字符集映射关系得到字符本身；
            2：unicode虽然产生了一个字符集，根据unicode编号即可唯一确定一个字符，但是并未规定字符的编号应该如何存储；比如一个字符的编号为44，那么一个字节即可存储，如果编号为44444，那么需要两个字节才能存储，但是unicode并未明确规定如何存储：即如何对字符的unicode编号进行编码得到二进制串进行存储；因此根据对unicode不同的实现规则又产生了UTF-32、UTF-16、UTF-8等编码；
        UTF-8编码规则：
            1：UTF-8是指使用8个二进制位(1个字节)作为一个编码单位，根据字符的不同，使用1~4个字节来存储；是可变长编码，完全兼容ASCII;
            2：如果使用UTF-8编码，则代表使用UTF-8的规则将unicode字符编号映射为字节序列，或者将字节序列映射为unicode字符编号，并使用unicode字符集解释字符编号；

    2：对于python2.x版本的字符编码说明：
        1.1：如果使用python2.x版本：由于其默认使用ASCII字符编码，那么python脚本文件中则不能使用任何非ASCII字符编码的文字及符号，包括注释中也不能使用；

        1.2：如果当前脚本文件中需要有非ASCII字符编码的文字或者符号，则需要在脚本文件第一行(如果带了shebang，则加在第二行)加上：# -*- coding: UTF-8 -*-或者coding:utf-8,表明该脚本文件的编码为UTF-8编码;

        1.3：在文件开头添加上述代码的方式，仅表明当前文件本身的编码使用utf-8编码，这条代码仅对解释器或者某些编辑器读取脚本文件内容有效，但是python对于数据的处理仍然使用ASCII编码，如果程序运行过程中出现非ASCII编码同样会出现编码错误；

        1.4：如过python程序运行过程中需要对非ASCII字符编码的文字及符号进行处理，则需要按照以下方式重新设置
            import sys
            reload(sys)
            sys.setdefaultencoding('utf-8')  # 不是必须设置为utf-8，根据具体需要设置；一般情况下设置为utf-8即可；
        
         