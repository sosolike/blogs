python中的数据类型：
    1：int：整数类型：
        python中int整数类型的特征：
            1：python中的整数概念和数学中的整数概念相同，包括负整数，0，正整数；
            2：python中的整数没有最大值和最小值的限制，可以代表所有整数集中的数字，理论上可以取到正无穷和负无穷；
            3：python中整数允许以二进制、八进制、十进制、十六进制表示：
                以二进制表示时：需要以0b或者0B作为前缀
                以八进制表示时：需要以0o或者0O作为前缀
                以十进制表示时：无需任何前缀
                以十六进制表示时：需要以0x或者0X作为前缀
            4：整数间进制转换：
                转换为二进制：bin(int number)  # number必须是其他进制的整数
                转换为八进制：oct(int number)  # number必须是其他进制的整数
                转换为十六进制：hex(int number)  # number必须是其他进制的整数
                转换为十进制：int(str number,base=10)  #number必须是其他进制的'字符串'，base则为进制数,默认是10进制字符串
            5：其他数据类型转换为十进制整数：
                python中将其他数据类型的数据转换为十进制整数需要使用:
                    int(str number,base=10);
                    1：该函数的功能在于得到一个十进制整数，可以用于数字进制之间转换和数据类型之间转换；
                    2：如果该函数用于进制之间转换，number必须是其他进制格式的字符串；不能是其他进制的数字；      如：
                            只能使用‘0b1001’,但不能是0b1001;
                    3：如果该函数用于数据类型之间的转换则只能是一下几种情况：不能带有任何非数字的字符串、浮点数、布尔值;
                        如:
                            如果是字符串则只能是：'12'；不能是'12a'、'a12'、'a12a';
                            如果是浮点数则只能是：1.23；不能是'1.23';
                            如果是布尔值则只能是：True或者False；不能是'True'或者'False';
                    4：使用int函数进行类型转换时务必保证被转换对象是可以转换成整数的，否则将会抛出 ValueError 异常；因此在使用int进行类型转换时，务必处理该异常；

            6：关于整数的检测：
                1：检测变量值是否是int类型：
                    由于在python中一切皆是对象，因此可以使用 isinstance() 来检测一个变量的值是否是整数：
                        isinstance(var,int)  # 如果是整数则返回True,如果不是整数则返回False
                    也可以使用 type() 函数来检测是否是整数：
                        type(var)  #如果返回int，则表示变量var的值是整数，返回其他值则不是整数

                2：检测变量值是否是整数字符串：
                    1：可以使用 isdigit() 函数来检测：
                        var.isdigit()  # 如果是纯数字则返回True,否则返回False,但是该方法只能检测出纯数字字符串，如果数字带有任何非数字字符(如:正负号)将会返回False

                    2：可以使用正则表达式来检测，使用正则表达式需要先导入 re 模块：
                        re.match(r'[+-]?\d+$',var)  #如果返回None则表示不未匹配到正数字符串；反之则是；

                    3：可以通过 int() 函数在进行类型转换是是否抛出 ValueError 异常类判断是否是整数字符串：
                        try:
                            int(var)
                        except ValueError as e:
                            return False
                        else:
                            return True
    
    2：float：浮点数类型：
        python中浮点数特征：
            1：python中浮点数的概念和数学中的实数概念相同，取值范围是整个实数集；
            2：python中浮点数的表示形式：
                可以使用小数的形式表示：1.23；
                也可以使用指数形式表示：123E-2/123e-2
            3：浮点数的精度问题：
                1：python中的浮点数会有精度不准的问题；
                    比如 print(0.1+0.3)：0.4;但是print(0.1+0.2)：0.30000000000000004;
                    这种现象即称为精度不准；
                2：产生精度不准的原因：
                    1：浮点数的二进制存储方式：python中的浮点数是双精度浮点数，即使用8个字节一共64位来存储小数，其中52位存储浮点数的有效数字(小数点后面的数字)，11位存储指数(以指数形式表示小数时E/e后面的数字)，1为存储正负号；
                    2：十进制的浮点数转换为二进制的结果：由于十进制转换为二进制时，采用的是除2取余逆序排列法，有的情况下会落入无线循环的情况，即始终无法被2整除；那么余数的个数是无线多个的，因此也就超过双精度浮点数的有效数字范围52个，那么第53位数字将会按照0舍1进的方式进行处理，最终导致无法得到精确的浮点数；这也就是浮点数精度不准的原因；
                3：精度不准会带来的影响：
                    1：精度不准在比较运算中得不到符合逻辑的结果：
                        比如 if 0.1+0.2 == 0.3: 结果将会返回False
                    2：精度不准在金融和科技等对数字精度要求较高的行业会无法满足需求；导致无法直接使用浮点数；
                
                4：浮点数的精度处理：
                    1：使用 round(x [,n]) 函数获取指定有效位数的浮点数：
                        round() 函数会按照n指定的有效位数返回x的四舍五入值
                        x、n必须是数值表达式
                        如：round(1.236,1): 1.2
                            round(1.236,2): 1.24

                    2：使用decimal模块，该模块提供了对十进制浮点数的处理方法：
                        1：使用decimal时需要先导入decimal模块中的Decimal类：
                            from decimal import *

                        2：通过float参数创建Decimal实例对象，实现小数的算数运算：
                            d1 = Decimal('0.1')
                            d2 = Decimal('0.2')
                            d3 = d1+d2    #结果是:0.3
                            备注：1：此时只能传入整数或者浮点数字符串；否则在传入Decimal之前已经存在精度不准的现象；
                                  2：参与运算的数据只能是Decimal实例对象或者整数；
                                  3：Decimal类型的运算结果仍然是一个Decimal实例；

                        3：如果运算结果是浮点数，可以通过Decimal获取指定位数的运算结果：
                            getcontext().prec = 3
                            Decimal(1)/Decimal(7)
                            结果是0.143,相比float(1)/float(7)，得到的结果有效位数可以控制；

                        4：四舍五入，保留指定位数：
                            Decimal('1.2363').quantize(Decimal('0.00'))
                            结果是：'1.24'

                        5：将浮点数转换为Decimal类型：
                            Decimal.from_float(1.233)
                                结果是：
                                    1.233000000000000095923269327613525092601776123046875
                                    即得到一个双精度的浮点数

                            
            4：浮点数类型转换：
                1：使用 float() 函数进行类型转换：
                    float()函数可以将整数、浮点数字符串、布尔值转换为浮点数;
                    注意：
                        1：在转换浮点数字符串时，字符串只能是正/负整数字符串或者正/负浮点数字符串，不允许包含任何其他字符；
                        2：如果字符串中含有其他字符，或者无法转换为浮点数将会抛出 ValueError 异常；在转换时务必处理该异常；
                
            7：关于浮点数的检测：
                1：浮点数类型检测
                    1：可以使用 isinstance() 函数检测变量值是否是float类型：
                        isinstance(var,float)  # 如果是浮点数将会返回True，如果不是浮点数将会返回False
                    
                    2：可以使用 type() 函数检测变量值是否是float类型：
                        type(var)  # 如果返回float，则为float类型，返回其他值则不是float类型；
                
                3：检测浮点数字符串：
                    1：可以利用float失败时抛出ValueError来检测是否是float字符串：
                        try:
                            float(var)
                        except ValueError as e:
                            return False
                        else:
                            return True
                            
                    2：使用正则表达式：
                        re.match(r'[+-]?\d+[.]?\d+$')  # 如果返回None则表示未匹配到浮点数字符串，否则匹配到；       
                 
    3：布尔值：
        1：python中的布尔值分别为True和False;需要特别注意的是：Python中的布尔值书写，只能是True和False，除此之外的写法均是非法字符；
        2：python语言中，''、""、空列表[]、空字典{}、空tuple(,)、空set、None、0以及某些常量在条件运算中会被自动转换为布尔值；
        3：比较运算的结果也是布尔值
        4：布尔值也可以直接转换为整数和浮点数；
            True：转换为整数:1；转换为浮点数:1.0;
            False：转换为整数：0；转换为浮点数：0.0
    
    4：空值：None：
        1：python中空值记做None;注意书写形式，只能是None，除此之外的任何其他形式都是非法字符；
        2：None是一个基本的独立的数据类型，表示空的概念；全局唯一，不能和空字符串或者False以及其他空的数据结构等同；但是在条件运算中，None会被自动转换为布尔值False；
        3：None是全局唯一的，即在Python解释器中只有一个None；如果有多个变量为None，那么这些变量的id值是相同的；
    
    5：字符串：
        字符串基本特征：
            1：python中使用 '' 或者 "" 包裹的字符称之为字符串；
            2：python中没有字符类型，只有字符串类型：即 'a' 和 "a" 是相同的。都表示字符串；
            3：python中的字符串尽量避免换行，如果必须换行可以使用()来包裹字符串，()会隐式的将()中的不同行连接起来,但是注意多行之间不要有 , 隔开，否则就成了tuple；
        转义字符：
            1：python中常用的转义字符：\r、\n、\t、\v、\b、\f、\\、\'、\"；
            2：对于转义字符的反转义，使用两个\,即\\；但是如果字符串中有大量的反转义字符，推荐使用r''或者r""来包裹字符串，此时转义字符不会被当做转义字符来解释，而是原样打印；
        字符串的实际数据类型：
            1：python中一切皆对象，每一个字符串都是str类的一个实例对象；因此使用 type(str_var) 获取字符串类型时得到的将是str(<class 'str'>)类型；使用isinstance(str_var,str)将会得到True;
            2：python3中使用unicode字符集，因此在内存中实际存储的是字符所对应的unicode编码，而在网络传输或者磁盘中保存时则一般会转换成utf-8编码格式，也就是二进制串；
        字符串的相关操作：
            1：字符串str实例具备序列特征，字符串中的序列从左向右由0开始计数，从右向左由-1开始计数；

            2：字符串基本操作：
                1：长度的获取：len(str_var)
                2：字符串连接：str_var1+str_var2
                3：字符串重复：str_var*n

            3：字符串的切片操作：
                str_var[n]：获取第n个字符
                str_var[n:]：获取第n个字符之后的所有字符
                str_var[n:m]：获取第n个和第m个之间的字符
                str_var[:m]：获取第m个字符之前的所有字符
                str_var[n:m:i]：获取第n个和第m个字符之间的字符，并每间隔i个获取一次
            
            4：子串检测操作:
                #检测子串是否在指定字符串中
                children_str in parent_str 

                #检测子串是否不在指定字符串中
                children_str not in parent_str 

                #从左向右，在父串中查找子串首次出现的位置，直至串尾，如果找到，则返回首次出现的位置，否则返回-1    
                parent_str.find(children_str) 

                #从右向左，在父串中查找子串首次出现的位置，直至串首，如果找到，则返回首次出现的位置，否则返回-1
                parent_str.rfind(children_str)     

                #在父串中的start_position处开始，从左向右查找子串首次出现的位置，直至串尾，如果找到返回目标在父串中的位置，如果未找到返回-1
                parent_str.find(children_str,start_postion)   

                #在父串中的start_position和stop_position区间，从左向右查找子串首次出现的位置，如果找到返回目标在父串中的位置，如果未找到返回-1
                parent_str.find(children_str,start_postion,stop_position)  

            5：字符串替换操作：
                #替换str_var中的指定字符串，如果替换成功返回替换之后的字符串，原字符串保持不变,替换模式为全部替换；
                new_replace_str = str_var.str_replace("old_str","new_str")    

                #替换str_var中指定的字符串，并指定替换次数，如果替换成功返回替换之后的字符串，原字符串保持不变；
                new_replace_str = str_var.str_replace("old_str","new_str",maxReplaceTimes)

            6：处理字符串两侧空格：
                #去除字符串左侧空格
                str_var.lstrip()
                
                #去除字符串右侧空格
                str_var.rstrip()

                #去除字符两侧空格
                str_var.strip()
            
            7：分割字符串：
                #使用指定字符串分割目标字符串，得到list
                split_list = str_var.split('split_str')
            
            8：字符串格式化：
                优先推荐使用format()方法来格式化字符串,使用format()格式化方法有以下优势：
                    1：无需关心被格式化的数据类型，
                    2：单个参数也可以多次输出，
                    3：填充方式灵活；
                基本语法：
                    "待替换字符串".format(格式化参数)  #待替换字符串由自定义字符串和模板字符串组成，自定义字符串会被原样打印，模板字符串会被替换;

                模板字符串--{<参数填充位>:<格式控制符>}：
                    模板字符串：参数填充位：
                        1：模板字符串需只使用{}来标识，格式化参数将会按照顺序填充标识位：
                            "python {} str {}".format("has","object")："python has str object"

                        2：在模板字符串的{}中指定序号，format()方法将会按照参数顺序和序号的对应关系来填充标识位：
                            "python {1} str {0}".format("object","has")："python has str object"
                        
                        3：在模板字符串的{}中使用关键字来标识，format()方法将会按照参数名称与标识位名称的对应关系来填充标识位：
                            "python {fa} str {fb}".format(fb="object", fa="has")："python has str object"
                        
                        4：在模板字符串的{}中用字典的key来标识，format()方法会按照字典的key与模板字符串中的key的对应关系来填充：
                            python_info = {'ia':'has','ib','object'}
                            "python {info[ia]} str {info[ib]}".format(info=python_info)
                    
                    模板字符串：控制字符：用来对填充位填充的内容进行格式化
                        1：控制字符用来对填充位填充的内容进行格式化，格式控制符需要以 : 和参数填充位的标识分隔开；如{1:.2f}、{:.2f}

                        2：格式控制符功能：
                            <填充> ：指用何种字符填充空白位置
                            <对齐> ：指输出的内容相对于空白位左、右、居中对齐，<左对齐，>右对齐，^居中对齐
                            <宽度> ：指当前标识位置输出宽度；
                            如：设置标识位置输出宽度为6位，并使用-来填充空白位置，标识位的内容右对齐：
                                "{:-<6} python".format("a")：a----- python
                                设置标识位置输出宽度为6位，并使用-来填充空白位置，标识位的内容居中对齐：
                                "{:-<6} python".format("a")：--a--- python

                            <,> ：数字的千位分隔符，适用于整数和浮点数，需要明确千分位是使用 , ；
                            <.精度> ：指浮点数小数部分的精度，或者字符串的最大输出宽度；
                            <类型> ：  b: 输出整数的二进制方式;
                                      c: 输出整数对应的Unicode字符;
                                      d: 输出整数的十进制方式;
                                      o: 输出整数的八进制方式;
                                      x:输出整数的小写十六进制方式;
                                      X:输出整数的大写十六进制方式;
                                      e: 输出浮点数对应的小写字母e的指数形式;
                                      E: 输出浮点数对应的大写字母E的指数形式;
                                      f: 输出浮点数的标准浮点形式;
                                      %: 输出浮点数的百分比形式;

                        3：上述格式控制字符可以根据需要组合使用，但是填充，对齐是建立在宽度的基础上；
                相关异常：        
                    1：在使用format()函数进行格式化时，如果参数个数/顺序无法与模板字符串中的标识位对应，将会抛出 IndexError 异常；因此在使用 format() 函数时务必处理该异常； 

            9：字符类型检测：
                str.startswith('start')     #是否以start开头：
                str.endswith('end')         #是否以end结尾：
                str.isalnum()               #是否全为字母或数字：
                str.isalpha()               #是否全字母：
                str.isdigit()               #是否全数字：
                str.islower()               #是否全小写：
                str.isupper()               #是否全大写：
            
            10：字符串大小写转换：
                str.upper()        #转换成大写
                str.lower()        #转换成小写
                str.swapcase()     #大小写切换
                str.title()        #每个单词的首字母大写
                str.capitalize()   #整个字符串的首字母大写
            
            11：url字符串的编码与解码：
                import urllib
                urllib.parse.urlencode("url")   #对url进行编码
                urllib.parse.urldecode("url")   #对url进行解码
            
            12：对html标签进行转换：
                对于python2可以使用如下方式：
                    #将HTML实体转换为HTML标签:html_str = '&lt;div&gt;'
                    import HTMLParser
                    html_parser = HTMLParser.HTMLParser()
                    html = html_parser.unescape(html_str)   #'&lt;div&gt;' => '<div>'

                    #将HTML标签转换为HTML实体：html_str = "<div>"
                    import cgi
                    txt = cgi.escape(html_str)   #  '<div>' => '&lt;div&gt;'
            
                对于python3则统一使用以下方式：html_str = '&lt;div&gt;'
                    #将HTML实体转换为HTML标签：
                    import html
                    html.escape(html_str)    #"<div>"

                    #将HTML标签转换为HTML实体：
                    import html
                    html.unescape(html_str)    #"&lt;div&gt;"