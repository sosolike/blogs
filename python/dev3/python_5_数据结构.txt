python中的基本数据结构：
    列表：list: 如：[1,2,3,4]，在数据结构层面，python中的list就是一个可以存储任意数据类型数据的线性表；
        1：列表特征：
            1：列表中的元素可以是任意数据类型的数据，但只能是值本身，不能存储k-v键值对；
            2：列表中的元素默认按照存储顺序排序；从左向右序号从0开始计数，从右向左序号从-1开始计数；
            3：列表中的元素个数可以任意增加、修改或者删除，list在python中是可变对象；
        2：列表支持的操作：
            创建列表：
                1：lista = []   #创建空列表
                2：lista = [表达式 for 变量 in 列表]    #列表生成式生成列表，如：[i+1 for i in range(10)]
                3：lista = [表达式 for 变量 in 列表 if 表达式]    #带条件的列表生成式生成列表，如：[i*2 for i in range(5) if i%2==0 ]
                4：lista = list(tuple)    #将tuple类型的数据转换为list类型，如：list((1,2,3,4))

            列表元素操作：
                1：获取元素值：list_name[idnex]    
                    #如：list_name = [1,2,3,4]  list_name[0]:1
                2：设置元素值：list_name[index]    
                    #如：list_name = [1,2,3,4]  list_name[0]=4:[4,2,3,4]
                3：插入元素值：list_name.insert(index,obj)    
                    #如：list_name = [1,2,3,4]  list_name.insert(0,5):[5,1,2,3,4]
                4：追加元素值：list_name.append(obj)    
                    #如：list_name = [1,2,3,4]  list_name.append(5):[1,2,3,4,5]
                5：移除元素值(默认是最后一个)：list_name.pop([index=-1])    
                    #如：list_name = [1,2,3,4]  list_name.pop():[1,2,3]
                6：移除第一个匹配到的元素：list_name.remove(obj)   
                    #如：list_name = [1,2,3,4,3]  list_name.remove(3):[1,2,4,3]
                7：统计列表中元素的出现的个数：list_name.count(obj)    
                    #如：list_name = [1,2,3,3,3,3]  list_name.count(3):4
                8：返回元素第一次出现时的索引：list_name.index(obj)    
                    #如：list_name = [1,2,3,3]  list_name.index(3):2
                9：返回列表中的最大值：max(list_name)    
                    #如：list_name = [1,2,3]   max(list_name):3
                10：返回列表中的最小值：min(list_name)    
                    #如：list_name = [1,2,3]  min(list_name):1

            列表其他操作：
                1：获取列表长度：len(list_name)    
                    #如：list_name = [1,2,3]  len(list_name):3
                2：反向列表中的元素：list_name.reverse()  
                    #如：list_name = [1,2,3]  list_name.reverse(list_name):[3,2,1]
                3：对列表中的元素进行排序：list_name.sort(cmp=None,key=None,reverse=None) 
                    #cmp：指定比较元素大小的方法，reverse指定排序规则True为降序，False为升序；该方法无返回值，会对原列表进行排序；
                4：合并两个list：list1+list2    
                    #如：list1=[1,2]  list2=[3,4] list1+list2:[1,2,3,4]
                5：重复list:list1*n,n是重复次数
                    #如：list1 = [1,2]  list1*2:[1,2,1,2]
                6：检测元素是否在列表中：in
                    #如：list1=[1,2]  1 in list1:True
                7：检测元素是否不在列表中：not in
                    #如：list1=[1,2]  1 not in list1:False
                8：使用连接符连接list中的元素：join(list_name) ;使用join()函数连接list时，list中的元素必须都为str类型，否则将会有TypeError异常；
                    #如：list_name = ['a','b','c']  "-".join(list_name):"a-b-c"

            列表的迭代：
                for x in list_name:
                    #x为列表中的元素

    元祖：tuple:(1,2,3),python中tuple在数据结构层面仍然是一个可以存储任意数据类型数据的线性表；
        1：元祖的特征：
            1：列表中的元素可以是任意数据类型的数据，但只能是值本身，不能存储k-v键值对；
            2：列表中的元素默认按照存储顺序排序；从左向右序号从0开始计数，从右向左序号从-1开始计数；
            3：和list不同之处在于，tuple中的元素一旦确定，将不能再增加、删除、修改元素(元素本身是可变对象时可以修改)
        
        2：元祖的创建：
            1：tuplea = (,)    #创建一个空的元祖或者只有一个元素的元祖时，必须在()中加一个 ',' ；否则将会把()当做运算符号来对待:(1,)或者(,)
            2：tuplea = tuple([])    #将一个list转换为tuple,tuple([1,2]):(1,2)；
            3：tuplea = tuple(表达式 for 变量 in 列表)    #使用list表达式创建tuple；
            4：tuplea = tuple(表达式 for 变量 in 列表 if 表达式)    #使用list表达式创建tuple；
        
        3：元祖元素的操作：
            1：获取元祖中的元素：tuplea[index]
                #如：tuplea = (1,2,3)  tuplea[1]:2
            2：统计列表中元素的出现的个数：tuplea.count(obj)    
                #如：tuplea = (1,2,3,3,3,3)  tuplea.count(3):4
            3：返回元素第一次出现时的索引：tuplea.index(obj)    
                #如：tuplea = (1,2,3,3)  tuplea.index(3):2
            4：返回元祖中的最大值：max(tuplea)    
                #如：tuplea = (1,2,3)  max(tuplea):3
            5：返回元祖中的最小值：min(tuplea)    
                #如：tuplea = (1,2,3)  min(tuplea):1
        
        4：元祖其他操作：
            1：获取元祖长度：len(tuplea)    
                    #如：tuplea = (1,2,3)  len(tuplea):3
            2：合并两个tuple：tuple1+tuple2    
                    #如：tuple1=(1,2)  tuple2=(3,4) tuple1+tuple2:(1,2,3,4)
            3：重复tuple:tuple1*n,n是重复次数
                #如：tuple1 = (1,2)  tuple1*2:(1,2,1,2)
            4：检测元素是否在元祖中：in
                #如：tuple1=(1,2)  1 in tuple1:True
            5：检测元素是否不在元祖中：not in
                #如：tuple1=(1,2)  1 not in tuple1:False
            6：使用连接符连接tuple中的元素：join(tuple) ;使用join()函数连接tuple时，tuple中的元素必须都为str类型，否则将会有TypeError异常；
                #如：tuple = ('a','b','c')  "-".join(tuple):"a-b-c"
        
        5：元祖的迭代：
            for x in tuple_name:
                #x为元祖中的元素
                
    字典：dict：存放键值对的数据结构
        1：字典的特征：
            1：字典中存储键值对，而非单个值；键名不可修改，可以为字符串、数字、元祖等不可变对象，并且键名不允许重复；键值可以为任何数据类型的数据；
            2：字典中的键值对默认无序；
            3：字典中可以任意添加、删除键值对，以及修改键值；字典在python中是可变对象；
        
        2：创建字典：
            1：dicta = {}    #创建一个空的字典;
            2：dicta = {'key':value}    #创建有值的字典；

        3：字典的相关操作：
            1：返回指定键的值，如果不在则返回默认值：dict_name.get(key,default=None)
            2：检测键名是否在字典中：dict_name.has(key)，除此之外还可使用 in  或者 not in；
            3：返回字典中所有的键名：dict_name.keys()
            4：返回字典中所有的键值：dict_name.values()
            5：返回字典中所有的键值对：dict_name.items()
            6：删除字典中的key,并把key的值返回,如果未给定key则返回default：dict_name.pop(key,default)
            7：随机返回字典中的键值对：dict_name.popitem()
            8：删除字典内所有元素：dict_name.clear()
        
        4：字典本身相关操作：
            1：获取字典键值对个数：len(dict_name)

    集合：set：存放值本身，无序且不可重复;
        1：集合的特征：
            1：集合中的元素无序，且不可重复，具备自动去重的能力；
            2：集合中可以存放任意数据类型的数据；
            3：集合可以任意添加、删除元素；
        
        2：集合的创建：
            1：创建空集合：set()    #空集合只能使用set()函数来创建  如：set()
            2：创建非空集合：set() 或者 {}    #只有在创建非空集合时才能使用{},如：set([1,2,3,4])或者{1,2,3,4}
        
        3：集合的操作：
            1：添加元素：add(obj)
                #如：s.add(1)
            
            2：移除元素：remove(obj)
                #如：s.remove(1)，如果被移除的元素不在集合中将会报异常；
            
            3：移除一个元素：discard(obj)
                #如s.discard(1),和remove不同，被移除元素不在集合中时不会报告异常；
            
            4：随机移除元素：pop()
                #如：s.pop()
            
            5：删除集合中所有的元素：clear()
                #如：s.clear()
            
            6：返回x集合和其他集合的并集：union()
                #如：x.union(set1,set2,...)
            
            7：返回x集合和其他集合的交集：intersection()
                #如：x.intersection(set1,set2,...)
            
            8：返回x集合和y集合的差集：deference()
                #如：x.deference(y)  返回x集合中有，但是y集合中没有的元素
            
            9：检测两个集合是否包含相同的元素，如果有返回True,否则返回False:isdisjoint(set)
                #如：s.isdisjoint(set)
            
            10：检测x是否是y的子集：issubset()
                x = {"a", "b", "c"}
                y = {"f", "e", "d", "c", "b", "a"}
                #如：x.issubset(y)  返回True
            
            11：检测y是否是x的子集：issuperset()
                #如：
                    x = {"f", "e", "d", "c", "b", "a"}
                    y = {"a", "b", "c"}
                    x.issuperset(y)  返回True

除过上述python本身自带的四种数据结构以外，python还提供了一个模块：collections，该模块又在上述四种数据结构的基础上丰富了功能；
collections--namedtuple:
    namedtuple：可以为元中的每一个元素设置名称，并且可以通过名称来访问元素值，因此称之为具名元祖；
    1：namedtuple特征：
        1：本质上任然是元祖，因此一旦定义并初始化完成之后，不能再添加、删除、修改元祖中的元素(除非元素本身是可变对象)；
        2：元素有序。默认按照存储顺序排序，从左向右，索引从0开始；从右向左，索引从-1开始计数；
        3：仍然只能存储值本身，不能存储k-v键值对；

    2：namedtuple的使用：
        1：导入namedtuple：
            import namedtuple
        2：创建namedtuple实例：tuple_name = namedtuple(typename,field_names,verbose,rename=False)
                              typename：元祖名称
                              field_names:元祖中的字段名称，元祖中每一个元素都需要有一个名称,名称之间用空格隔开，如："name age id"
                              rename：如果字段名称中含有python的关键字，rename必须设置为True，否则默认为False即可；
                              verbose：保持默认即可
            创建namedtuple实例对象的过程类似于创建一个tuple模板的过程，通过创建的模板可以持续新增同样结构的数据；
            User = namedtuple('User','name age id')

        3：初始化数据：user_tom = User('tom',27,1)   user_jli = User('jli',27,1)

    3：namedtuple的操作：
        1：获取所有字段名：_fields:通过_fields属性，可以获取该tuple中所有的字段名；
            如：user._fields
        
        2：通过list创建namedtuple：_make([]):通过_make方法可以创建一个namedtuple；
            如：User._make(['tom',27,1])
        
        3：由于namedtuple本质上仍是元祖，因此不允许直接修改namedtuple中的元素，如需修改，需要使用_replace()方法进行；
            如：user_tom._replace(age=23)
        
        4：如果需要将namedtuple以更友好的方式打印，可以使用_asdict()；
            如：user_tom._asdict()
        
        5：其余操作和tuple相同；  

collections--deque：
    deque：双端队列：本质上是一个双向循环列表，可以高效的在左右两端增删数据；
    1：deque的特征：
        1：deque仍然是一个线性表，但是是一个双向循环列表，支持高效的从头部和尾部增删数据；deque中的数据有序，从左向右，序号从0开始；从右向左，序号从-1开始；
        2：deque只能存储值本身，不能存储k-v键值对信息；
        3：deque支持任意增加、修改、删除数据；
    
    2：deque创建：
        1：导入deque：
            from collections import deque
        
        2：创建deque实例对象：
            dlist = deque()    #创建一个空deque
            dlist = deque([1,2],maxlen(n))    #第一个参数为list类型，即deque的元素，第二个参数maxlen指当前deque最大容纳的元素，超出之后将会从右侧溢出；
        
    3：deque操作：和list操作完全相同；在实际应用中，如果对list有大量的pop(0)或者insert(0,obj)操作，推荐使用deque；deque对于列表头部的增删时间复杂度是O(1)；list对于头部元素的增删时间复杂度是O(n)


collections--Counter:
    Counter：为hashable对象计数，是一个计数器，用来统计序列(str,list,tuple,dict)中元素出现的次数；继承自dict，是字典的子类；
    1：Counter的特征：
        1：Counter继承自dict,用来统计序列中元素的出现次数，元素作为key,次数作为值，因此Counter本质上任然是个字典；
    
    2：Counter的创建：
        1：导入Counter类：
            from collections import Counter

        2：创建Counter实例对象：
            1：创建一个空的Counter：counter = Counter()
            2：从一组键值对创建Counter：counter = Counter(a=3,b=3)
            3：从一个iterable对象创建Counter：counter = Counter(list/str/dict/tuple)
        
    3：Counter操作：
        1：获取元素的个数：
            counter = Counter(['a','a','s'])
            counter['a']：2
            特别注意：如果Counter中没有对应的键名，则返回0；而非KeyError异常；

        2：更新Counter实例(向Counter中添加待统计内容)：
            counter = Counter("aaass")
            counter.update("as")
            counter['a']：4
        
        3：键的删除：不能直接为键赋值为0，需要使用del来删除键：
            counter = Counter("aaasss")
            counter['a'] = 0 :['a':0,'s':3]
            del counter['a'] :['s':3]
        
        4：相关转换：
            dict(counter)   ：将counter转换为dict字典：键名为元素，键值为该元素出现的次数
            list(counter)   ：将counter转换为list列表：键名为列表的元素
            set(counter)    ：将counter转换为set集合：键名为集合的元素
            
            5：重置counter对象：该操作仅重置counter对象，并不会删除该counter
                counter.clear()
            
            6：返回topN列表：most_common([n])，即取出计数排名前N个元素，如果没有参数N，则返回全部元素
                counter = Counter("aaaadddwwe")
                counter.most_common(2) :[('a',4),('d',3)]

collections--OrderedDict:
    OrderedDict：有序字典，python默认的dict中的键值对是无序的，但是OrderedDict会记录键值对的存储顺序，在遍历时按照存储顺序遍历；
    1：OrderedDict特征：
        1：同字典dict一样，只能存储键值对，而非单个值；键名不可修改，可以为字符串、数字、元祖等不可变对象，并且键名不允许重复；键值可以为任何数据类型的数据；
        2：和字典dict不同的是，dict中键值对默认无序，OrderedDict中的键值对默认按照存储顺序排序；
        3：同字典dict一样，OrderedDict可以任意添加、删除键值对，以及修改键值；OrderedDict在python中是可变对象；
        
    
    2：OrderedDict的创建：
        1：导入OrderDict：
            from collections import OrderedDict

        2：创建OrderedDict对象：
            1：创建空的OrderedDict：OrderedDict()
            2：通过dict创建基于key排序的OrderedDict：OrderedDict(sorted(list_name.items(),key=lambda t:t[0]))   
            3：通过dict创建基于value排序的OrderedDict：OrderedDict(sorted(list_name.items(),key=lambda t:t[1]))
        
        3：OrderedDict操作：
            1：OrderedDict基本操作同dict;
            2：但是对于popitem()函数：默认返回最右边的key-value,如果将lase参数设置为False,则弹出最左边的key-value对；
            3：move_to_end(key,last=True)函数：默认将指定的key-value对移动到最右边，如果last=False,则移至最左边；
        
collections--defaultdict:
    defaultdict:带有默认值的dict字典，功能和dict完全相同，提供一个字典的数据结构，但是不同于dict的是，defaultdict在key不存在的时候不会报KeyError异常，而是返回一个默认值；继承自dict,是dict的子类；

    1：defaultdict特征：
        1：同字典dict一样，defaultdict只能存储键值对，而非单个值；键名不可修改，可以为字符串、数字、元祖等不可变对象，并且键名不允许重复；键值可以为任何数据类型的数据；
        2：同字典dict一样，defaultdict中键值对默认无序；
        3：同字典dict一样，defaultdict中可以任意添加、删除键值对，以及修改键值；defaultdict在python中是可变对象；
        4：唯一和字典不同的是，defaultdict在访问键值对的时候，如果键名不存在，那么会返回默认值，dict中如果键名不存在，则会报KeyError异常;
    
    2：defaultdict的创建：
        1：导入defaultdict：
            from collections import defaultdict
        
        2：创建defaultdict实例对象：
            1：创建一个defaultdict：defaultdict(default_factory);
                说明： 1：其中default_factory默认是None;如果该值为None,在访问不存在的键名时将会报KeyError异常，此时和默认的dict行为一致；
                      2：如果需要在访问不存在的键名时有默认值返回，则需要设置default_factory:
                        如果设置为int：默认值为0；
                            设置为str：默认值是空字符串；
                            设置为list：默认值是空list；
                            设置为dict：默认值是空dict；
                            设置为set：默认值是空set；
                        也可以设置为任意一个对象类型，将会执行该类的构造函数，并返回一个实例对象；
            
        3：defaultdict操作：
            1：基本操作和默认的dict完全相同；

关于排序：sort和sorted：
    1：sort()方法：
        sort()只能在list上使用，并且是在原list上直接排序；
        在python2上，sort()函数有三个参数，(均为可选参数)：sort(key,cmp,reverse)：key指定排序的方式，cmp：为自定义比较大小的函数，reverse：True正序，False：逆序；
        在python3上，取消了cmp参数，只有key和reverse两个可选参数，key：只含有一个参数的方法；reverse：True：正序，False逆序；
    
    2：sorted(iterable, *, key=None, reverse=False)方法：   
        sorted()可以对所有可迭代对象进行排序操作；而且不会改动原数据，而是返回排序后的新序列；
        sorted接收三个参数：第一个参数为 待排序的序列，后面两个为命名关键字参数，key为只有一个参数的函数，reverse:True：正序排序；False：逆序排序；
