laravel中的视图
    视图文件的创建：
        1：视图的默认存放目录：resources/views
        2：视图文件的默认类型是php类型，即视图文件以.php作为后缀
        3：视图可以根据需要分多层，只要保证命名空间正确即可；
    视图文件的返回：
        在控制器中通过 return view(视图文件地址)；来返回视图
        或者：
        在控制器中通过 return response()->view(视图文件地址)；来返回视图

        备注：
            1：view函数中是视图文件地址，只需要文件名，不需要文件后缀;
                如：resources/views/userReg.php视图文件
                    return view("userReg")即可；

            2：view函数的默认基地址是resources/views，因此view函数中的视图文件地址应该从views目录开始；
                如：resources/views/User/userReg.php视图文件
                    return view("User/userReg") 或者：
                    return view("User.userReg") 即可；
            3：判断视图是否存在：
                view()->exists("视图地址");

    向视图文件传递数据：
        return view("视图文件地址",array("param_name"=>"param_value"));

        多个视图共享参数：
            在app/Http/Providers/AppServiceProvider的boot方法中调用share方法传入参数：
                view()->share('key', 'value');
                之后将在所有的视图中均可访问名为key的值；
    
    blade模板：
        blade模板：
            1：不限制是否使用php原生语法；即可以在blade模板的{{}}中使用pph原生语法；
            2：会自动编译为php原生文件，缓存起来，只有在模板文件被修改之后才会从新编译；
            3：模板之间的关系处理方式及其优雅
        blade模板中内容区域的创建：
            1：@section("content_name")   创建一块内容区域，名为content_name
                    some value
               @show
            2:@yield("content_name")     声明一个占位，将要显示的内容名为content_name

            区别：1:语义不同，@section目的是创建一块内容区域，@yield目的是声明一块内存区域，然后占位
                 2：功能不同，@section中间的的内容可以被字模板获取到；@yield后面或者前面的内容将会被写死，字模板获取不到,而且始终占有，删不掉！
        继承：
            子模板使用@extends继承父模板：@extends('父模板地址')
            字模板创建内容：
                @section("content_name")  为父模板中名为content_name的内容区域创建内容
                    @parent               显示父模板中的内容，如果没有@parent父模板中的内容将被覆盖；
                    some value            子模板中设置的内容
                @endsection

                对于@yield声明的内容区域只能创建内容，@yield前后的内容均不能通过@parent获取，也不能覆盖掉；
        
        模板中操作php
            1：模板中默认使用 {{ $name }} 来接收后端向前端传入的变量；
            2：模板中的的{{ }} 中可以直接使用php语法
            3：循环：
                @for ($i = 0; $i < 10; ++$i)
                    {{ $i }} <br />
                @endfor

                @foreach ($data as $k => $v)
                    {{ $k }} <br />
                @endforeach

                @foreach ($data as $k => $v)
                    {{ $k }} <br />
                @empty
                    数组没有数据
                @endforeach

                循环中可以通过$loop->first来判断当前遍历项是不是第一个
                循环中可以通过$loop->last来判断当前遍历项是不是最后一个
                $loop->index  当前遍历项的索引

            4：条件：
                @if (count($records) === 1)
                    I have one record!
                @elseif (count($records) > 1)
                    I have multiple records!
                @else
                    I don't have any records!
                @endif

        模板中包含子视图：
            1：子模板中可以使用全部父模板中的变量
            2：父模板可以向字模板传递任意变量
            3：父模板引入字模板方式：
                @include('child' , [
                    'other' => '额外数据'
                ])
        使用@符号来避免blade渲染引擎渲染{{}}
        如果模板中很大一部分显示js变量，可以将html部分放在@verbatim中
        @verbatim
            <div class="container">
                Hello, {{ name }}.
            </div>
        @endverbatim
        


            

    


