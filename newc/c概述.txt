一：c基本特征：
    1：高级编程语言之一；
    2：是编译执行的编程语言；
    3：c程序会编译成切近硬件的字节码运行，因此执行效率较高；
    4：编程方式上仅支持面向过程编程，不支持面向对象等其他编程方式；
二：c标准：
    C90标准或C89标准：
        ANSI于1989年批准通过了c语言和c标准库称之为C89标准，
        ISO于1990年采用ANSI批准通过的c语言和c标准库，因此又称之为C90标准，
        C89标准和C90标准完全一样；
    C99标准：
        1994年ANSI/ISO联合委员会开始修订c标准，最终发布c99标准，主要目标集中在国际化，弥补缺陷，提高计算实用性方面；
    C11标准：
        2011年发布了C11标准
三：C语言程序执行流程：
    对于解释执行的编程语言，在执行时只需要被解释器逐行读取，然后执行即可；
    对于编译执行的编程语言，在执行时需要先将源代码文件编译为目标文件(二进制)，之后由计算机系统执行；
    c语言是编译执行的编程语言，因此c语言源程序需要转换为目标代码才能够运行；

    转换为目标代码的基本流程包括：1:预处理，2:编译，3:汇编,4:链接四个过程；
    1：c源程序：
        即由c编写的c源代码，文件以.c作为后缀，一个c源程序可以由一个或者多个c源代码文件组成；
    2：预处理：
        预处理是指将所有以#include来包含头文件的代码以及宏定义替换成真正的内容：
        获取预处理之后的文件：
            通过gcc -E test.c -o test.i可以获得预处理之后的文件
            通过cpp命令 cpp test.c -o test.i 可以获得预处理之后的文件
            (-E是指让编译器在预处理之后就退出，不再进行后续的编译过程，-o是为了指定预处理之后的文件名)
        预处理之后的文件以.i作为后缀
        预处理之后的文件依然是文本文件，但是体积会大很多(原因在于#include包含头文件的代码会被替换成头文件的内容)；
    3：编译：
        这里的编译并非指直接将程序源代码转换为二进制代码的过程，而是将预处理过后的文件转换为特定汇编代码的过程；
        获取编译之后的文件：
            通过gcc -S ./test.c -o ./test.s
            (-S是指让编译器在编译之后即停止退出)
        编译完成后生成程序的汇编代码，以.s作为后缀
        编译之后任然是文本文件，文本文件中均为汇编代码；
    4：汇编：
        汇编是指将上述产生的汇编代码转换成机器码，是二进制格式的，产生的结果称之为目标文件；
        获取汇编之后的文件：
            as test.s -o test.o
            或者：
            gcc -c test.s -o test.o
        但是此时的结果文件依然无法执行，原因在于该目标文件仅仅是指定的某一个c源程序得到的目标文件，最终能够被执行的程序需要包含启动代码、程序中所使用的库文件中的代码、被引用的其他c源文件的汇编代码；这一步需要通过链接完成；
    5：链接：
        链接是指将多个目标文件以及所需的库文件合并称为最终的可执行文件；
        获取最终的可执行文件：
            ld -o test.out test.o a.o b.o
            或者：
            gcc -o test.out test.o a.o b.o
        链接过程导入源程序中使用到的库函数代码时只会导入使用到的部分，并不会将整个库函数中所有代码导入；
四：编译器：
    linux上的常用的编译器为：gcc
    windows上常用的编译器为：Cygwin
五：c语言基本语法规范：
    1：c源程序组成：
        一个c源程序由一个或者多个c源代码文件组成；
        一个c源程序有且只能有一个主函数；
        c源代码文件必须编译链接至目标文件才能够运行；
    2：基本语法规则：
        1：语句以;作为语句结束符；
        2：代码以{}作为代码块分割符；
        3：代码以/* .. */或者//作为注释；
        4：标识符命名规则：
            1：数字、字母、下划线组成；
            2：不能以数字开头；
            3：不能和系统关键字冲突；
            4：c标识符严格区分大小写；
            5：尽量避免使用_或者__开头；
            6：禁止使用拼音和英文混合式命名；
        5：主函数：
            1：c语言源程序中必须要有且只能有一个主函数；
            2：c语言源程序执行时从主函数开始逐行执行，最后从主函数处结尾；
            3：主函数名称只能为main，不能更改为其他名称；
            4：主函数的声明方式：int main(){}或者void main(){};
六：c语言常见输入与输出：
    常见输出：
        1：puts();       //输出一个窄字符串；
        2：putchar();    //输出一个窄字符；
        3：printf();     //输出任意数据；
    printf的使用：
        使用规范：printf("format string...",data1,data2,data3);
                备注：
                    1：printf函数参数由两部分组成：第一个参数为格式化字符串，第二个参数开始起均为需要打印的变量，多个变量之间通过,来进行分隔；
        格式化字符串的组成：
            1：格式化字符串由两部分组成：c语言规范的格式化字符和自定义字符；
            2：自定义字符在打印时会原样打印，格式化字符则会和后面的需要打印的变量顺序一一对应进行格式化；
            3：格式化字符组成：%[flag][width][.precision]type
                1：格式化字符均由%开头；
                2：flag：标志符号：
                    -：表示左对齐，如果不填则默认右对齐
                    +：用于数字，表示输出符号，如果不填只有负数才会输出符号
                    空格：用于数字：正数加空格，负数加负号；
                    #：对于小数：强制输出小数点；对于八进制，十六进制，二进制，带上前缀；
                3：width：最小输出宽度，不够是则以空格补齐，超过时则限制失效
                4：.precision： 
                    对于 int，.precision 表示最小输出宽度
                    对于 float，.precision 表示输出精度。
                    对于 str，.precision 表示最大输出宽度。
                5：type:指定需要将变量格式化成指定的数据类型：
                    字符/字符串：
                        %c          //格式化成字符类型
                        %s          //格式化成字符串类型
                    浮点数：
                        %f          //格式化成单精度(float)类型的小数形式
                        %lf         //格式化成双精度(double)类型的小数形式
                        %e          //格式化成单精度(float)类型的指数形式
                        %le         //格式化成双精度(double)类型的指数形式
                        %E          //格式化成单精度(float)类型的指数形式(以大E表示)
                        %lE         //格式化成双精度(double)类型的指数形式(以小e表示)
                    十进制整数：
                        %d          //格式化成十进制、有符号、int类型整数
                        %hd         //格式化成十进制、有符号、short类型整数 
                        %ld         //格式化成十进制、有符号、long类型整数
                        %u          //格式化成十进制、无符号、int类型整数
                        %hu         //格式化成十进制、无符号、short类型整数 
                        %lu         //格式化成十进制、无符号、long类型整数
                    八进制整数：
                        %o          //格式化成八进制、无符号、int类型整数
                        %lo         //格式化成八进制、无符号、long类型整数
                        %ho         //格式化成八进制、无符号、short类型整数
                    十六进制整数：
                        %x          //格式化成十六进制、无符号、int类型整数
                        %lx         //格式化成十六进制、无符号、long类型整数
                        %hx         //格式化成十六进制、无符号、short类型整数
                6：printf并不会立即将需要输出的数据输出至标准输出，而是先写入缓存中，直至有换行符或者强制刷出的时候才会输出至标准输出；
    常用输入：
        scanf()     用于获取用户标准输入；
七：c语言变量：
    1：c语言中使用变量的基本规范：
        1：变量必须先声明后使用；
        2：变量声明时必须注明变量的类型，名称，如有需要也可以赋初值；
        3：变量在声明完成之后数据类型就已确定；
        4：变量在使用过程中只能引用和变量数据类型一致的数据，不能引用其他类型的数据；
    2：变量的命名：
        1：必须遵循c语言标识符命名规范；
        2：推荐采用小写加下划线分割式命名；如：var_name；
    3：全局变量和局部变量：
        全局变量：
            在函数外部声明的变量称之为全局变量；
        全局变量初始值：
            如果全局变量在声明的同时赋予初值则全局变量的初值即为所赋的值；
            如果全局变量在声明的同时并未赋值，则初值为0；
        全局变量只能在函数外部声明以及初始化，不能参与任何赋值和运算表达式，(c语言中运算表达式只能存在于函数内部);
        全局变量分为普通全局变量和静态全局变量：
            普通全局变量：即不含任何特殊含义的全局变量；
                        声明方式如：int a=1;
                        普通全局变量的生命周期：
                            普通全局变量的生命周期和当前程序的声明周期一致，程序运行完毕，其所占内存才能够释放；
                        普通全局变量的作用域：
                            普通全局变量的作用域是组成c源程序的所有源文件；即多个c源文件中出现同名普通全局变量会冲突
                            普通全局变量可以在别的文件中通过extern引用;引用方式：extern date_type var_name
            静态全局变量：即作用域只在当前文件的全局变量：
                        声明方式：static int a=1;
                        静态全局变量的生命周期：
                            静态全局变量的生命周期和当前程序的声明周期一致，程序运行完毕，其所占内存才能够释放；
                        静态全局变量的作用域：
                            静态全局变量的作用域只在当前文件内部；
                            静态全局变量 不 可以在别的文件中通过extern引用
        局部变量：
            在函数内部声明的变量称之为局部变量；
            局部变量的声明位置：
                    对于c89/c90规定，在任何执行语句之前，在块的开头声明所有局部变量；
                    对于c99和c++中则没有这个限制，局部变量声明可以放在首次调用之前的任意位置； 
            局部变量初始值：
                如果声明之后未赋值，只会为其分配指定大小的内存空间，值是未知的；
            局部变量作用域：只能为变量声明之后的代码块之内的代码中使用；
            局部变量分为自动局部变量和静态局部变量：
                自动局部变量 auto
                    1：声明方式如：int b=3; 等同于auto int b=3;
                    2：该变量只能在所声明的函数中使用；其他函数不能调用；
                    3：其生命周期和函数保持一致，函数执行完毕，变量所占用的内存即被释放；
                    4：自动局部变量如果不赋初值，其值是不确定的；
                静态局部变量 static
                    1：该变量只能在所声明的函数中使用；其他函数不能调用；
                    2：其生命周期和程序运行的生命周期一致，
                        1：在调用声明该静态变量的函数时，系统为该静态变量创建内存空间，但是只有程序运行完毕，该静态变量的内存空间才会释放！
                        即：静态局部变量的值在函数调用结束后不消失，而是保留原值，其所占用的内存空间也不释放！下次再调用该函数时，该变量已经有值，将不会再从新声明该变量！值就是上一次调用函数结束时为其赋的值；只有程序运行结束，该静态局部变量所占内存空间才会释放；
                    3：如果静态局部变量不赋初值，其值不确定；
                    4：声明方式：static int a=12;
                在函数内部定义的变量、数组、结构体、共用体等都称为局部数据。在很多编译器下，局部数据的初始值都是随机的、无意义的，而不是通常认为的“零”值。
八：c语言中的数据类型：
    基本数据类型：
        整型数据：
            short int                     2字节(16位)                -32768到32767
            (short)                 
            unsigned short int            2字节(16位)                0~65535
            (unsigned short) 

            int                           2/4字节(16位/32位)         -32768到32767或者-2e32到2e32-1       
            unsigned int                  2/4字节(16位/32位)         0~65535或者0~2e33-1
            (unsigned)

            long int                      8字节                     -2e64到2e64-1
            (long)
            unsigned long int             8字节                     
            (unsigned long)

            long long int                 8字节                     -2e64到2e64-1
            (long long)
            unsigned long long int        8字节
            (unsigned long long)
            修饰类型：
                singed                 有符号(默认类型)
                unsigned               无符号，最小值从0开始
            数据溢出：
                向上溢出
                    有符号类型溢出之后，将直接从负值最小值开始从新计数(向上递增)；
                    无符号类型溢出之后，将直接从0开始从新计数(向上递增)；
                向下溢出：
                    无论有符号还是无符号，均是从正值最大值从新计数(向下递减)；只是正值最大值在有符号和无符号之间不同！
        
        浮点数：                        
            float                       4字节                 6位小数（精确度）、单精度
            double                      8字节                 15位小数（精确度）、双精度
            long double                 16字节                19位小数（精确度）
            备注：
                1：c语言中浮点数无法精确表示浮点数值，只能近似的表示指定值，因此如果比较两个看起来一样的浮点数是否相同；结果一定是不同；
                2：浮点数可以使用小数形式表达，也可使用指数形式表达；但是在内存中，整数部分和小数部分是分开存储的；
                3：对于一些算数运算，浮点数之间运算时损失的精度会更多；（原因在于在任何区间内都存在无穷多个实数，浮点数不能表示区间内所有的值，只是实际值的近似值）
        字符类型：
            1：c语言中没有字符串类型，只有字符类型；
            2：c语言中以''包裹的称之为字符，以""包裹的称之为字符串；
            3：字符类型标识：char；
            4：char类型用于声明字符时使用，但是字符实际保存时仍然保存的是字符所对应的编码值；
            5：char表示的大小是一个字节，表示范围在-128~127之间；unsigned char的表示范围在0~255之间
            6：宽窄字符：
                1：以char声明的，以''包裹的称之为窄字符，由窄字符组成的窄字符串称之为窄字符串；
                2：窄字符以ASCII编码存储；
                3：由于在windows平台中文字符采用utf-16存储，即使用2个字节存储一个中文字符，但是在unix平台采用utf-32存储，即使用4个字节存储一个中文字符；由于中文字符在不同平台中编译器的长度表示不一致，c标准推出了wchar_t类型，wchar_t的类型的长度由编译器决定！wchar_t类型位于<wchar.h>头文件中！
                4：使用wchar_t类型表示的字符称之为宽字符，由宽字符表示的字符串称之为宽字符串；
                5：使用wchar_t这种宽字符需要在字符前加L；如：wchar_t d = L'国';  //中文汉字
            7：宽字符的打印：
                putwchar():只能输出宽单个字符，且要使用setlocale(LC_ALL,"zh_CN");来设置本地化
                wprintf():  用于输出宽字符串
                            宽字符标识：%ls;
                            用法：和printf完全一样
        布尔类型：
            C99标准中添加了_Bool类型，用于表示布尔值；即：true和false
            _Bool大小仅为一位，存储0/1；0表示false,1表示true；
            c语言中能够自动将其余数据类型转换为布尔类型的值；
    数据类型操作：
        1：获取指定数据类型变量的大小：sizeof();
        2：推荐变量命名的时候带上前缀：如i_var代表整形，ui_var代表unsigned int；
    数据类型转换：
        1：自动类型转换
            自动类型转换是由编译器根据计算需求，自动将数据类型进行转换的一种方式；
                自动类型转换发生在两种情况下：
                    1：赋值时：如果类型转换合法，将自动进行转换！(将高精度值赋给低精度值将会发生精度损失)
                    2：运算中：运算中，编译器会将所有的数据的类型转换为同一种数据类型，然后再进行计算！
                              转换方向为数据长度增加方向(高精度方向)进行;
                              所有的浮点运算都是以双精度进行的，即使运算中只有float类型，也将全部转换为double进行运算；
                              需要注意的是：运算结果的溢出！
                              char/short->int->long
                                             ->float->double
        2：手动类型转换
            强制类型转换方式：(目标数据类型)待转换变量  
        备注： 
            1：无论是强制类型转换还是自动类型转换，转换改变的仅仅是结果，源数据的类型并不会改变！
            2：有些类型能够自动转换也能够强制转换，有些类型则只能强制转换不能自动转换！
            3：数据类型转换要合适，不能够在各种数据类型之间随意转换！
    c语言中的进制：
        1：进制组成：
            二进制：由0/1组成，以0b或者0B开头；逢2进位；
            八进制：由0~7八个数字组成，以0开头，逢8进位；
            十进制：由0~9是个数字组成，逢10进位；
            十六进制：由数字0~9、字母A~F或者a~f组成；以0x或者0X开头；
        2：进制输出：
            输出八进制：%o,%lo,%ho
            输出十进制：%d,%ld,%hd、%u,%lu,%hu；
            输出十六进制：%x,%lx,%hx、%X,%lX,%hX;
            备注：输出时，需要加上#来带上输出时的前缀；
                    只有十进制，printf才提供了有符号和无符号的区分！对于八进制和十六进制输出的均是无符号数；
                    printf在以八进制或者十六进制读取数值时，将会把内存中的所有位都当做数值位！
    c语言中的正负数：
        c语言中数字仍然是有正负号的区分；
        1：c语言规定，把内存的最高位作为符号位，如int,其一共32位，0~30位代表具体的数字，第31位表示正负号；
        2：c语言规定，在符号位中，以0表示正数，以1表示负数；
        3：如果仅仅只需要表示正数，不浪费符号位的存储空间，则可以在声明数据类型时加上unsigned；此时最高位(符号位表示的是数值)
        4：printf只能输出负的十进制数，并不能输出负的八进制或者十六进制的数；printf在输出数值时只关心内存不关心数值的声明；
    

            
        
            








    
    



