一：c基本特征：
    1：高级编程语言之一；
    2：是编译执行的编程语言；
    3：c程序会编译成切近硬件的字节码运行，因此执行效率较高；
    4：编程方式上仅支持面向过程编程，不支持面向对象等其他编程方式；
二：c标准：
    C90标准或C89标准：
        ANSI于1989年批准通过了c语言和c标准库称之为C89标准，
        ISO于1990年采用ANSI批准通过的c语言和c标准库，因此又称之为C90标准，
        C89标准和C90标准完全一样；
    C99标准：
        1994年ANSI/ISO联合委员会开始修订c标准，最终发布c99标准，主要目标集中在国际化，弥补缺陷，提高计算实用性方面；
    C11标准：
        2011年发布了C11标准
三：C语言程序执行流程：
    c语言是编译执行的编程语言，而非解释执行，因此c语言源程序需要转换为目标代码才能够运行；
    其基本流程包括：1:预处理，2:编译，3:汇编,4:链接四个过程；
    1：c源程序：
        即由c编写的c源代码，文件以.c作为后缀，一个c源程序可以由一个或者多个c源代码文件组成；
    2：预处理：
        预处理是指将所有以#include来包含头文件的代码以及宏定义替换成真正的内容：
        获取预处理之后的文件：
            通过gcc -E -I./头文件目录地址 test.c -o test.i可以获得预处理之后的文件
            通过cpp命令 cpp test.c -I./头文件目录地址 -o test.i 可以获得预处理之后的文件
            (-E是指让编译器在预处理之后就退出，不再进行后续的编译过程，-I为了指定头文件所在的目录，-o是为了指定预处理之后的文件名)
        预处理之后的文件以.i作为后缀
        预处理之后的文件依然是文本文件，但是体积会大很多(原因在于#include包含头文件的代码会被替换成头文件的内容)；
    3：编译：
        这里的编译并非指直接将程序源代码转换为二进制代码的过程，而是转换为特定汇编代码的过程；
        获取编译之后的文件：
            通过gcc -S -I./头文件目录地址 ./test.c -o ./test.s
            (-S是指让编译器在编译之后即停止退出)
        编译完成后生成程序的汇编代码，以.s作为后缀
        编译之后任然是文本文件，文本文件中均为汇编代码；
    4：汇编：
        汇编是指将上述产生的汇编代码转换成机器码，是二进制格式的，产生的结果称之为目标文件；
        获取汇编之后的文件：
            as test.s -o test.o
            或者：
            gcc -c test.s -o test.o
        但是此时的结果文件依然无法执行，原因在于该目标文件仅仅是c源程序得到的目标文件，最终能够被执行的程序需要包含启动代码以及程序中所使用的库文件中的代码；这一步需要通过链接完成；
    5：链接：
        链接是指将多个目标文件以及所需的库文件合并称为最终的可执行文件；
        获取最终的可执行文件：
            ld -o test.out test.o 头文件中函数实际代码编译所得汇编文件目录/xxx.o ...libraries...
            或者：
            gcc -o test.out test.o ./dir/myfile.o
        链接过程导入源程序中使用到的库函数代码时只会导入使用到的部分，并不会将整个库函数中所有代码导入；
四：编译器：
    linux上的常用的编译器为：gcc
    windows上常用的编译器为：Cygwin
五：c语言基本语法规范：
    1：c源程序组成：
        一个c源程序由一个或者多个c源代码文件组成；
        一个c源程序有且只能有一个主函数；
        c源代码文件必须编译链接至目标文件才能够运行；
    2：基本语法规则：
        1：语句以;作为语句结束符；
        2：代码以{}作为代码块分割符；
        3：代码以/* .. */或者//作为注释；
        4：标识符命名规则：
            1：数字、字母、下划线组成；
            2：不能以数字开头；
            3：不能和系统关键字冲突；
            4：c标识符严格区分大小写；
            5：尽量避免使用_或者__开头；
            6：禁止使用拼音和英文混合是命名；
        5：主函数：
            1：c语言源程序中必须要有且只能有一个主函数；
            2：c语言源程序执行时从主函数开始逐行执行，最后从主函数处结尾；
            3：主函数名称只能为main，不能更改为其他名称；
            4：主函数的声明方式：int main(){}或者void main(){};
六：c语言常见输入与输出：
    常见输出：
        1：puts();       //输出一个窄字符串；
        2：putchar();    //输出一个窄字符；
        3：printf();     //输出任意数据；
    printf的使用：
        使用规范：printf("format string...",data1,data2,data3);
                备注：
                    1：printf函数参数由两部分组成：第一个参数为格式化字符串，第二个参数开始起均为需要打印的变量，多个变量之间通过,来进行分隔；
        格式化字符串的组成：
            1：格式化字符串由两部分组成：c语言规范的格式化字符和自定义字符；
            2：自定义字符在打印时会原样打印，格式化字符则会和后面的需要打印的变量顺序一一对应进行格式化；
            3：格式化字符组成：%[flag][width][.precision]type
                1：格式化字符均由%开头；
                2：flag：标志符号：
                    -：表示左对齐，如果不填则默认右对齐
                    +：用于数字，表示输出符号，如果不填只有负数才会输出符号
                    空格：用于数字：正数加空格，负数加负号；
                    #：对于小数：强制输出小数点；对于八进制，十六进制，二进制，带上前缀；
                3：width：最小输出宽度，不够是则以空格补齐，超过时则限制失效
                4：.precision： 
                    对于 int，.precision 表示最小输出宽度
                    对于 float，.precision 表示输出精度。
                    对于 str，.precision 表示最大输出宽度。
                5：type:指定需要将变量格式化成指定的数据类型：
                    字符/字符串：
                        %c          //格式化成字符类型
                        %s          //格式化成字符串类型
                    浮点数：
                        %f          //格式化成单精度(float)类型的小数形式
                        %lf         //格式化成双精度(double)类型的小数形式
                        %e          //格式化成单精度(float)类型的指数形式
                        %le         //格式化成双精度(double)类型的指数形式
                        %E          //格式化成单精度(float)类型的指数形式(以大E表示)
                        %lE         //格式化成双精度(double)类型的指数形式(以小e表示)
                    十进制整数：
                        %d          //格式化成十进制、有符号、int类型整数
                        %hd         //格式化成十进制、有符号、short类型整数 
                        %ld         //格式化成十进制、有符号、long类型整数
                        %u          //格式化成十进制、无符号、int类型整数
                        %hu         //格式化成十进制、无符号、short类型整数 
                        %lu         //格式化成十进制、无符号、long类型整数
                    八进制整数：
                        %o          //格式化成八进制、无符号、int类型整数
                        %lo         //格式化成八进制、无符号、long类型整数
                        %ho         //格式化成八进制、无符号、short类型整数
                    十六进制整数：
                        %x          //格式化成十六进制、无符号、int类型整数
                        %lx         //格式化成十六进制、无符号、long类型整数
                        %hx         //格式化成十六进制、无符号、short类型整数
                6：printf并不会立即将需要输出的数据输出至标准输出，而是先写入缓存中，直至有换行符或者强制刷出的时候才会输出至标准输出；
    常用输入：
        scanf()     用于获取用户标准输入；
七：c语言变量：
    1：c语言中使用变量的基本规范：
        1：变量必须先声明后使用；
        2：变量声明时必须注明变量的类型，名称，如有需要也可以赋初值；
        3：变量在声明完成之后数据类型就已确定；
        4：变量在使用过程中只能引用和变量数据类型一致的数据，不能引用其他类型的数据；
    2：变量的命名：
        1：必须遵循c语言标识符命名规范；
        2：推荐采用小写加下划线分割式命名；如：var_name；
    3：全局变量和局部变量：
        全局变量：
            在函数外部声明的变量称之为全局变量；
        全局变量初始值：
            如果全局变量在声明的同时赋予初值则全局变量的初值即为所赋的值；
            如果全局变量在声明的同时并未赋值，则初值为0；
        全局变量只能在函数外部声明以及初始化，不能参与任何赋值和运算表达式，(c语言中运算表达式只能存在于函数内部);
        全局变量分为普通全局变量和静态全局变量：
            普通全局变量：即不含任何特殊含义的全局变量；
                        声明方式如：int a=1;
                        普通全局变量的生命周期：
                            普通全局变量的生命周期和当前程序的声明周期一致，程序运行完毕，其所占内存才能够释放；
                        普通全局变量的作用域：
                            普通全局变量的作用域是组成c源程序的所有源文件；即多个c源文件中出现同名普通全局变量会冲突
                            普通全局变量可以在别的文件中通过extern引用
            静态全局变量：即作用域只在当前文件的全局变量：
                        声明方式：static int a=1;
                        静态全局变量的生命周期：
                            静态全局变量的生命周期和当前程序的声明周期一致，程序运行完毕，其所占内存才能够释放；
                        静态全局变量的作用域：
                            静态全局变量的作用域只在当前文件内部；
                            静态全局变量 不 可以在别的文件中通过extern引用
        局部变量：
            在函数内部声明的变量称之为局部变量；
            局部变量的声明位置：
                    对于c89/c90规定，在任何执行语句之前，在块的开头声明所有局部变量；
                    对于c99和c++中则没有这个限制，局部变量声明可以放在首次调用之前的任意位置； 
            局部变量初始值：
                如果声明之后未赋值，只会为其分配指定大小的内存空间，值是未知的；
            局部变量作用域：只能为变量声明之后的代码块之内的代码中使用；
            局部变量分为自动局部变量和静态局部变量：
                自动局部变量 auto
                    1：声明方式如：int b=3; 等同于auto int b=3;
                    2：该变量只能在所声明的函数中使用；其他函数不能调用；
                    3：其生命周期和函数保持一致，函数执行完毕，变量所占用的内存即被释放；
                    4：自动局部变量如果不赋初值，其值是不确定的；
                静态局部变量 static
                    1：该变量只能在所声明的函数中使用；其他函数不能调用；
                    2：其生命周期和程序运行的生命周期一致，
                        1：在调用声明该静态变量的函数时，系统为该静态变量创建内存空间，但是只有程序运行完毕，该静态变量的内存空间才会释放！
                        即：静态局部变量的值在函数调用结束后不消失，而是保留原值，其所占用的内存空间也不释放！下次再调用该函数时，该变量已经有值，将不会再从新声明该变量！值就是上一次调用函数结束时为其赋的值；只有程序运行结束，该静态局部变量所占内存空间才会释放；
                    3：如果静态局部变量不赋初值，其值不确定；
                    4：声明方式：static int a=12;
                在函数内部定义的变量、数组、结构体、共用体等都称为局部数据。在很多编译器下，局部数据的初始值都是随机的、无意义的，而不是通常认为的“零”值。
八：c语言中的数据类型：
    基本数据类型：
        整型数据：
              short int                     2字节(16位)                -32768到32767
              (short)                 
              unsigned short int            2字节(16位)                0~65535
              (unsigned short) 

              int                           2/4字节(16位/32位)          0~65535或者0~2e33-1               
              unsigned int                  2/4字节(16位/32位)         -32768到32767或者-2e32到2e32-1

              long int                      8字节
              (long)
              unsigned long int             8字节
              (unsigned long)

              long long int                 8字节
              (long long)
              unsigned long long int        8字节
              (unsigned long long)
        


            





    
    



