c指针+c数组+c字符串+结构体+c常量+预处理

一：指针：
    1：内存地址：
        数据要被cpu获取到必须先加载至内存中，
        内存在计算机中会被分割为若干个1个字节大小的存储单元，
        每一个存储单元都有一个编号，这个编号即为该存储单元的地址！
        内存中存储单元的地址从0开始，以十六进制表示！
            
    2：指针：
        指向存储单元的标记(内存中存储单元的编号)，就是存储单元的地址！
    
    3：指针和数据：
        指针指的是存储单元的地址(即内存中存储单元的编号)，数据指的是这个地址的存储单元中存放的数据内容；

    4：指针变量： 
        指针变量和普通的变量一样都是变量；
        但是指针变量引用的数据代表的是存储单元的地址；普通变量引用的数据是存储单元中的内容； 
        指针变量存储的数据类型为16进制的unsigned int类型的整数；但是不能直接将指针变量等同于指向无符号整数的普通变量！更不能直接参与算数运算！
    
    5：指针变量的声明：
        1：数据类型名称 *变量名
        2：数据类型名称 * 变量名
        备注：
            1：类型名称是指该指针指向的存储单元中存储的数据的类型；
            2：*指明该变量是指针变量，*在声明时和变量之间可以有空格也可以没有空格；
            3：变量的声明规范和普通变量的声明规范一致；
            4：*作为取值运算符时必须和变量紧紧挨在一起；

    6：指针变量允许的运算：
        1：&:该符号是取地址符；可以通过&符号获取变量所引用的值在内存中的地址；
        2：*:该符号是取值符，可以通过*获取指针变量指向的内存单元所存储的值；
        3：设置存储单元中的内容：*指针变量 = 值；即可将值赋值给指针变量指向的存储单元；
        4：赋值：指针变量的值可以赋值给另一个指针变量(1：赋值双方必须都是指针变量2：两个指针变量必须是相同的数据类型)
        5：加减运算：指针变量允许加上或者减去一个整数；
        6：自增/自减运算：指针变量允许进行自增自减运算；
        对指针变量加减整数/自增自减运算的说明：
            1：普通变量加减某一个整数是指给存储单元中存储的数据本身加/减去n，不会引起所操作数据在内存中地址的改变；
            2：指针变量加减某个整数m:
                微观上看：指针变量加/减某个整数m，是指将指针变量的指向跳过n*m个存储单元，n是指当前指针变量数据类型在当前平台所占字节个数；
                宏观上看：指针变量的加减运算改变的是当前指针指向存储单元的地址；
            3：不允许对指针变量做除过加减/自增自减以外的任何其他算数运算；
            4：普通的指针变量做自增自减或者加减运算并无任何实际意义；指针的指向会改变，但是指向新的存储单元中的数据则是不确定的；
            5：对于数组或者字符串，指针变量的加减/自增自减改变的是指针指向的元素位置，是有意义的；
    7：空指针：NULL：
        1：一个指针变量可以指向任意一块内存区域，无论该内存区域有没有被分配，也不管该内存有没有使用权限，只要给定地址，指针变量就能指向该块内存；
        2：如果指针变量未被初始化，则指针变量指向的存储单元是不确定的，因此对没有初始化的指针赋值为NULL;
        3：计算机系统在低地址的内存空间不存储任何数据，也不能被用户程序访问；
        4：NULL本质上是一个宏，((void *)0);void *表示的是一个实际有效的指针，指向的也是实际的内存空间，但是该快内存空间存储什么类型的值，并不确定；
    8：二级指针：
        1：指针本质上就是一个普通的变量，只是其中所存储的值代表的是某个存储单元的地址；而值本身则是一个十六进制的整数；指针变量本身存储的那个十六进制的整数也是需要占用内存空间的；
        2：指向存储某个指针值的存储单元地址的变量称为二级指针；即二级指针任然是个普通变量，存储十六进制的整数，该整数代表的是另一个指针值的地址；
        3：二级指针需要使用**来声明，同理，三级指针需要使用***来声明；
        4：可以理解指针变量就是普通的变量，仅仅是其所存储的值具备不同的含义，但是编写代码要遵守c语言语法规范；
        5：二级指针取值时需要两个*来取值，三级指针需要三个*来取值，以此类推！

    9：指针与函数：
        1：指针作为函数的参数：
            1：c语言中实参到形参的传递是单向的；即：形参在对应函数中做了修改以后并不会影响实参变量的值；
            2：如果函数中需要改变外部变量的值则必须传递外部变量的内存地址；
            3：对于数组和结构体等数据集合类型的数据建议不要直接传递数据集合本身，而是传递指针；
        2：指针作为函数的返回值：
            1：如果函数将指针作为返回值，则称该函数是指针函数；
            2：指针函数的声明：返回值类型 *函数名(形参){code...}
            3：函数执行完毕之后将会销毁在函数内部声明的所有变量；因此不要将返回指针指向函数内部声明的变量以及形参；
            4：注意函数执行完毕之后会对函数内部所声明的所有变量以及形参销毁，但是销毁并非是直接清空掉函数运行期间申请的内存空间；而是弃之不用，即函数执行完毕之后，其执行期间所申请的内存空间现在可以被写入任意内容；
        3：使用指针调用函数：
            1：函数在内存中占用的也是一段连续的内存区域，一般以函数名作为这段内存区域的首地址；
            2：可以将函数名称声明为指针变量即可使用指针来调用函数；
            3：声明方式：返回值类型/void (*函数名)(形参列表){
                ...函数体
            }
            4：*函数名必须要带(),否则就成为了普通的函数声明，只是返回值是指针而已；
    10：指针与数组：
        1：数组：
            数据的集合称为数组，数组中的每一个值称为数组元素，数组中值的个数称为数组的长度！
            数组长度的计算： length = sizeof(数组名)/sizeof(数组元素数据类型)；
        2：数组的声明：
            数组的使用同样需要先声明后使用；
            数组声明的方式：数据类型 数组名[数组长度]；
            数组的声明包括需要声明数组中所要存储的数据元素的类型，数组名以及数组的长度；
            数组声明完成之后，系统将会为数组分配内存空间，但是并不会对数组进行初始化，因此数组声明完成之后如果未进行赋值，数组元素的值是不确定的；
        3：数组的赋值：
            1：数组可以在声明的同时进行赋值；此时有两种赋值方式：
                1：完全赋值：即按照所声明的数组长度，填入相同个数的值；
                                如：int arr[3] = {1,2,3}
                            备注：完全赋值时数组可以不用显式指定长度；
                                如：int arr[] = {1,2,3}
                2：不完全赋值：赋值的个数少于数组声明时指定的个数；
                                如：int arr[3] = {1}
                            备注：不完全赋值时，数组未赋值的部分也会按照基本规则进行初始化：
                                1：如果数组类型为：int,short,long,将直接赋值为整数0；
                                2：如果数组类型为：char,将赋值为\0；
                                3：如果数组类型为：float或者double，则将会赋值为0.0；
            2：数组可以在声明完成之后赋值：
                数组在声明完成之后赋值将只能通过下标一个一个赋值，不能再使用{}进行赋值；
        4：数组使用的注意事项：
            1：数组在赋值时只能赋值指定数据类型的值，不能赋值其他数据类型的值；
            2：数组中元素的长度不能超过数组声明时指定的长度；
            3：c语言中的数组是静态数组，即长度一旦固定将不能改变，不能随意插入数据，也不能随意删除数据；
            4：固定长度的数组是在编译期间分配内存的；
        5：二维数组：
            二维数组的声明：
                数据类型  数组名[一维长度][二维长度];
            二维数组的本质：
                二维数组本质上类似于一个矩阵：一维长度指的是矩阵的行数；
                                            二维长度指的是矩阵的列数；
            二维数组的理解：
                二维数组可以理解为一维数组，只不过每一个元素的值又指向一个数组
            二维数组的赋值：
                1：分段赋值：
                    1：完全赋值：每一行都完全赋值；
                    2：部分赋值：默认从左向右赋值，其余则按照数据类型填充；
                2：连续赋值：
                    1：完全赋值：从左向右按行赋值；此时可不必给出一维长度；
                    2：部分赋值：从左向右按行赋值；其余则按照数据类型填充；
        6：数组的基本操作：
            取值：数组名[下标]
            赋值：数组名[下标] = 值
        7：数组与指针关系：
            1：数组一旦声明好之后将占用的是一段连续的内存区域；占用存储单元的个数是数组的长度*数组元素类型在当前平台所占字节个数；数组的每一个元素均按顺序存储在这快内存区域；
            2：数组指针：
                指向数组中某个元素的指针称之为数组指针，数组指针和普通的指针并无区别，仅仅只是该指针变量指向的存储单元是存储某个数组的元素的；
            3：数组指针的特征：
                1：数组指针指向数组中某个元素的地址，也仅仅只能够代表其所指向的数组元素，并不能代表整个数组；
                2：由于数组占用一段连续的内存空间，因此数组指针加减某个整数可以指向数组中的其他数组元素；
            4：数组名和数组指针：
                1：数组名在C中既可看做数组的首地址，也可看做整个数组；
                2：在c中除过&运算符，sizeof运算符，数组声明中表示整个数组，除过上述三种情况以外，数组名均只表示数组的首地址；
                3：当数组名代表数组首地址时，其和指向数组第一个元素的数组指针等价；当其代表的是整个数组时则和数组指针不同！
            5：数组元素的访问既可以使用数组名通过下标的方式访问，也可以通过指针来进行访问；
            6：如果函数要求传入数组类型的数据，此时如果传入数组名则仅仅代表的是数组的首地址，并不能代表整个数组，根据传入的数组名也无法使用sizeof来计算数组的长度，数组长度需要单独传入；
        8：指针与二维数组：
            1：二维数组在声明时有行和列，在形式上是二维的，但是在实际存储中是按照一维线性存储的，占用的也是一串连续的内存空间；
            2：由与二维数组在语法上是看做二维处理的，因此二维数组的名称同样指的是数组的首地址；
            3：不同的声明方式：
                int *(p1[5]); //指针数组，等价于int *p1[5]/int * p1[5];声明的是一个一维数组，数组的每一项都是一个指针；
                int (*p1)[5]; //二维数组指针；不能去掉括号，等价于二维数组名；此时p1是一个指针，指向一个数组，数组长度为5，类型为int;
        9：指针数组：和普通数组相同，仅仅只是数组中的数组元素是指针而已；
    11：字符串：
        1：c中并没有专门存储字符串的数据类型，字符串使用字符数组来存储；
        2：c中可以通过""直接声明字符串；
        3：由于字符串本质上是字符数组，因此字符串的名称就类似与字符数组的名称，代表字符串的首地址，字符串的结尾位置则是通过\0来确定的；
        4：只有在""包裹的字符串后面才会添加\0；而单个字符组成的字符数组则不会添加\0；
        5：字符串长度：如果是字符数组组成，则字符串长度为字符数组元素个数；如果是由""包裹的字符串组成，则长度等于""包裹的字符个数+1；
        6：字符串如果是通过""来声明：
            长度推荐采用strlen()来获取，strlen获取的是字符串本身的长度，并不包括\0；sizeof()则会将结束符也计算在内；
           如果使用通过字符数组来声明：
            则strlen获取的是实际字符的个数，而非数组的声明长度；sizeof则获取的是声明的长度；
        7：字符和单字符串是不同的：'x'和"x"是不一样的；
        8：string.h头文件包含了针对字符串的所有操作；
        9：字符串的声明以及初始化方式：
            char str[] = {'a','b','c','d','e'};  //sizeof值为5
            char str2[] = "abcde";               //sizeof值为6
            char str3[] = {"abcde"}              //sizeof值为6
            char *str4 = "abcde"                 
            char *str5 = {"abcde"}
            备注：
                1：以char str[n]类似这种数组声明的方式：
                    1：无论是否初始化，无论以何种方式初始化，系统在声明时均会当成字符数组处理，为其分配内存空间；
                    2：其存储位置是在全局数据区或者栈区，具备读写权限；
                    3：以数组的方式声明时既可以通过数组的方式初始化也可以通过""的方式初始化；
                2：对于char *str类似这种字符指针的声明方式：
                    1：在未被初始化时，只能确定该变量是字符指针变量，无法确定该指针的指向；初始化完成之后，该字符指针变量便会指向给定的字符串首个字符的地址；即字符串的首地址；
                    2：以指针的形式声明的称之为字符串常量，存储在常量区，只具备读权限，无法更改字符串内容；
        
            

                
                
        


