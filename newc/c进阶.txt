c指针+c数组+c字符串+结构体+c常量+预处理

一：指针：
    1：内存地址：
        数据要被cpu获取到必须先加载至内存中，
        内存在计算机中会被分割为若干个1个字节大小的存储单元，
        每一个存储单元都有一个编号，这个编号即为该存储单元的地址！
        内存中存储单元的地址从0开始，以十六进制表示！
            
    2：指针：
        指向存储单元的标记(内存中存储单元的编号)，就是存储单元的地址！
    
    3：指针和数据：
        指针指的是存储单元的地址(即内存中存储单元的编号)，数据指的是这个地址的存储单元中存放的数据内容；

    4：指针变量： 
        指针变量和普通的变量一样都是变量；
        但是指针变量引用的数据代表的是存储单元的地址；普通变量引用的数据是存储单元中的内容； 
        指针变量存储的数据类型为16进制的unsigned int类型的整数；但是不能直接将指针变量等同于指向无符号整数的普通变量！更不能直接参与算数运算！
    
    5：指针变量的声明：
        1：数据类型名称 *变量名
        2：数据类型名称 * 变量名
        备注：
            1：类型名称是指该指针指向的存储单元中存储的数据的类型；
            2：*指明该变量是指针变量，*在声明时和变量之间可以有空格也可以没有空格；
            3：变量的声明规范和普通变量的声明规范一致；
            4：*作为取值运算符时必须和变量紧紧挨在一起；

    6：指针变量允许的运算：
        1：&:该符号是取地址符；可以通过&符号获取变量所引用的值在内存中的地址；
        2：*:该符号是取值符，可以通过*获取指针变量指向的内存单元所存储的值；
        3：设置存储单元中的内容：*指针变量 = 值；即可将值赋值给指针变量指向的存储单元；
        4：赋值：指针变量的值可以赋值给另一个指针变量(1：赋值双方必须都是指针变量2：两个指针变量必须是相同的数据类型)
        5：加减运算：指针变量允许加上或者减去一个整数；
        6：自增/自减运算：指针变量允许进行自增自减运算；
        对指针变量加减整数/自增自减运算的说明：
            1：普通变量加减某一个整数是指给存储单元中存储的数据本身加/减去n，不会引起所操作数据在内存中地址的改变；
            2：指针变量加减某个整数m:
                微观上看：指针变量加/减某个整数m，是指将指针变量的指向跳过n*m个存储单元，n是指当前指针变量数据类型在当前平台所占字节个数；
                宏观上看：指针变量的加减运算改变的是当前指针指向存储单元的地址；
            3：不允许对指针变量做除过加减/自增自减以外的任何其他算数运算；
            4：普通的指针变量做自增自减或者加减运算并无任何实际意义；指针的指向会改变，但是指向新的存储单元中的数据则是不确定的；
            5：对于数组或者字符串，指针变量的加减/自增自减改变的是指针指向的元素位置，是有意义的；
    
    
二：数组：
        1：数组：
            数据的集合称为数组，数组中的每一个值称为数组元素，数组中值的个数称为数组的长度！
            数组长度的计算： length = sizeof(数组名)/sizeof(数组元素数据类型)；
        2：数组的声明：
            数组的使用同样需要先声明后使用；
            数组声明的方式：数据类型 数组名[数组长度]；
            数组的声明包括需要声明数组中所要存储的数据元素的类型，数组名以及数组的长度；
            数组声明完成之后，系统将会为数组分配内存空间，但是并不会对数组进行初始化，因此数组声明完成之后如果未进行赋值，数组元素的值是不确定的；
        3：数组的赋值：
            1：数组可以在声明的同时进行赋值；此时有两种赋值方式：
                1：完全赋值：即按照所声明的数组长度，填入相同个数的值；
                                如：int arr[3] = {1,2,3}
                            备注：完全赋值时数组可以不用显式指定长度；
                                如：int arr[] = {1,2,3}
                2：不完全赋值：赋值的个数少于数组声明时指定的个数；
                                如：int arr[3] = {1}
                            备注：不完全赋值时，数组未赋值的部分也会按照基本规则进行初始化：
                                1：如果数组类型为：int,short,long,将直接赋值为整数0；
                                2：如果数组类型为：char,将赋值为\0；
                                3：如果数组类型为：float或者double，则将会赋值为0.0；
            2：数组可以在声明完成之后赋值：
                数组在声明完成之后赋值将只能通过下标一个一个赋值，不能再使用{}进行赋值；
        4：数组使用的注意事项：
            1：数组在赋值时只能赋值指定数据类型的值，不能赋值其他数据类型的值；
            2：数组中元素的长度不能超过数组声明时指定的长度；
            3：c语言中的数组是静态数组，即长度一旦固定将不能改变，不能随意插入数据，也不能随意删除数据；
            4：固定长度的数组是在编译期间分配内存的；
        5：二维数组：
            二维数组的声明：
                数据类型  数组名[一维长度][二维长度];
            二维数组的本质：
                二维数组本质上类似于一个矩阵：一维长度指的是矩阵的行数；
                                            二维长度指的是矩阵的列数；
            二维数组的理解：
                二维数组可以理解为一维数组，只不过每一个元素的值又指向一个数组
            二维数组的赋值：
                1：分段赋值：
                    1：完全赋值：每一行都完全赋值；
                    2：部分赋值：默认从左向右赋值，其余则按照数据类型填充；
                2：连续赋值：
                    1：完全赋值：从左向右按行赋值；此时可不必给出一维长度；
                    2：部分赋值：从左向右按行赋值；其余则按照数据类型填充；
        6：数组的基本操作：
            取值：数组名[下标]
            赋值：数组名[下标] = 值

    字符串：