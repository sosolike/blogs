数据结构：
    1：逻辑结构
    2：存储结构
逻辑结构：
    逻辑结构用于描述数据元素之间的逻辑关系
    逻辑结构可分为：
        集合结构
        线性结构
        树形结构
        图形结构
存储结构：
    存储结构用于描述元素在内存中的存储方式；
    存储结构按照存储方式可以分为：
        顺序存储结构：元素在内存中使用一段地址连续的内存空间来存储；
            特征：
                1：一组数据元素在内存中占用地址连续的存储空间；
                2：元素的存储顺序即代表元素的逻辑关系；
                3：对内存空间的利用率较低，容易造成内存的碎片化；
        链式存储结构：数据元素可以在内存的任意位置存储；每一个存储单元需要存储元素本身以及下一个元素的地址；
            特征：
                1：一组数据元素在内存中不必使用地址连续的内存空间来存储；
                2：存储方式无法反应元素逻辑关系；元素的地址只能通过相邻元素得到！
                3：对内存空间的利用率较高；可以有效减少内存的碎片化；
算法的优劣：1：算法的时间复杂度；2：算法的空间复杂度；

时间复杂度：
    时间复杂度：时间复杂度用来描述算法的执行时间随着输入规模的增长的变化方式；
    时间复杂度影响因素：1：算法采用的策略，2：问题输入规模，3：代码编译质量，4：硬件执行指令的速度；
    时间复杂度的计算：
        1：除过硬件本身以及代码编译器之外，算法的执行时间只和算法采用的策略以及问题输入规模有关！
        2：算法的复杂度用T(n)表示，T(n)是一个关于问题输入规模n的函数，这个函数使用O(n)来表示；O(n)和算法的策略相关！
        3：这种表示时间复杂度的方式称之为大O记法！
        4：最优算法：随着问题输入规模n的增长，T(n)增长速度最慢的算法称之为最优算法！
        5：大O记法的推导：
            1：运行时间中的加法常数全部使用1取代；
            2：只保留最高阶次项；
            3：最高阶项存在且不为1，则去除与这个项相乘的常数；
    常见的时间复杂度：
        常数阶：T(n)随着n的增长一直不变，称这种算法复杂度为常数阶；记做O(1);
                如:没有循环的顺序结构或者分支结构
        线性阶：T(n)随着n的增长呈线性增长，称这种算法复杂度为线性阶；记做O(n);
                如:单个循环结构，且循环控制参数呈线性增长；
        对数阶：T(n)随着n的增长呈对数增长，称这种算法复杂度为对数阶；记做O(logn);
                如：单个循环结构，且循环控制参数以指数的方式增长；
        平方阶：T(n)随着n的增长呈幂函数式增长，成这种算法复杂度为平方阶；记做O(n^2);
                如：两个线性阶的循环嵌套
        算法复杂度排序：
            O(1)<O(logn)<O(n)<O(nlogn)<O(n^2)<O(n^3)<O(2^n)<O(n!)<O(n^n)
            其中O(n^3)及其以上类型，其函数变化曲线极为陡峭,算法策略极差！
        对于算法的分析一般均指最差的运行情况为算法时间复杂度！
空间复杂度：
    空间复杂度是描述存储空间的占用率随着问题输入规模的变化方式；
    

        
